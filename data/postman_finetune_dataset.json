[
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setGlobalVariable(\"availreportdetails\", function availreportdetails()\n{\n\ttests[\"Status code is 200\"] = responseCode.code === 200;\n\tvar response = JSON.parse(responseBody);\n\ttests[\"availability_details\"] = responseBody.has(\"availability_details\") && (responseBody.availability_details !== null);\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\t//location wise availability details \nif(responseBody.has(\"availability_details\") && response.data.availability_details.length>0){\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"name\"] = responseBody.has(\"name\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.down_count !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.down_count !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.down_count !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.down_count !== null);\n    tests[\"location_id\"] = responseBody.has(\"location_id\") && (responseBody.down_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.down_count !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.down_count !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.down_count !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.down_count !== null);\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\") && (responseBody.down_count !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.down_count !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.down_count !== null);\n}\n\n//Chart data validation\nif(responseBody.has(\"charts\"))\n{   \n    tests[\"name\"] = responseBody.has(\"name\");\n    tests[\"key\"] = responseBody.has(\"key\");\n    tests[\"data\"] = responseBody.has('data\":[[');\n    tests[\"charts\"] = responseBody.has(\"charts\");\n   \n}\nelse\n{tests[\"charts node is missing\"] = responseBody.has(\"charts\");}\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"resource_type_name\"] = responseBody.has(\"resource_type_name\");\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"resource_type\"] = responseBody.has(\"resource_type\");\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\nif(responseBody.has(\"outage_details\"))\n{\n    if(response.data.summary_details.down_count === 0)\n    {\n\t\ttests[\"outage_details\"] = responseBody.has('outage_details\":[]');\n\t}\n    else{\n\ttests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n    if(responseBody.outages !== null)\n\t\t{\n\t\t\ttests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n\t\t\ttests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n\t\t\ttests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n\t\t\ttests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n\t\t\ttests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n\t\t}\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;}\n\t\t} \n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}\n\n// Profile details\nif(responseBody.has(\"profile_details\"))\n{\n    tests[\"profile_details\"] = responseBody.has('profile_details\":{');\n    tests[\"threshold_profiles\"] = responseBody.has('threshold_profiles\":[') && response.data.profile_details.threshold_profiles !== null;\n    tests[\"threshold_profile_details\"] = responseBody.has('threshold_profile_details\":[{');\n    tests[\"threshold_profile_details\"] = responseBody.has('threshold_profile_details\":[') && response.data.profile_details.threshold_profile_details !== null;\n    tests[\"location_profiles\"] = responseBody.has('location_profiles\":[{');\n    tests[\"location_profiles\"] = responseBody.has('location_profiles\":[') && response.data.profile_details.location_profiles !== null;\n\n}\nelse\n{tests[\"profile_details node is missing\"] = responseBody.has(\"profile_details\") ;}\n}\n+ ' availreportdetails()');",
    "output": "pm.globals.set(\"availreportdetails\", (function availreportdetails() {\n    pm.test(\"Status code is 200\", function() {\n        pm.expect(pm.response.code).to.eql(200);\n    });\n\n    var response = pm.response.json();\n    var nr = response.data || {};\n\n    pm.test(\"availability_details\", function() {\n        pm.expect(nr).to.have.property(\"availability_details\");\n        pm.expect(nr.availability_details).to.not.be.null;\n    });\n\n    // Summary details validation\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        var summary = nr.summary_details;\n        pm.test(\"down_count\", function() { pm.expect(summary).to.have.property(\"down_count\").that.is.not.null; });\n        pm.test(\"downtime_duration\", function() { pm.expect(summary).to.have.property(\"downtime_duration\").that.is.not.null; });\n        pm.test(\"availability_percentage\", function() { pm.expect(summary).to.have.property(\"availability_percentage\").that.is.not.null; });\n        pm.test(\"mtbf\", function() { pm.expect(summary).to.have.property(\"mtbf\").that.is.not.null; });\n        pm.test(\"unmanaged_duration\", function() { pm.expect(summary).to.have.property(\"unmanaged_duration\").that.is.not.null; });\n        pm.test(\"alarm_count\", function() { pm.expect(summary).to.have.property(\"alarm_count\").that.is.not.null; });\n        pm.test(\"mttr\", function() { pm.expect(summary).to.have.property(\"mttr\").that.is.not.null; });\n        pm.test(\"maintenance_percentage\", function() { pm.expect(summary).to.have.property(\"maintenance_percentage\").that.is.not.null; });\n        pm.test(\"maintenance_duration\", function() { pm.expect(summary).to.have.property(\"maintenance_duration\").that.is.not.null; });\n        pm.test(\"availability_duration\", function() { pm.expect(summary).to.have.property(\"availability_duration\").that.is.not.null; });\n        pm.test(\"unmanaged_percentage\", function() { pm.expect(summary).to.have.property(\"unmanaged_percentage\").that.is.not.null; });\n        pm.test(\"downtime_percentage\", function() { pm.expect(summary).to.have.property(\"downtime_percentage\").that.is.not.null; });\n    } else {\n        pm.test(\"summary_details is missing\", function() {\n            pm.expect(nr).to.have.property(\"summary_details\");\n        });\n    }\n\n    // Location wise availability details\n    if (nr.hasOwnProperty(\"availability_details\") && nr.availability_details.length > 0) {\n        nr.availability_details.forEach(function(detail) {\n            pm.test(\"down_count\", function() { pm.expect(detail).to.have.property(\"down_count\").that.is.not.null; });\n            pm.test(\"name\", function() { pm.expect(detail).to.have.property(\"name\").that.is.not.null; });\n            pm.test(\"downtime_duration\", function() { pm.expect(detail).to.have.property(\"downtime_duration\").that.is.not.null; });\n            pm.test(\"availability_percentage\", function() { pm.expect(detail).to.have.property(\"availability_percentage\").that.is.not.null; });\n            pm.test(\"mtbf\", function() { pm.expect(detail).to.have.property(\"mtbf\").that.is.not.null; });\n            pm.test(\"unmanaged_duration\", function() { pm.expect(detail).to.have.property(\"unmanaged_duration\").that.is.not.null; });\n            pm.test(\"location_id\", function() { pm.expect(detail).to.have.property(\"location_id\").that.is.not.null; });\n            pm.test(\"mttr\", function() { pm.expect(detail).to.have.property(\"mttr\").that.is.not.null; });\n            pm.test(\"maintenance_percentage\", function() { pm.expect(detail).to.have.property(\"maintenance_percentage\").that.is.not.null; });\n            pm.test(\"maintenance_duration\", function() { pm.expect(detail).to.have.property(\"maintenance_duration\").that.is.not.null; });\n            pm.test(\"availability_duration\", function() { pm.expect(detail).to.have.property(\"availability_duration\").that.is.not.null; });\n            pm.test(\"monitor_id\", function() { pm.expect(detail).to.have.property(\"monitor_id\").that.is.not.null; });\n            pm.test(\"unmanaged_percentage\", function() { pm.expect(detail).to.have.property(\"unmanaged_percentage\").that.is.not.null; });\n            pm.test(\"downtime_percentage\", function() { pm.expect(detail).to.have.property(\"downtime_percentage\").that.is.not.null; });\n        });\n    }\n\n    // Chart data validation\n    if (nr.hasOwnProperty(\"charts\")) {\n        nr.charts.forEach(function(chart) {\n            pm.test(\"name\", function() { pm.expect(chart).to.have.property(\"name\"); });\n            pm.test(\"key\", function() { pm.expect(chart).to.have.property(\"key\"); });\n            pm.test(\"data\", function() { pm.expect(chart).to.have.property(\"data\").that.is.an('array'); });\n            pm.test(\"charts\", function() { pm.expect(nr).to.have.property(\"charts\"); });\n        });\n    } else {\n        pm.test(\"charts node is missing\", function() {\n            pm.expect(nr).to.have.property(\"charts\");\n        });\n    }\n\n    // Info data validation\n    if (nr.hasOwnProperty(\"info\")) {\n        var info = nr.info;\n        pm.test(\"resource_name\", function() { pm.expect(info).to.have.property(\"resource_name\"); });\n        pm.test(\"end_time\", function() { pm.expect(info).to.have.property(\"end_time\"); });\n        pm.test(\"resource_type_name\", function() { pm.expect(info).to.have.property(\"resource_type_name\"); });\n        pm.test(\"report_name\", function() { pm.expect(info).to.have.property(\"report_name\"); });\n        pm.test(\"period_name\", function() { pm.expect(info).to.have.property(\"period_name\"); });\n        pm.test(\"formatted_start_time\", function() { pm.expect(info).to.have.property(\"formatted_start_time\"); });\n        pm.test(\"generated_time\", function() { pm.expect(info).to.have.property(\"generated_time\"); });\n        pm.test(\"formatted_end_time\", function() { pm.expect(info).to.have.property(\"formatted_end_time\"); });\n        pm.test(\"segment_type\", function() { pm.expect(info).to.have.property(\"segment_type\"); });\n        pm.test(\"start_time\", function() { pm.expect(info).to.have.property(\"start_time\"); });\n        pm.test(\"resource_type\", function() { pm.expect(info).to.have.property(\"resource_type\"); });\n        pm.test(\"period\", function() { pm.expect(info).to.have.property(\"period\"); });\n        pm.test(\"formatted_generated_time\", function() { pm.expect(info).to.have.property(\"formatted_generated_time\"); });\n        pm.test(\"report_type\", function() { pm.expect(info).to.have.property(\"report_type\"); });\n        pm.test(\"segment_type_name\", function() { pm.expect(info).to.have.property(\"segment_type_name\"); });\n        if (info.hasOwnProperty(\"resource_tags\")) {\n            pm.test(\"resource_tags\", function() { pm.expect(info).to.have.property(\"resource_tags\"); });\n        }\n    } else {\n        pm.test(\"info is missing\", function() {\n            pm.expect(nr).to.have.property(\"info\");\n        });\n    }\n\n    // Outage data validation\n    if (nr.hasOwnProperty(\"outage_details\")) {\n        if (nr.summary_details.down_count === 0) {\n            pm.test(\"outage_details\", function() {\n                pm.expect(nr.outage_details).to.be.an('array').that.is.empty;\n            });\n        } else {\n            nr.outage_details.forEach(function(outage) {\n                pm.test(\"outages\", function() { pm.expect(outage).to.have.property(\"outages\"); });\n                pm.test(\"monitor_id\", function() { pm.expect(outage).to.have.property(\"monitor_id\"); });\n                if (outage.outages !== null) {\n                    outage.outages.forEach(function(od) {\n                        pm.test(\"outage_id\", function() { pm.expect(od).to.have.property(\"outage_id\").that.is.not.null; });\n                        pm.test(\"end_time\", function() { pm.expect(od).to.have.property(\"end_time\").that.is.not.null; });\n                        pm.test(\"type\", function() { pm.expect(od).to.have.property(\"type\").that.is.not.null; });\n                        pm.test(\"start_time\", function() { pm.expect(od).to.have.property(\"start_time\").that.is.not.null; });\n                        pm.test(\"duration\", function() { pm.expect(od).to.have.property(\"duration\").that.is.not.null; });\n                    });\n                } else {\n                    pm.test(\"outages node is missing\", function() {\n                        pm.expect(outage).to.have.property(\"outages\");\n                    });\n                }\n            });\n        }\n    } else {\n        pm.test(\"outage_details node is missing\", function() {\n            pm.expect(nr).to.have.property(\"outage_details\");\n        });\n    }\n\n    // Profile details\n    if (nr.hasOwnProperty(\"profile_details\")) {\n        var profile = nr.profile_details;\n        pm.test(\"profile_details\", function() { pm.expect(profile).to.be.an('object'); });\n        pm.test(\"threshold_profiles\", function() { pm.expect(profile).to.have.property(\"threshold_profiles\").that.is.not.null; });\n        pm.test(\"threshold_profile_details\", function() { pm.expect(profile).to.have.property(\"threshold_profile_details\").that.is.not.null; });\n        pm.test(\"location_profiles\", function() { pm.expect(profile).to.have.property(\"location_profiles\").that.is.not.null; });\n    } else {\n        pm.test(\"profile_details node is missing\", function() {\n            pm.expect(nr).to.have.property(\"profile_details\");\n        });\n    }\n}) + ' availreportdetails()');"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nvar monitorList = jsonData.data.monitors;\nfor(var i in monitorList)\n{\n    var monitor = monitorList[i];\n    if(monitor.monitor_type=='URL' && monitor.status==1 && monitor.attribute_value!='-')\n    {\n        postman.setEnvironmentVariable(\"getUrlMonitor\", monitor.monitor_id);\n        \n    }\n    if(monitor.monitor_type=='SMTP' && monitor.status==1 && monitor.attribute_value!='-'){\n        postman.setEnvironmentVariable(\"getSmtpMonitor\", monitor.monitor_id);\n       \n        \n    }\n    if(monitor.monitor_type=='SERVER' && (monitor.status==1 || monitor.status==2 || monitor.status==7) && monitor.attribute_value!='-'){\n        postman.setEnvironmentVariable(\"getServerMonitor\", monitor.monitor_id);\n        \n    }\n    if(monitor.monitor_type === 'REALBROWSER' && monitor.status === 1 && monitor.attribute_value!='-')\n    {\n        postman.setGlobalVariable(\"getRBMMid\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'DNS' && (monitor.status === 1 ||  monitor.status==2) && monitor.attribute_value!='-')\n    {\n        postman.setGlobalVariable(\"getDNSMonitor\", monitor.monitor_id);\n    }\n    \n    if(monitor.monitor_type === 'HOMEPAGE' && (monitor.status === 1 ||  monitor.status==2) && monitor.attribute_value!='-')\n    {\n        postman.setGlobalVariable(\"getHOMEPAGEMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'UDP' && (monitor.status === 1 ||  monitor.status==2))\n    {\n        postman.setGlobalVariable(\"getUDPMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'PORT' && (monitor.status === 1 ||  monitor.status==2)&& monitor.attribute_value!='-')\n    {\n        postman.setGlobalVariable(\"getPORTMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'PORT-POP' && (monitor.status === 1 ||  monitor.status==2)&& monitor.attribute_value!='-')\n    {\n        postman.setGlobalVariable(\"getPOPMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'PING' && (monitor.status === 1 ||  monitor.status==2)&& monitor.attribute_value!='-')\n    {\n        postman.setGlobalVariable(\"getPINGMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'PORT-SMTP' && (monitor.status === 1 ||  monitor.status==2)&& monitor.attribute_value!='-')\n    {\n        postman.setGlobalVariable(\"getPORT_SMTPMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'FILEUPLOAD' && (monitor.status === 1 ||  monitor.status==2)&& monitor.attribute_value!='-')\n    {\n        postman.setGlobalVariable(\"getFILEUPLOADMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'GRPC' && (monitor.status === 1 ||  monitor.status==2)&& monitor.attribute_value!='-')\n    {\n        postman.setGlobalVariable(\"getGRPCMonitor\", monitor.monitor_id);\n    }\n    \n}\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
    "output": "var response = pm.response.json();\nvar monitorList = response.data.monitors || [];\nmonitorList.forEach(function(monitor) {\n    if (monitor.monitor_type === 'URL' && monitor.status === 1 && monitor.attribute_value !== '-') {\n        pm.environment.set(\"getUrlMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'SMTP' && monitor.status === 1 && monitor.attribute_value !== '-') {\n        pm.environment.set(\"getSmtpMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'SERVER' && (monitor.status === 1 || monitor.status === 2 || monitor.status === 7) && monitor.attribute_value !== '-') {\n        pm.environment.set(\"getServerMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'REALBROWSER' && monitor.status === 1 && monitor.attribute_value !== '-') {\n        pm.globals.set(\"getRBMMid\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'DNS' && (monitor.status === 1 || monitor.status === 2) && monitor.attribute_value !== '-') {\n        pm.globals.set(\"getDNSMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'HOMEPAGE' && (monitor.status === 1 || monitor.status === 2) && monitor.attribute_value !== '-') {\n        pm.globals.set(\"getHOMEPAGEMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'UDP' && (monitor.status === 1 || monitor.status === 2)) {\n        pm.globals.set(\"getUDPMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'PORT' && (monitor.status === 1 || monitor.status === 2) && monitor.attribute_value !== '-') {\n        pm.globals.set(\"getPORTMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'PORT-POP' && (monitor.status === 1 || monitor.status === 2) && monitor.attribute_value !== '-') {\n        pm.globals.set(\"getPOPMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'PING' && (monitor.status === 1 || monitor.status === 2) && monitor.attribute_value !== '-') {\n        pm.globals.set(\"getPINGMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'PORT-SMTP' && (monitor.status === 1 || monitor.status === 2) && monitor.attribute_value !== '-') {\n        pm.globals.set(\"getPORT_SMTPMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'FILEUPLOAD' && (monitor.status === 1 || monitor.status === 2) && monitor.attribute_value !== '-') {\n        pm.globals.set(\"getFILEUPLOADMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'GRPC' && (monitor.status === 1 || monitor.status === 2) && monitor.attribute_value !== '-') {\n        pm.globals.set(\"getGRPCMonitor\", monitor.monitor_id);\n    }\n});\n\npm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var myDate = new Date();  \nvar year = myDate.getFullYear(); \nvar month = myDate.getMonth()+1; \nvar day= myDate.getDate(); \nvar currentDate=null; \nif(day <= 9)\n{     day = '0'+day; } \nif(month<=9)\n{ month = '0'+month; } \nvar currentDate =year + \"-\" + month + \"-\" + day;\npostman.setGlobalVariable('date',currentDate);",
    "output": "var myDate = new Date();\nvar year = myDate.getFullYear();\nvar month = myDate.getMonth() + 1;\nvar day = myDate.getDate();\nvar currentDate = null;\nif (day <= 9) {\n    day = '0' + day;\n}\nif (month <= 9) {\n    month = '0' + month;\n}\ncurrentDate = year + \"-\" + month + \"-\" + day;\npm.globals.set('date', currentDate);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();",
    "output": "funcUtils = eval(pm.globals.get(\"availreportdetails\"));\navailreportdetails();"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();",
    "output": "let funcUtils = pm.globals.get(\"availreportdetails\");\neval(funcUtils);\navailreportdetails();"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nif (responseBody.has(\"info\")) {\n    tests[\"resource_name\"] = responseData.data.info.resource_name !== null;\n    tests[\"end_time\"] = responseData.data.info.end_time !== null;\n    tests[\"resource_type_name\"] = responseData.data.info.resource_type_name !== null;\n    tests[\"report_name\"] = responseData.data.info.report_name !== null;\n    tests[\"period_name\"] = responseData.data.info.period_name !== null;\n    tests[\"formatted_start_time\"] = responseData.data.info.formatted_start_time !== null;\n    tests[\"formatted_end_time\"] = responseData.data.info.formatted_end_time !== null;\n    tests[\"generated_time\"] = responseData.data.info.generated_time !== null;\n    tests[\"segment_type\"] = responseData.data.info.segment_type !== null;\n    tests[\"start_time\"] = responseData.data.info.start_time !== null;\n    tests[\"resource_type\"] = responseData.data.info.resource_type !== null;\n    tests[\"period\"] = responseData.data.info.period !== null;\n    tests[\"formatted_generated_time\"] = responseData.data.info.formatted_generated_time !== null;\n    tests[\"resource_id\"] = responseData.data.info.resource_id !== null;\n    tests[\"report_type\"] = responseData.data.info.report_type !== null;\n    tests[\"segment_type_name\"] = responseData.data.info.segment_type_name !== null;\n    if(responseBody.has(\"resource_tags\")){\n            tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n        }\n}\ntests[\"summary_details\"] = responseBody.has(\"summary_details\") && responseData.data.summary_details !== null;\nif(responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseData.data.summary_details.down_count!== null;\n    tests[\"downtime_duration\"] = responseData.data.summary_details.downtime_duration!== null;\n    tests[\"availability_percentage\"] = responseData.data.summary_details.availability_percentage!== null;\n    tests[\"mtbf\"] = responseData.data.summary_details.mtbf!== null;\n    tests[\"unmanaged_duration\"] = responseData.data.summary_details.unmanaged_duration!== null;\n    tests[\"alarm_count\"] = responseData.data.summary_details.alarm_count!== null;\n    tests[\"mttr\"] = responseData.data.summary_details.mttr!== null;\n    tests[\"maintenance_percentage\"] = responseData.data.summary_details.maintenance_percentage!== null;\n    tests[\"maintenance_duration\"] = responseData.data.summary_details.maintenance_duration!== null;\n    tests[\"availability_duration\"] = responseData.data.summary_details.availability_duration!== null;\n    tests[\"unmanaged_percentage\"] = responseData.data.summary_details.unmanaged_percentage!== null;\n    tests[\"downtime_percentage\"] = responseData.data.summary_details.downtime_percentage!== null;\n}\ntests[\"availability_details\"] = responseBody.has(\"availability_details\") && responseData.data.availability_details !== null;\nif(responseBody.has(\"availability_details\"))\n{\n    tests[\"down_count\"] = responseData.data.availability_details.down_count!== null;\n    tests[\"name\"] = responseData.data.availability_details.name!== null;\n    tests[\"downtime_duration\"] = responseData.data.availability_details.downtime_duration!== null;\n    tests[\"availability_percentage\"] = responseData.data.availability_details.availability_percentage!== null;\n    tests[\"mtbf\"] = responseData.data.availability_details.mtbf!== null;\n    tests[\"unmanaged_duration\"] = responseData.data.availability_details.unmanaged_duration!== null;\n    tests[\"location_id\"] = responseData.data.availability_details.location_id!== null;\n    tests[\"mttr\"] = responseData.data.availability_details.mttr!== null;\n    tests[\"maintenance_percentage\"] = responseData.data.availability_details.maintenance_percentage!== null;\n    tests[\"maintenance_duration\"] = responseData.data.availability_details.maintenance_duration!== null;\n    tests[\"availability_duration\"] = responseData.data.availability_details.availability_duration!== null;\n    tests[\"unmanaged_percentage\"] = responseData.data.availability_details.unmanaged_percentage!== null;\n    tests[\"downtime_percentage\"] = responseData.data.availability_details.downtime_percentage!== null;\n    tests[\"last_down\"] = responseData.data.availability_details.last_down!== null;\n    tests[\"monitor_id\"] = responseData.data.availability_details.monitor_id!== null;\n}\ntests[\"profile_details\"] = responseBody.has(\"profile_details\") && responseData.data.profile_details !== null;\nif(responseBody.has(\"profile_details\"))\n{\n    tests[\"threshold_profiles\"] = responseData.data.profile_details.threshold_profiles!== null;\n    if(responseData.data.profile_details.threshold_profiles!== null)\n    {\n        for(var i=0;i < responseData.data.profile_details.threshold_profiles.length; i++)\n        {\n            tests[\"threshold_profile\"+i+\"_name\"] = responseData.data.profile_details.threshold_profiles[i].name!== null;\n            tests[\"threshold_profile\"+i+\"_show_name\"] = responseData.data.profile_details.threshold_profiles[i].show_name!== null;\n            tests[\"threshold_profile\"+i+\"_down_condition\"] = responseData.data.profile_details.threshold_profiles[i].down_condition!== null;\n        }\n    }\n    tests[\"threshold_profile_details\"] = responseData.data.profile_details.threshold_profile_details!== null;\n    tests[\"location_profiles\"] = responseData.data.profile_details.location_profiles!== null;\n    if(responseData.data.profile_details.location_profiles!== null)\n    {\n        for(var i=0;i < responseData.data.profile_details.location_profiles.length; i++)\n            {\n                tests[\"location_profiles\"+i+\"_locations\"] = responseData.data.profile_details.location_profiles[i].locations!== null;\n                tests[\"location_profiles\"+i+\"_name\"] = responseData.data.profile_details.location_profiles[i].name!== null;\n            }\n    }\n    \n}\ntests[\"outage_details\"] = responseBody.has(\"outage_details\") && responseData.data.outage_details !== null;\nif(responseBody.has(\"outage_details\"))\n{\n    for(var i=0;i < responseData.data.outage_details.length;i++)\n    {\n        tests[\"outage_details_\"+i+\"_display_name\"] = responseData.data.outage_details[i].display_name!== null;\n        tests[\"outage_details_\"+i+\"_outages\"] = responseData.data.outage_details[i].outages!== null;\n        tests[\"outage_details_\"+i+\"_monitor_id\"] = responseData.data.outage_details[i].monitor_id!== null;\n        if(responseData.data.outage_details[i].outages!== null)\n        {\n            for(var j=0;j < responseData.data.outage_details[i].outages.length; j++)\n            {\n                tests[\"outage_\"+j+\"_outage_id\"] = responseData.data.outage_details[i].outages[j].outage_id!== null;\n                tests[\"outage_\"+j+\"_end_time\"] = responseData.data.outage_details[i].outages[j].end_time!== null;\n                tests[\"outage_\"+j+\"_image_file\"] = responseData.data.outage_details[i].outages[j].image_file!== null;\n                tests[\"outage_\"+j+\"_type\"] = responseData.data.outage_details[i].outages[j].type!== null;\n                tests[\"outage_\"+j+\"_start_time\"] = responseData.data.outage_details[i].outages[j].start_time!== null;\n                tests[\"outage_\"+j+\"_rca\"] = responseData.data.outage_details[i].outages[j].rca!== null;\n                tests[\"outage_\"+j+\"_reason\"] = responseData.data.outage_details[i].outages[j].reason!== null;\n                tests[\"outage_\"+j+\"_duration\"] = responseData.data.outage_details[i].outages[j].duration!== null;\n            }\n        }\n    }\n}\ntests[\"charts\"] = responseBody.has(\"charts\") && responseData.data.charts !== null;\nif(responseBody.has(\"charts\"))\n{\n    for(var i=0;i < responseData.data.charts.length;i++)\n    {\n        tests[\"charts_\"+i+\"_name\"] = responseData.data.charts[i].name!== null;\n        tests[\"charts_\"+i+\"_key\"] = responseData.data.charts[i].key!== null;\n        tests[\"charts_\"+i+\"_data\"] = responseData.data.charts[i].data!== null;\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"info\", function () {\n    pm.expect(nr.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function () {\n        pm.expect(nr.info.resource_name !== null).to.be.true;\n    });\n    pm.test(\"end_time\", function () {\n        pm.expect(nr.info.end_time !== null).to.be.true;\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info.resource_type_name !== null).to.be.true;\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.info.report_name !== null).to.be.true;\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(nr.info.period_name !== null).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(nr.info.formatted_start_time !== null).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(nr.info.formatted_end_time !== null).to.be.true;\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(nr.info.generated_time !== null).to.be.true;\n    });\n    pm.test(\"segment_type\", function () {\n        pm.expect(nr.info.segment_type !== null).to.be.true;\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(nr.info.start_time !== null).to.be.true;\n    });\n    pm.test(\"resource_type\", function () {\n        pm.expect(nr.info.resource_type !== null).to.be.true;\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.info.period !== null).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(nr.info.formatted_generated_time !== null).to.be.true;\n    });\n    pm.test(\"resource_id\", function () {\n        pm.expect(nr.info.resource_id !== null).to.be.true;\n    });\n    pm.test(\"report_type\", function () {\n        pm.expect(nr.info.report_type !== null).to.be.true;\n    });\n    pm.test(\"segment_type_name\", function () {\n        pm.expect(nr.info.segment_type_name !== null).to.be.true;\n    });\n    if (response.hasOwnProperty(\"resource_tags\")) {\n        pm.test(\"resource_tags\", function () {\n            pm.expect(response.hasOwnProperty(\"resource_tags\")).to.be.true;\n        });\n    }\n}\n\npm.test(\"summary_details\", function () {\n    pm.expect(nr.hasOwnProperty(\"summary_details\") && nr.summary_details !== null).to.be.true;\n});\n\nif (response.hasOwnProperty(\"summary_details\")) {\n    pm.test(\"down_count\", function () {\n        pm.expect(nr.summary_details.down_count !== null).to.be.true;\n    });\n    pm.test(\"downtime_duration\", function () {\n        pm.expect(nr.summary_details.downtime_duration !== null).to.be.true;\n    });\n    pm.test(\"availability_percentage\", function () {\n        pm.expect(nr.summary_details.availability_percentage !== null).to.be.true;\n    });\n    pm.test(\"mtbf\", function () {\n        pm.expect(nr.summary_details.mtbf !== null).to.be.true;\n    });\n    pm.test(\"unmanaged_duration\", function () {\n        pm.expect(nr.summary_details.unmanaged_duration !== null).to.be.true;\n    });\n    pm.test(\"alarm_count\", function () {\n        pm.expect(nr.summary_details.alarm_count !== null).to.be.true;\n    });\n    pm.test(\"mttr\", function () {\n        pm.expect(nr.summary_details.mttr !== null).to.be.true;\n    });\n    pm.test(\"maintenance_percentage\", function () {\n        pm.expect(nr.summary_details.maintenance_percentage !== null).to.be.true;\n    });\n    pm.test(\"maintenance_duration\", function () {\n        pm.expect(nr.summary_details.maintenance_duration !== null).to.be.true;\n    });\n    pm.test(\"availability_duration\", function () {\n        pm.expect(nr.summary_details.availability_duration !== null).to.be.true;\n    });\n    pm.test(\"unmanaged_percentage\", function () {\n        pm.expect(nr.summary_details.unmanaged_percentage !== null).to.be.true;\n    });\n    pm.test(\"downtime_percentage\", function () {\n        pm.expect(nr.summary_details.downtime_percentage !== null).to.be.true;\n    });\n}\n\npm.test(\"availability_details\", function () {\n    pm.expect(nr.hasOwnProperty(\"availability_details\") && nr.availability_details !== null).to.be.true;\n});\n\nif (nr.hasOwnProperty(\"availability_details\")) {\n    for (var i = 0; i < nr.availability_details.length; i++) {\n        pm.test(\"down_count\", function () {\n            pm.expect(nr.availability_details[i].down_count !== null).to.be.true;\n        });\n        pm.test(\"name\", function () {\n            pm.expect(nr.availability_details[i].name !== null).to.be.true;\n        });\n        pm.test(\"downtime_duration\", function () {\n            pm.expect(nr.availability_details[i].downtime_duration !== null).to.be.true;\n        });\n        pm.test(\"availability_percentage\", function () {\n            pm.expect(nr.availability_details[i].availability_percentage !== null).to.be.true;\n        });\n        pm.test(\"mtbf\", function () {\n            pm.expect(nr.availability_details[i].mtbf !== null).to.be.true;\n        });\n        pm.test(\"unmanaged_duration\", function () {\n            pm.expect(nr.availability_details[i].unmanaged_duration !== null).to.be.true;\n        });\n        pm.test(\"location_id\", function () {\n            pm.expect(nr.availability_details[i].location_id !== null).to.be.true;\n        });\n        pm.test(\"mttr\", function () {\n            pm.expect(nr.availability_details[i].mttr !== null).to.be.true;\n        });\n        pm.test(\"maintenance_percentage\", function () {\n            pm.expect(nr.availability_details[i].maintenance_percentage !== null).to.be.true;\n        });\n        pm.test(\"maintenance_duration\", function () {\n            pm.expect(nr.availability_details[i].maintenance_duration !== null).to.be.true;\n        });\n        pm.test(\"availability_duration\", function () {\n            pm.expect(nr.availability_details[i].availability_duration !== null).to.be.true;\n        });\n        pm.test(\"unmanaged_percentage\", function () {\n            pm.expect(nr.availability_details[i].unmanaged_percentage !== null).to.be.true;\n        });\n        pm.test(\"downtime_percentage\", function () {\n            pm.expect(nr.availability_details[i].downtime_percentage !== null).to.be.true;\n        });\n        pm.test(\"last_down\", function () {\n            pm.expect(nr.availability_details[i].last_down !== null).to.be.true;\n        });\n        pm.test(\"monitor_id\", function () {\n            pm.expect(nr.availability_details[i].monitor_id !== null).to.be.true;\n        });\n    }\n}\n\npm.test(\"profile_details\", function () {\n    pm.expect(nr.hasOwnProperty(\"profile_details\") && nr.profile_details !== null).to.be.true;\n});\n\nif (response.hasOwnProperty(\"profile_details\")) {\n    pm.test(\"threshold_profiles\", function () {\n        pm.expect(nr.profile_details.threshold_profiles !== null).to.be.true;\n    });\n    if (nr.profile_details.threshold_profiles !== null) {\n        for (var i = 0; i < nr.profile_details.threshold_profiles.length; i++) {\n            pm.test(\"threshold_profile\" + i + \"_name\", function () {\n                pm.expect(nr.profile_details.threshold_profiles[i].name !== null).to.be.true;\n            });\n            pm.test(\"threshold_profile\" + i + \"_show_name\", function () {\n                pm.expect(nr.profile_details.threshold_profiles[i].show_name !== null).to.be.true;\n            });\n            pm.test(\"threshold_profile\" + i + \"_down_condition\", function () {\n                pm.expect(nr.profile_details.threshold_profiles[i].down_condition !== null).to.be.true;\n            });\n        }\n    }\n    pm.test(\"threshold_profile_details\", function () {\n        pm.expect(nr.profile_details.threshold_profile_details !== null).to.be.true;\n    });\n    pm.test(\"location_profiles\", function () {\n        pm.expect(nr.profile_details.location_profiles !== null).to.be.true;\n    });\n    if (nr.profile_details.location_profiles !== null) {\n        for (var i = 0; i < nr.profile_details.location_profiles.length; i++) {\n            pm.test(\"location_profiles\" + i + \"_locations\", function () {\n                pm.expect(nr.profile_details.location_profiles[i].locations !== null).to.be.true;\n            });\n            pm.test(\"location_profiles\" + i + \"_name\", function () {\n                pm.expect(nr.profile_details.location_profiles[i].name !== null).to.be.true;\n            });\n        }\n    }\n}\n\npm.test(\"outage_details\", function () {\n    pm.expect(nr.hasOwnProperty(\"outage_details\") && nr.outage_details !== null).to.be.true;\n});\n\nif (nr.hasOwnProperty(\"outage_details\")) {\n    for (var i = 0; i < nr.outage_details.length; i++) {\n        pm.test(\"outage_details_\" + i + \"_monitor_id\", function () {\n            pm.expect(nr.outage_details[i].monitor_id !== null).to.be.true;\n        });\n        if (nr.outage_details[i].outages !== null) {\n            for (var j = 0; j < nr.outage_details[i].outages.length; j++) {\n                pm.test(\"outage_\" + j + \"_outage_id\", function () {\n                    pm.expect(nr.outage_details[i].outages[j].outage_id !== null).to.be.true;\n                });\n                pm.test(\"outage_\" + j + \"_end_time\", function () {\n                    pm.expect(nr.outage_details[i].outages[j].end_time !== null).to.be.true;\n                });\n                pm.test(\"outage_\" + j + \"_image_file\", function () {\n                    pm.expect(nr.outage_details[i].outages[j].image_file !== null).to.be.true;\n                });\n                pm.test(\"outage_\" + j + \"_type\", function () {\n                    pm.expect(nr.outage_details[i].outages[j].type !== null).to.be.true;\n                });\n                pm.test(\"outage_\" + j + \"_start_time\", function () {\n                    pm.expect(nr.outage_details[i].outages[j].start_time !== null).to.be.true;\n                });\n                pm.test(\"outage_\" + j + \"_rca\", function () {\n                    pm.expect(nr.outage_details[i].outages[j].rca !== null).to.be.true;\n                });\n                pm.test(\"outage_\" + j + \"_reason\", function () {\n                    pm.expect(nr.outage_details[i].outages[j].reason !== null).to.be.true;\n                });\n                pm.test(\"outage_\" + j + \"_duration\", function () {\n                    pm.expect(nr.outage_details[i].outages[j].duration !== null).to.be.true;\n                });\n            }\n        }\n    }\n}\n\npm.test(\"charts\", function () {\n    pm.expect(nr.hasOwnProperty(\"charts\") && nr.charts !== null).to.be.true;\n});\n\nif (nr.hasOwnProperty(\"charts\")) {\n    for (var i = 0; i < nr.charts.length; i++) {\n        pm.test(\"charts_\" + i + \"_name\", function () {\n            pm.expect(nr.charts[i].name !== null).to.be.true;\n        });\n        pm.test(\"charts_\" + i + \"_key\", function () {\n            pm.expect(nr.charts[i].key !== null).to.be.true;\n        });\n        pm.test(\"charts_\" + i + \"_data\", function () {\n            pm.expect(nr.charts[i].data !== null).to.be.true;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setGlobalVariable(\"rbmmid\",postman.getGlobalVariable(\"getRBMMid\"));",
    "output": "pm.globals.set(\"rbmmid\", pm.globals.get(\"getRBMMid\"));"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();",
    "output": "let response = pm.response.json();\nlet nr = response.data || {};\n\npm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\npm.test(\"Summary details are present\", function() {\n    pm.expect(nr).to.have.property('summary_details');\n    pm.expect(nr.summary_details).to.have.property('down_count');\n    pm.expect(nr.summary_details).to.have.property('downtime_duration');\n});\n\npm.test(\"Charts are present\", function() {\n    pm.expect(nr).to.have.property('charts');\n    nr.charts.forEach(function(chart) {\n        pm.expect(chart).to.be.an('object');\n    });\n});\n\npm.test(\"Availability details are present\", function() {\n    pm.expect(nr).to.have.property('availability_details');\n    nr.availability_details.forEach(function(detail) {\n        pm.expect(detail).to.be.an('object');\n    });\n});\n\npm.test(\"Outage details are present\", function() {\n    pm.expect(nr).to.have.property('outage_details');\n    nr.outage_details.forEach(function(outage) {\n        pm.expect(outage).to.be.an('object');\n    });\n});\n\npm.test(\"Profile details are present\", function() {\n    pm.expect(nr).to.have.property('profile_details');\n    pm.expect(nr.profile_details).to.be.an('object');\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\n\npm.test(\"Response has summary details\", function () {\n    pm.expect(nr).to.have.property('summary_details');\n});\n\npm.test(\"Response has charts\", function () {\n    pm.expect(nr).to.have.property('charts');\n    if (nr.charts && Array.isArray(nr.charts)) {\n        nr.charts.forEach(function (chart) {\n            pm.expect(chart).to.be.an('object');\n        });\n    }\n});\n\npm.test(\"Response has info\", function () {\n    pm.expect(nr).to.have.property('info');\n});\n\npm.test(\"Response has availability details\", function () {\n    pm.expect(nr).to.have.property('availability_details');\n    if (nr.availability_details && Array.isArray(nr.availability_details)) {\n        nr.availability_details.forEach(function (detail) {\n            pm.expect(detail).to.be.an('object');\n        });\n    }\n});\n\npm.test(\"Response has outage details\", function () {\n    pm.expect(nr).to.have.property('outage_details');\n    if (nr.outage_details && Array.isArray(nr.outage_details)) {\n        nr.outage_details.forEach(function (outage) {\n            pm.expect(outage).to.be.an('object');\n        });\n    }\n});\n\npm.test(\"Response has profile details\", function () {\n    pm.expect(nr).to.have.property('profile_details');\n});\n\npm.test(\"Summary details have down_count\", function () {\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details).to.have.property('down_count');\n    }\n});\n\npm.test(\"Summary details have downtime_duration\", function () {\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details).to.have.property('downtime_duration');\n    }\n});\n\nlet function_call = pm.globals.get(\"availreportdetails\");\neval(function_call);\navailreportdetails();"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();",
    "output": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();",
    "output": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();",
    "output": "pm.test(\"Response code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Check if data property is present\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property('summary_details');\n    pm.expect(nr).to.have.property('charts');\n    pm.expect(nr).to.have.property('info');\n    pm.expect(nr).to.have.property('availability_details');\n    pm.expect(nr).to.have.property('outage_details');\n    pm.expect(nr).to.have.property('profile_details');\n});\n\npm.test(\"Verify summary details properties\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details).to.have.property('down_count');\n        pm.expect(nr.summary_details).to.have.property('downtime_duration');\n    }\n});\n\npm.test(\"Check charts array\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (Array.isArray(nr.charts)) {\n        nr.charts.forEach(function (chart) {\n            pm.expect(chart).to.be.an('object');\n        });\n    }\n});\n\npm.test(\"Verify availability details array\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (Array.isArray(nr.availability_details)) {\n        nr.availability_details.forEach(function (detail) {\n            pm.expect(detail).to.be.an('object');\n        });\n    }\n});\n\npm.test(\"Check outage details array\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (Array.isArray(nr.outage_details)) {\n        nr.outage_details.forEach(function (outage) {\n            pm.expect(outage).to.be.an('object');\n        });\n    }\n});\n\npm.test(\"Verify profile details object\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.profile_details) {\n        pm.expect(nr.profile_details).to.be.an('object');\n    }\n});\n\nlet function_call = pm.globals.get(\"availreportdetails\");\neval(function_call);\navailreportdetails();"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();",
    "output": "let response = pm.response.json();\nlet nr = response.data || {};\n\npm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Response has data property\", function() {\n    pm.expect(response).to.have.property('data');\n});\n\npm.test(\"Summary details are correct\", function() {\n    if (nr.hasOwnProperty('summary_details')) {\n        pm.expect(nr.summary_details).to.have.property('down_count');\n        pm.expect(nr.summary_details).to.have.property('downtime_duration');\n    }\n});\n\npm.test(\"Charts array is valid\", function() {\n    if (nr.hasOwnProperty('charts')) {\n        pm.expect(nr.charts).to.be.an('array');\n        for (let i = 0; i < nr.charts.length; i++) {\n            // Perform necessary checks for each chart element\n        }\n    }\n});\n\npm.test(\"Availability details array is valid\", function() {\n    if (nr.hasOwnProperty('availability_details')) {\n        pm.expect(nr.availability_details).to.be.an('array');\n        for (let i = 0; i < nr.availability_details.length; i++) {\n            // Perform necessary checks for each availability detail\n        }\n    }\n});\n\npm.test(\"Outage details array is valid\", function() {\n    if (nr.hasOwnProperty('outage_details')) {\n        pm.expect(nr.outage_details).to.be.an('array');\n        for (let i = 0; i < nr.outage_details.length; i++) {\n            // Perform necessary checks for each outage detail\n        }\n    }\n});\n\npm.test(\"Profile details are correct\", function() {\n    if (nr.hasOwnProperty('profile_details')) {\n        // Perform necessary checks for profile details\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "funcUtils = eval(globals.availreportdetails);\r\navailreportdetails();",
    "output": "let response = pm.response.json();\nlet nr = response.data || {};\n\npm.test(\"Response code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Check summary details exist\", function () {\n    pm.expect(nr).to.have.property(\"summary_details\");\n});\n\npm.test(\"Down count is available\", function () {\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\");\n    }\n});\n\npm.test(\"Charts array is present\", function () {\n    pm.expect(nr).to.have.property(\"charts\");\n    if (Array.isArray(nr.charts)) {\n        nr.charts.forEach(function (chart) {\n            pm.expect(chart).to.be.an(\"object\");\n        });\n    }\n});\n\npm.test(\"Availability details array is present\", function () {\n    pm.expect(nr).to.have.property(\"availability_details\");\n    if (Array.isArray(nr.availability_details)) {\n        nr.availability_details.forEach(function (availability) {\n            pm.expect(availability).to.be.an(\"object\");\n        });\n    }\n});\n\npm.test(\"Outage details array is present\", function () {\n    pm.expect(nr).to.have.property(\"outage_details\");\n    if (Array.isArray(nr.outage_details)) {\n        nr.outage_details.forEach(function (outage) {\n            pm.expect(outage).to.be.an(\"object\");\n        });\n    }\n});\n\npm.test(\"Profile details exist\", function () {\n    pm.expect(nr).to.have.property(\"profile_details\");\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Response contains code property\", function() {\n    var response = pm.response.json();\n    pm.expect(response).to.have.property(\"code\");\n    pm.expect(response.code).to.eql(0);\n});\n\npm.test(\"Response contains message property\", function() {\n    var response = pm.response.json();\n    pm.expect(response).to.have.property(\"message\");\n    pm.expect(response.message).to.eql(\"success\");\n});\n\npm.test(\"Response contains data property\", function() {\n    var response = pm.response.json();\n    pm.expect(response).to.have.property(\"data\");\n});\n\npm.test(\"Data contains summary_details\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property(\"summary_details\");\n    pm.expect(nr.summary_details).to.have.property(\"down_count\");\n    pm.expect(nr.summary_details.down_count).to.be.a(\"number\");\n});\n\npm.test(\"Data contains charts array\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property(\"charts\");\n    pm.expect(nr.charts).to.be.an(\"array\");\n    for (var i = 0; i < nr.charts.length; i++) {\n        pm.expect(nr.charts[i]).to.be.an(\"object\");\n    }\n});\n\npm.test(\"Data contains availability_details array\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property(\"availability_details\");\n    pm.expect(nr.availability_details).to.be.an(\"array\");\n    for (var i = 0; i < nr.availability_details.length; i++) {\n        pm.expect(nr.availability_details[i]).to.be.an(\"object\");\n    }\n});\n\npm.test(\"Data contains outage_details array\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property(\"outage_details\");\n    pm.expect(nr.outage_details).to.be.an(\"array\");\n    for (var i = 0; i < nr.outage_details.length; i++) {\n        pm.expect(nr.outage_details[i]).to.be.an(\"object\");\n    }\n});\n\npm.test(\"Data contains profile_details object\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property(\"profile_details\");\n    pm.expect(nr.profile_details).to.be.an(\"object\");\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();",
    "output": "funcUtils = eval(globals.availreportdetails);\navailreportdetails();"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"response code is 200\"] = responseCode.code === 200;\n\nvar response = JSON.parse(responseBody);\n\n//Validation for Netowrk Interface current status API\n\nconst schema =\n    {\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"api/child_current_status\",\n    \"type\": \"object\",\n    \"title\": \"The Root Schema\",\n    \"description\": \"The root schema comprises the entire JSON document.\",\n    \"default\": {},\n    \"additionalProperties\": true,\n    \"required\": [\n        \"code\",\n        \"message\",\n        \"data\"\n    ],\n    \"properties\": {\n        \"code\": {\n            \"$id\": \"#/properties/code\",\n            \"type\": \"integer\",\n            \"title\": \"The Code Schema\",\n            \"default\": 0,\n            \"examples\": [\n                0.0\n            ]\n        },\n        \"message\": {\n            \"$id\": \"#/properties/message\",\n            \"type\": \"string\",\n            \"title\": \"The Message Schema\",\n            \"default\": \"\",\n            \"examples\": [\n                \"success\"\n            ]\n        },\n        \"data\": {\n            \"$id\": \"#/properties/data\",\n            \"type\": \"object\",\n            \"title\": \"The Data Schema\",\n            \"default\": {},\n            \"additionalProperties\": true,\n            \"required\": [\n                \"monitors\",\n                \"monitors_count\",\n                \"header_list\"\n            ],\n            \"properties\": {\n                \"monitors\": {\n                    \"$id\": \"#/properties/data/properties/monitors\",\n                    \"type\": \"array\",\n                    \"title\": \"The Monitors Schema\",\n    \n                    \"default\": [],\n                    \"additionalItems\": true,\n                    \"items\": {\n                        \"$id\": \"#/properties/data/properties/monitors/items\",\n                        \"type\": \"object\",\n                        \"title\": \"The Items Schema\",\n        \n                        \"default\": {},\n                        \"additionalProperties\": true,\n                        \"required\": [\n                            \"Errors (%)\",\n                            \"Rx Utilized (%)\",\n                            \"child_id\",\n                            \"In Traffic (bps)\",\n                            \"name\",\n                            \"monitor_name\",\n                            \"status\",\n                            \"start_time\",\n                            \"last_polled_time\",\n                            \"Discards (%)\",\n                            \"Tx Utilized (%)\",\n                            \"monitor_id\",\n                            \"Out Traffic (bps)\"\n                        ],\n                        \"properties\": {\n                            \"Errors (%)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/Errors (%)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The Errors (%) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    0.0\n                                ]\n                            },\n                            \"Rx Utilized (%)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/Rx Utilized (%)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The Rx utilized (%) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    0.0\n                                ]\n                            },\n                            \"child_id\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/child_id\",\n                                \"type\": \"string\",\n                                \"title\": \"The Child_id Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"1000000008082\"\n                                ]\n                            },\n                            \"In Traffic (bps)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/In Traffic (bps)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The In traffic (bps) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    3477.63\n                                ]\n                            },\n                            \"name\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/name\",\n                                \"type\": \"string\",\n                                \"title\": \"The Name Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"A1-A1\"\n                                ]\n                            },\n                            \"monitor_name\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/monitor_name\",\n                                \"type\": \"string\",\n                                \"title\": \"The Monitor_name Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"Local Network\"\n                                ]\n                            },\n                            \"status\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/status\",\n                                \"type\": \"number\",\n                                \"title\": \"The Status Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    1.0\n                                ]\n                            },\n                            \"start_time\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/start_time\",\n                                \"type\": \"string\",\n                                \"title\": \"The Start_time Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"-1\"\n                                ]\n                            },\n                            \"last_polled_time\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/last_polled_time\",\n                                \"type\": \"string\",\n                                \"title\": \"The Last_polled_time Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"2020-04-21T11:17:08+0530\"\n                                ]\n                            },\n                            \"Discards (%)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/Discards (%)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The Discards (%) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    0.0\n                                ]\n                            },\n                            \"Tx Utilized (%)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/Tx Utilized (%)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The Tx utilized (%) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    0.08\n                                ]\n                            },\n                            \"monitor_id\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/monitor_id\",\n                                \"type\": \"string\",\n                                \"title\": \"The Monitor_id Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"1000000008073\"\n                                ]\n                            },\n                            \"Out Traffic (bps)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/Out Traffic (bps)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The Out traffic (bps) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    102450.75\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"monitors_count\": {\n                    \"$id\": \"#/properties/data/properties/monitors_count\",\n                    \"type\": \"object\",\n                    \"title\": \"The Monitors_count Schema\",\n    \n                    \"default\": {},\n                    \"examples\": [\n                        {\n                            \"trouble\": 0.0,\n                            \"child-suspended\": 0.0,\n                            \"up\": 32.0,\n                            \"child-total\": 32.0,\n                            \"critical\": 0.0,\n                            \"down\": 0.0\n                        }\n                    ],\n                    \"additionalProperties\": true,\n                    \"required\": [\n                        \"up\",\n                        \"trouble\",\n                        \"child-total\",\n                        \"child-suspended\",\n                        \"critical\",\n                        \"down\"\n                    ],\n                    \"properties\": {\n                        \"up\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/up\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Up Schema\",\n            \n                            \"default\": 0\n                        },\n                        \"trouble\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/trouble\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Trouble Schema\",\n            \n                            \"default\": 0\n                        },\n                        \"child-total\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/child-total\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Child-total Schema\",\n            \n                            \"default\": 0\n                        },\n                        \"child-suspended\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/child-suspended\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Child-suspended Schema\",\n            \n                            \"default\": 0\n                        },\n                        \"critical\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/critical\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Critical Schema\",\n            \n                            \"default\": 0\n                        },\n                        \"down\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/down\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Down Schema\",\n            \n                            \"default\": 0\n                        }\n                    }\n                },\n                \"header_list\": {\n                    \"$id\": \"#/properties/data/properties/header_list\",\n                    \"type\": \"array\",\n                    \"title\": \"The Header_list Schema\",\n    \n                    \"default\": [],\n                    \"examples\": [\n                        [\n                            \"In Traffic (bps)\",\n                            \"Out Traffic (bps)\",\n                            \"Rx Utilized (%)\"\n                        ]\n                    ],\n                    \"additionalItems\": true,\n                    \"items\": {\n                        \"$id\": \"#/properties/data/properties/header_list/items\",\n                        \"type\": \"string\",\n                        \"title\": \"The Items Schema\",\n        \n                        \"default\": \"\",\n                        \"examples\": [\n                            \"In Traffic (bps)\",\n                            \"Out Traffic (bps)\",\n                            \"Rx Utilized (%)\"\n                        ]\n                    }\n                }\n            }\n        }\n    }\n};\n\n\ntests[\"Valid Data\"] = tv4.validate(response, schema);\nconsole.log(\"Validation failed: \", tv4.error);",
    "output": "pm.test(\"response code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\nconst schema = {\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"api/child_current_status\",\n    \"type\": \"object\",\n    \"title\": \"The Root Schema\",\n    \"description\": \"The root schema comprises the entire JSON document.\",\n    \"default\": {},\n    \"additionalProperties\": true,\n    \"required\": [\n        \"code\",\n        \"message\",\n        \"data\"\n    ],\n    \"properties\": {\n        \"code\": {\n            \"$id\": \"#/properties/code\",\n            \"type\": \"integer\",\n            \"title\": \"The Code Schema\",\n            \"default\": 0,\n            \"examples\": [\n                0.0\n            ]\n        },\n        \"message\": {\n            \"$id\": \"#/properties/message\",\n            \"type\": \"string\",\n            \"title\": \"The Message Schema\",\n            \"default\": \"\",\n            \"examples\": [\n                \"success\"\n            ]\n        },\n        \"data\": {\n            \"$id\": \"#/properties/data\",\n            \"type\": \"object\",\n            \"title\": \"The Data Schema\",\n            \"default\": {},\n            \"additionalProperties\": true,\n            \"required\": [\n                \"monitors\",\n                \"monitors_count\",\n                \"header_list\"\n            ],\n            \"properties\": {\n                \"monitors\": {\n                    \"$id\": \"#/properties/data/properties/monitors\",\n                    \"type\": \"array\",\n                    \"title\": \"The Monitors Schema\",\n    \n                    \"default\": [],\n                    \"additionalItems\": true,\n                    \"items\": {\n                        \"$id\": \"#/properties/data/properties/monitors/items\",\n                        \"type\": \"object\",\n                        \"title\": \"The Items Schema\",\n        \n                        \"default\": {},\n                        \"additionalProperties\": true,\n                        \"required\": [\n                            \"Errors (%)\",\n                            \"Rx Utilized (%)\",\n                            \"child_id\",\n                            \"In Traffic (bps)\",\n                            \"name\",\n                            \"monitor_name\",\n                            \"status\",\n                            \"start_time\",\n                            \"last_polled_time\",\n                            \"Discards (%)\",\n                            \"Tx Utilized (%)\",\n                            \"monitor_id\",\n                            \"Out Traffic (bps)\"\n                        ],\n                        \"properties\": {\n                            \"Errors (%)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/Errors (%)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The Errors (%) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    0.0\n                                ]\n                            },\n                            \"Rx Utilized (%)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/Rx Utilized (%)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The Rx utilized (%) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    0.0\n                                ]\n                            },\n                            \"child_id\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/child_id\",\n                                \"type\": \"string\",\n                                \"title\": \"The Child_id Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"1000000008082\"\n                                ]\n                            },\n                            \"In Traffic (bps)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/In Traffic (bps)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The In traffic (bps) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    3477.63\n                                ]\n                            },\n                            \"name\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/name\",\n                                \"type\": \"string\",\n                                \"title\": \"The Name Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"A1-A1\"\n                                ]\n                            },\n                            \"monitor_name\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/monitor_name\",\n                                \"type\": \"string\",\n                                \"title\": \"The Monitor_name Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"Local Network\"\n                                ]\n                            },\n                            \"status\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/status\",\n                                \"type\": \"number\",\n                                \"title\": \"The Status Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    1.0\n                                ]\n                            },\n                            \"start_time\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/start_time\",\n                                \"type\": \"string\",\n                                \"title\": \"The Start_time Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"-1\"\n                                ]\n                            },\n                            \"last_polled_time\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/last_polled_time\",\n                                \"type\": \"string\",\n                                \"title\": \"The Last_polled_time Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"2020-04-21T11:17:08+0530\"\n                                ]\n                            },\n                            \"Discards (%)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/Discards (%)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The Discards (%) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    0.0\n                                ]\n                            },\n                            \"Tx Utilized (%)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/Tx Utilized (%)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The Tx utilized (%) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    0.08\n                                ]\n                            },\n                            \"monitor_id\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/monitor_id\",\n                                \"type\": \"string\",\n                                \"title\": \"The Monitor_id Schema\",\n                \n                                \"default\": \"\",\n                                \"examples\": [\n                                    \"1000000008073\"\n                                ]\n                            },\n                            \"Out Traffic (bps)\": {\n                                \"$id\": \"#/properties/data/properties/monitors/items/properties/Out Traffic (bps)\",\n                                \"oneOf\": [\n                                        { \"type\": \"number\" },\n                                        { \"type\": \"string\", \"pattern\": \"^-$\" }\n                                ],\n                                \"title\": \"The Out traffic (bps) Schema\",\n                \n                                \"default\": 0,\n                                \"examples\": [\n                                    102450.75\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"monitors_count\": {\n                    \"$id\": \"#/properties/data/properties/monitors_count\",\n                    \"type\": \"object\",\n                    \"title\": \"The Monitors_count Schema\",\n    \n                    \"default\": {},\n                    \"examples\": [\n                        {\n                            \"trouble\": 0.0,\n                            \"child-suspended\": 0.0,\n                            \"up\": 32.0,\n                            \"child-total\": 32.0,\n                            \"critical\": 0.0,\n                            \"down\": 0.0\n                        }\n                    ],\n                    \"additionalProperties\": true,\n                    \"required\": [\n                        \"up\",\n                        \"trouble\",\n                        \"child-total\",\n                        \"child-suspended\",\n                        \"critical\",\n                        \"down\"\n                    ],\n                    \"properties\": {\n                        \"up\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/up\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Up Schema\",\n            \n                            \"default\": 0\n                        },\n                        \"trouble\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/trouble\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Trouble Schema\",\n            \n                            \"default\": 0\n                        },\n                        \"child-total\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/child-total\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Child-total Schema\",\n            \n                            \"default\": 0\n                        },\n                        \"child-suspended\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/child-suspended\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Child-suspended Schema\",\n            \n                            \"default\": 0\n                        },\n                        \"critical\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/critical\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Critical Schema\",\n            \n                            \"default\": 0\n                        },\n                        \"down\": {\n                            \"$id\": \"#/properties/data/properties/monitors_count/properties/down\",\n                            \"type\": \"integer\",\n                            \"title\": \"The Down Schema\",\n            \n                            \"default\": 0\n                        }\n                    }\n                },\n                \"header_list\": {\n                    \"$id\": \"#/properties/data/properties/header_list\",\n                    \"type\": \"array\",\n                    \"title\": \"The Header_list Schema\",\n    \n                    \"default\": [],\"examples\": [\n    [\n        \"In Traffic (bps)\",\n        \"Out Traffic (bps)\",\n        \"Rx Utilized (%)\"\n    ]\n],\n\"additionalItems\": true,\n\"items\": {\n    \"$id\": \"#/properties/data/properties/header_list/items\",\n    \"type\": \"string\",\n    \"title\": \"The Items Schema\",\n\n    \"default\": \"\",\n    \"examples\": [\n        \"In Traffic (bps)\",\n        \"Out Traffic (bps)\",\n        \"Rx Utilized (%)\"\n    ]\n}\n}\n}\n}\n}\n};\n\npm.test(\"Valid Data\", function() {\n    pm.expect(tv4.validate(response, schema)).to.be.true;\n    console.log(\"Validation failed: \", tv4.error);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\ntests[\"Status is 200\"] = (responseCode.code === 200);\n\nif(jsonData.code===0)\n{\n    if(jsonData.data.length>0){\n        \n         const schema =\n            {\n              \"$id\": \"api/short/monitor_groups\",\n              \"type\": \"object\",\n              \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n              \"properties\": {\n                \"code\": {\n                  \"$id\": \"/properties/code\",\n                  \"type\": \"integer\",\n                  \"title\": \"The Code Schema \",\n                  \"default\": 0,\n                  \"examples\": [\n                    0\n                  ]\n                },\n                \"message\": {\n                  \"$id\": \"/properties/message\",\n                  \"type\": \"string\",\n                  \"title\": \"The Message Schema \",\n                  \"default\": \"\",\n                  \"examples\": [\n                    \"success\"\n                  ]\n                },\n                \"data\": {\n                  \"$id\": \"/properties/data\",\n                  \"type\": \"array\",\n                  \"minItems\": 0,\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n                    \"required\":[\"group_id\",\"display_name\", \"monitors\"],\n                    \"additionalProperties\": false,\n                    \"properties\": {\n                      \"group_id\": {\n                        \"type\": \"string\",\n                        \"title\": \"The Monitor_id Schema \",\n                        \"pattern\":\"^\\\\d+$\"\n                      },\n                      \"display_name\": {\n                        \"type\": \"string\",\n                        \"title\": \"The Name Schema \"\n                      },\n                      \"monitors\": {\n                            \"type\": \"array\",\n                            \"items\":{\n                                \"type\":\"string\"\n                            },\n                            \"minItems\":0\n                      }\n                    }\n                }\n              }\n            }\n        };\n        var flag = true;\n        var monitorGroup = null;\n        var id = null;\n        var r = jsonData.data.length;\n        while(r >= 0){\n             var index = Math.floor(Math.random() * (jsonData.data.length -1));\n             monitorGroup = jsonData.data[index];\n             if(monitorGroup.monitors.length > 0){\n                 id = monitorGroup.group_id;\n             }\n             r = r-1;\n        }\n       if(id==null){\n           id = jsonData.data[0].group_id;\n       }\n        \n        \n        pm.globals.set(\"groupId\", id);\n\n        tests[\"Valid Data\"] = tv4.validate(jsonData, schema);\n        console.log(\"Validation failed: \", tv4.error);\n   }\n}else{\n    console.log(jsonData);\n}",
    "output": "var response = pm.response.json();\npm.test(\"Status is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nif (response.code === 0) {\n    var nr = response.data || {};\n    if (nr.length > 0) {\n        const schema = {\n            \"$id\": \"api/short/monitor_groups\",\n            \"type\": \"object\",\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"properties\": {\n                \"code\": {\n                    \"$id\": \"/properties/code\",\n                    \"type\": \"integer\",\n                    \"title\": \"The Code Schema\",\n                    \"default\": 0,\n                    \"examples\": [0]\n                },\n                \"message\": {\n                    \"$id\": \"/properties/message\",\n                    \"type\": \"string\",\n                    \"title\": \"The Message Schema\",\n                    \"default\": \"\",\n                    \"examples\": [\"success\"]\n                },\n                \"data\": {\n                    \"$id\": \"/properties/data\",\n                    \"type\": \"array\",\n                    \"minItems\": 0,\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n                        \"required\": [\"group_id\", \"display_name\", \"monitors\"],\n                        \"additionalProperties\": false,\n                        \"properties\": {\n                            \"group_id\": {\n                                \"type\": \"string\",\n                                \"title\": \"The Monitor_id Schema\",\n                                \"pattern\": \"^\\\\d+$\"\n                            },\n                            \"display_name\": {\n                                \"type\": \"string\",\n                                \"title\": \"The Name Schema\"\n                            },\n                            \"monitors\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                },\n                                \"minItems\": 0\n                            }\n                        }\n                    }\n                }\n            }\n        };\n\n        var flag = true;\n        var monitorGroup = null;\n        var id = null;\n        var r = nr.length;\n        while (r >= 0) {\n            var index = Math.floor(Math.random() * (nr.length - 1));\n            monitorGroup = nr[index];\n            if (monitorGroup.monitors.length > 0) {\n                id = monitorGroup.group_id;\n            }\n            r = r - 1;\n        }\n        if (id == null) {\n            id = nr[0].group_id;\n        }\n\n        pm.globals.set(\"groupId\", id);\n        pm.test(\"Valid Data\", function () {\n            pm.expect(tv4.validate(response, schema)).to.be.true;\n            console.log(\"Validation failed: \", tv4.error);\n        });\n    }\n} else {\n    console.log(response);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "// var jsonData = JSON.parse(responseBody);\n// tests[\"Availability api returned 200\"] = (responseCode.code === 200);\n\n// if(jsonData.code===0)\n// {\n//     if(jsonData.data){\n        \n//          const schema =\n//             {\n//               \"$id\": \"api/availability/group\",\n//               \"type\": \"object\",\n//               \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n//               \"properties\": {\n//                 \"code\": {\n//                   \"$id\": \"/properties/code\",\n//                   \"type\": \"integer\",\n//                   \"title\": \"The Code Schema \",\n//                   \"default\": 0,\n//                   \"examples\": [\n//                     0\n//                   ]\n//                 },\n//                 \"message\": {\n//                   \"$id\": \"/properties/message\",\n//                   \"type\": \"string\",\n//                   \"title\": \"The Message Schema \",\n//                   \"default\": \"\",\n//                   \"examples\": [\n//                     \"success\"\n//                   ]\n//                 },\n//                 \"data\": {\n//                     \"type\": \"object\",\n//                     \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n//                     \"required\":[\"info\"],\n//                     \"additionalProperties\": false,\n//                     \"properties\": {\n//                       \"downtime_percentage\": {\n//                         \"type\": \"number\",\n//                         \"title\": \"The downtime_percentage Schema \",\n//                       },\n//                       \"availability_percentage\": {\n//                         \"type\": \"number\",\n//                         \"title\": \"The availability_percentage Schema \"\n//                       },\n//                       \"down_count\": {\n//                         \"type\": \"integer\",\n//                         \"title\": \"The down_count Schema \"\n//                       },\n//                       \"info\" : {\n//                           \"type\" : \"object\",\n//                           \"additionalProperties\": false,\n//                           \"minProperties\":11,\n//                           \"maxProperties\":11,\n//                           \"properties\": {\n//                               \"resource_name\": {\n//                                     \"type\": \"string\",\n//                                     \"title\": \"The resource_name Schema \"\n//                                 },\n//                                 \"resource_id\": {\n//                                     \"type\": \"string\",\n//                                     \"title\": \"The resource_id Schema \"\n//                                 },\n//                                 \"timezone\": {\n//                                     \"type\": \"string\",\n//                                     \"title\": \"The timezone Schema \"\n//                                 },\n//                                 \"start_time\": {\n//                                     \"type\": \"string\",\n//                                     \"title\": \"The start_time Schema \"\n//                                 },\n//                                 \"generated_time\": {\n//                                     \"type\": \"string\",\n//                                     \"title\": \"The generated_time Schema \"\n//                                 },\n//                                 \"formatted_end_time\": {\n//                                     \"type\": \"string\",\n//                                     \"title\": \"The formatted_end_time Schema \"\n//                                 },\n//                                 \"period_name\": {\n//                                     \"type\": \"string\",\n//                                     \"title\": \"The period_name Schema \"\n//                                 },\n//                                 \"formatted_start_time\": {\n//                                     \"type\": \"string\",\n//                                     \"title\": \"The formatted_start_time Schema \"\n//                                 },\n//                                 \"end_time\": {\n//                                     \"type\": \"string\",\n//                                     \"title\": \"The end_time Schema \"\n//                                 },\n//                                 \"formatted_generated_time\": {\n//                                     \"type\": \"string\",\n//                                     \"title\": \"The formatted_generated_time Schema \"\n//                                 },\n//                                 \"period\": {\n//                                     \"type\": \"integer\",\n//                                     \"title\": \"The period Schema \"\n//                                 },\n//                           }\n//                       }\n//                     }\n                \n//               }\n//             }\n//         };\n\n//         tests[\"Valid Data\"] = tv4.validate(jsonData, schema);\n//   }\n// }else{\n//     console.log(jsonData);\n// }\n\nvar jsonData = JSON.parse(responseBody);\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 13){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==1);\n                    //tests['monitor_type'] = jsonData.data.info.monitor_type;\n                    tests['resource_id'] = jsonData.data.info.resource_id;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 13){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                \n                if(Object.keys(jsonData.data.summary_details).length==12){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    tests[\"alarm_count\"] = (jsonData.data.summary_details.alarm_count!==null);\n                    \n                }else{\n                    \n                    if(Object.keys(jsonData.data.summary_details).length>12){\n                    \n                         tests[\"new attribute added to port monitor summary_details \"] =false;\n                    \n                    }else{\n                     \n                         tests[\"attribute removed port monitor summary_details \"] =false;   \n                    }\n                }\n            \n            }else{\n        \n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "pm.test(\"Availability api returned 200\", function () {\n    pm.response.to.have.status(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\n\nif (response.code === 0) {\n    const schema = {\n        \"$id\": \"api/availability/group\",\n        \"type\": \"object\",\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"properties\": {\n            \"code\": {\n                \"$id\": \"/properties/code\",\n                \"type\": \"integer\",\n                \"title\": \"The Code Schema \",\n                \"default\": 0,\n                \"examples\": [0]\n            },\n            \"message\": {\n                \"$id\": \"/properties/message\",\n                \"type\": \"string\",\n                \"title\": \"The Message Schema \",\n                \"default\": \"\",\n                \"examples\": [\"success\"]\n            },\n            \"data\": {\n                \"type\": \"object\",\n                \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n                \"required\": [\"info\"],\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"downtime_percentage\": {\n                        \"type\": \"number\",\n                        \"title\": \"The downtime_percentage Schema \"\n                    },\n                    \"availability_percentage\": {\n                        \"type\": \"number\",\n                        \"title\": \"The availability_percentage Schema \"\n                    },\n                    \"down_count\": {\n                        \"type\": \"integer\",\n                        \"title\": \"The down_count Schema \"\n                    },\n                    \"info\": {\n                        \"type\": \"object\",\n                        \"additionalProperties\": false,\n                        \"minProperties\": 11,\n                        \"maxProperties\": 11,\n                        \"properties\": {\n                            \"resource_name\": {\n                                \"type\": \"string\",\n                                \"title\": \"The resource_name Schema \"\n                            },\n                            \"resource_id\": {\n                                \"type\": \"string\",\n                                \"title\": \"The resource_id Schema \"\n                            },\n                            \"timezone\": {\n                                \"type\": \"string\",\n                                \"title\": \"The timezone Schema \"\n                            },\n                            \"start_time\": {\n                                \"type\": \"string\",\n                                \"title\": \"The start_time Schema \"\n                            },\n                            \"generated_time\": {\n                                \"type\": \"string\",\n                                \"title\": \"The generated_time Schema \"\n                            },\n                            \"formatted_end_time\": {\n                                \"type\": \"string\",\n                                \"title\": \"The formatted_end_time Schema \"\n                            },\n                            \"period_name\": {\n                                \"type\": \"string\",\n                                \"title\": \"The period_name Schema \"\n                            },\n                            \"formatted_start_time\": {\n                                \"type\": \"string\",\n                                \"title\": \"The formatted_start_time Schema \"\n                            },\n                            \"end_time\": {\n                                \"type\": \"string\",\n                                \"title\": \"The end_time Schema \"\n                            },\n                            \"formatted_generated_time\": {\n                                \"type\": \"string\",\n                                \"title\": \"The formatted_generated_time Schema \"\n                            },\n                            \"period\": {\n                                \"type\": \"integer\",\n                                \"title\": \"The period Schema \"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    pm.test(\"Valid Data\", function () {\n        pm.expect(tv4.validate(response, schema)).to.be.true;\n    });\n}\n\npm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\npm.test(\"code\", function () {\n    pm.expect(response.code).to.equal(0);\n});\n\npm.test(\"message\", function () {\n    pm.expect(response.message).to.equal(\"success\");\n});\n\nif (Object.keys(nr).length > 0) {\n    if (nr.info) {\n        pm.test(\"info\", function () {\n            pm.expect(Object.keys(nr.info).length).to.equal(11);\n        });\n        pm.test(\"monitor_count\", function () {\n            pm.expect(nr.info).to.have.property(\"monitor_count\");\n        });\n        pm.test(\"resource type\", function () {\n            pm.expect(nr.info.resource_type).to.equal(1);\n        });\n        pm.test(\"resource_id\", function () {\n            pm.expect(nr.info).to.have.property(\"resource_id\");\n        });\n        pm.test(\"formatted_generated_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        });\n        pm.test(\"period\", function () {\n            pm.expect(nr.info).to.have.property(\"period\");\n        });\n        pm.test(\"start_time\", function () {\n            pm.expect(nr.info).to.have.property(\"start_time\");\n        });\n        pm.test(\"generated_time\", function () {\n            pm.expect(nr.info).to.have.property(\"generated_time\");\n        });\n        pm.test(\"formatted_end_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        });\n        pm.test(\"formatted_start_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        });\n        pm.test(\"period_name\", function () {\n            pm.expect(nr.info).to.have.property(\"period_name\");\n        });\n        pm.test(\"resource_type_name\", function () {\n            pm.expect(nr.info).to.have.property(\"resource_type_name\");\n        });\n        pm.test(\"resource_name\", function () {\n            pm.expect(nr.info).to.have.property(\"resource_name\");\n        });\n        pm.test(\"end_time\", function () {\n            pm.expect(nr.info).to.have.property(\"end_time\");\n        });\n    } else {\n        pm.test(\"info\", function () {\n            pm.expect(false).to.be.true; // This will fail\n        });\n    }\n\n    if (nr.summary_details) {\n        pm.test(\"summary_details\", function () {\n            pm.expect(Object.keys(nr.summary_details).length).to.equal(12);\n        });\n        pm.test(\"down_count\", function () {\n            pm.expect(nr.summary_details.down_count).to.not.be.null;\n        });\n        pm.test(\"downtime_duration\", function () {\n            pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n        });\n        pm.test(\"availability_percentage\", function () {\n            pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n        });\n        pm.test(\"mtbf\", function () {\n            pm.expect(nr.summary_details.mtbf).to.not.be.null;\n        });\n        pm.test(\"unmanaged_duration\", function () {\n            pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n        });\n        pm.test(\"mttr\", function () {\n            pm.expect(nr.summary_details.mttr).to.not.be.null;\n        });\n        pm.test(\"maintenance_percentage\", function () {\n            pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n        });\n        pm.test(\"maintenance_duration\", function () {\n            pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n        });\n        pm.test(\"availability_duration\", function () {\n            pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n        });\n        pm.test(\"unmanaged_percentage\", function () {\n            pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n        });\n        pm.test(\"downtime_percentage\", function () {\n            pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n        });\n        pm.test(\"alarm_count\", function () {\n            pm.expect(nr.summary_details.alarm_count).to.not.be.null;\n        });\n    } else {\n        pm.test(\"summary_details is missing\", function () {\n            pm.expect(false).to.be.true; // This will fail\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setGlobalVariable(\"availreportdetailsford\", function availreportdetailsford()\n\n{\n    var jsonData = JSON.parse(responseBody);\n    var resourcetype=(jsonData.data.info.resource_type);\nif (jsonData.code===0)\n{\n   if(jsonData.error === undefined)\n   {\n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        \n        tests['summary_details is present'] = jsonData.data.summary_details;\n        tests['charts is present'] = jsonData.data.charts;\n        tests['availability_details is present'] = jsonData.data.availability_details;\n        tests['outage_details is present'] = jsonData.data.outage_details;\n        if (resourcetype===4 || resourcetype===1)\n        {\n            tests['profile_details is not present'] = !(jsonData.data.profile_details);\n        }\n        else{\n        tests['profile_details is present'] = jsonData.data.profile_details;\n        //console.log(resourcetype);\n        if((Object.keys(jsonData.data.profile_details)).length>0){\n            \n            if(jsonData.data.profile_details.threshold_profiles){\n        \n                tests['profile_details > threshold_profiles is present'] = jsonData.data.profile_details.threshold_profiles;     \n                tests['profile_details > threshold_profiles > name is present'] = jsonData.data.profile_details.threshold_profiles[0].name;\n                if(!jsonData.data.profile_details.threshold_profiles[0].show_name){\n                    \n                    tests['profile_details > threshold_profiles > show_name is present'] = true;\n                    \n                }else{\n                    \n                    tests['profile_details > threshold_profiles > show_name is present'] = jsonData.data.profile_details.threshold_profiles[0].show_name;        \n                }\n                tests['profile_details > threshold_profiles > down_condition is present'] = jsonData.data.profile_details.threshold_profiles[0].down_condition;        \n                \n            }\n            if(jsonData.data.profile_details.threshold_profile_details){\n        \n                tests['profile_details > threshold_profile_details is present'] = jsonData.data.profile_details.threshold_profile_details;\n            }\n            if(jsonData.data.profile_details.location_profiles){\n        \n                tests['profile_details > location_profiles is present'] = jsonData.data.profile_details.location_profiles;\n                tests['profile_details > location_profiles > locations is present'] = jsonData.data.profile_details.location_profiles[0].locations;  \n                tests['profile_details > location_profiles > name is present'] = jsonData.data.profile_details.location_profiles[0].name;  \n                \n            }\n        }\n        }\n        if(jsonData.data.info){\n            if (resourcetype===1)\n            {\n                var infolength=16;\n                var resourcetypename=\"Group\";\n            }\n            if (resourcetype===2)\n            {\n                var infolength=17;\n                var resourcetypename=\"Monitor\";\n            }         \n            if (resourcetype===4)\n            {\n                var infolength=16;\n                var resourcetypename=\"Monitor Type\";\n            }\n            if(responseBody.has(\"resource_tags\"))\n                {\n                    infolength=infolength+1;\n                }\n            if((Object.keys(jsonData.data.info)).length == infolength){\n                    \n                tests['info present'] = true;\n                tests['resource type'] = (jsonData.data.info.resource_type===resourcetype);\n                tests['report_type'] = (jsonData.data.info.report_type===11);\n                tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                tests['period'] = jsonData.data.info.period;\n                tests['start_time'] = jsonData.data.info.start_time;\n                tests['generated_time'] = jsonData.data.info.generated_time;\n                tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                tests['period_name'] = jsonData.data.info.period_name;\n                tests['report_name'] = jsonData.data.info.report_name;\n                tests['resource_type_name'] = jsonData.data.info.resource_type_name == resourcetypename;\n                tests['resource_name'] = jsonData.data.info.resource_name;\n                tests['end_time'] = jsonData.data.info.end_time;\n                tests['segment_type_name'] = jsonData.data.info.segment_type_name;\n                tests['segment_type'] = jsonData.data.info.segment_type;\n                if (resourcetype!=4)\n                {\n                tests['resource_id'] = jsonData.data.info.resource_id;\n                }\n            \n            }else{\n\n                if((Object.keys(jsonData.data.info)).length > infolength){\n                \n                    tests['new attribute added to info'] = false;\n                    \n                }else if((Object.keys(jsonData.data.info)).length < infolength){\n                    \n                    tests['attribute removed from info'] = false;\n                }\n                \n            }\n            \n        }\n        else{\n            \n            tests['info'] = false;\n        }\n   }\n}\n}+ ' availreportdetailsford()');",
    "output": "pm.globals.set(\"availreportdetailsford\", function availreportdetailsford() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    var resourcetype = nr.info?.resource_type;\n\n    if (response.code === 0 && response.error === undefined) {\n        pm.test(\"Status code is 200\", function() {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.test(\"code\", function() {\n            pm.expect(response.code).to.equal(0);\n        });\n        pm.test(\"message\", function() {\n            pm.expect(response.message).to.equal(\"success\");\n        });\n\n        // Core Presence Checks\n        [\"summary_details\", \"charts\", \"availability_details\", \"outage_details\"].forEach(prop => {\n            pm.test(`${prop} is present`, function() {\n                pm.expect(nr).to.have.property(prop);\n            });\n        });\n\n        // Profile Details Checks (resource-dependent)\n        if (resourcetype === 4 || resourcetype === 1) {\n            pm.test(\"profile_details is not present\", function() {\n                pm.expect(nr).to.not.have.property(\"profile_details\");\n            });\n        } else {\n            pm.test(\"profile_details is present\", function() {\n                pm.expect(nr).to.have.property(\"profile_details\");\n            });\n\n            if (nr.profile_details && Object.keys(nr.profile_details).length > 0) {\n                let pd = nr.profile_details;\n\n                if (Array.isArray(pd.threshold_profiles) && pd.threshold_profiles.length > 0) {\n                    let tp = pd.threshold_profiles[0];\n                    pm.test(\"threshold_profiles[0].name is present\", () => pm.expect(tp).to.have.property(\"name\"));\n                    pm.test(\"threshold_profiles[0].down_condition is present\", () => pm.expect(tp).to.have.property(\"down_condition\"));\n                    pm.test(\"threshold_profiles[0].show_name is present\", () => {\n                        if (!tp.show_name) {\n                            pm.expect(true).to.be.true;\n                        } else {\n                            pm.expect(tp.show_name).to.be.true;\n                        }\n                    });\n                }\n\n                if (pd.threshold_profile_details) {\n                    pm.test(\"threshold_profile_details is present\", () => pm.expect(pd).to.have.property(\"threshold_profile_details\"));\n                }\n\n                if (Array.isArray(pd.location_profiles) && pd.location_profiles.length > 0) {\n                    let lp = pd.location_profiles[0];\n                    pm.test(\"location_profiles[0].locations is present\", () => pm.expect(lp).to.have.property(\"locations\"));\n                    pm.test(\"location_profiles[0].name is present\", () => pm.expect(lp).to.have.property(\"name\"));\n                }\n            }\n        }\n\n        // Info Block Validations\n        if (nr.info) {\n            let infolength = 0, typename = \"\";\n\n            if (resourcetype === 1) { infolength = 16; typename = \"Group\"; }\n            if (resourcetype === 2) { infolength = 17; typename = \"Monitor\"; }\n            if (resourcetype === 4) { infolength = 16; typename = \"Monitor Type\"; }\n\n            if (response.hasOwnProperty(\"resource_tags\")) infolength += 1;\n\n            if (Object.keys(nr.info).length === infolength) {\n                pm.test(\"info present\", () => pm.expect(true).to.be.true);\n                pm.test(\"resource_type\", () => pm.expect(nr.info.resource_type).to.equal(resourcetype));\n                pm.test(\"report_type\", () => pm.expect(nr.info.report_type).to.equal(11));\n                [\n                    \"formatted_generated_time\", \"period\", \"start_time\", \"generated_time\", \"formatted_end_time\",\n                    \"formatted_start_time\", \"period_name\", \"report_name\", \"resource_name\", \"end_time\",\n                    \"segment_type_name\", \"segment_type\"\n                ].forEach(prop => {\n                    pm.test(`info.${prop} is present`, () => pm.expect(nr.info).to.have.property(prop));\n                });\n\n                if (resourcetype !== 4) {\n                    pm.test(\"resource_id is present\", () => pm.expect(nr.info).to.have.property(\"resource_id\"));\n                }\n\n                pm.test(\"resource_type_name is correct\", () => pm.expect(nr.info.resource_type_name).to.equal(typename));\n            } else {\n                pm.test(\"info attribute count mismatch\", () => {\n                    pm.expect(Object.keys(nr.info).length).to.equal(infolength);\n                });\n            }\n        } else {\n            pm.test(\"info not present\", () => pm.expect(false).to.be.false);\n        }\n    }\n} + ' availreportdetailsford()');"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar jsonData = JSON.parse(responseBody);\nfor (var i=0;i<jsonData.data.length;i++)\n{\n    if(undefined !== jsonData.data[i].monitors)\n    {\n        var monitorGroupId =jsonData.data[i].group_id;\n        postman.setGlobalVariable(\"monitorGroupIdForReport\",monitorGroupId);\n        break;\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || [];\n\nif (Array.isArray(nr)) {\n    for (let i = 0; i < nr.length; i++) {\n        if (nr[i] && nr[i].hasOwnProperty(\"monitors\")) {\n            let monitorGroupId = nr[i].group_id;\n            pm.globals.set(\"monitorGroupIdForReport\", monitorGroupId);\n            break;\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar jsonData = JSON.parse(responseBody);\n\nfor (var i=0;i<jsonData.data.length;i++)\n{\n    if(jsonData.data[i].type===\"URL\"){\n        \n        var monitorid =jsonData.data[i].id;\n        postman.setGlobalVariable(\"monitoridForReport\",monitorid);\n         postman.setGlobalVariable(\"monTypeForReport\",jsonData.data[i].type);\n        break;\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\nfor (var i = 0; i < nr.length; i++) {\n    if (nr[i].type === \"URL\") {\n        var monitorid = nr[i].id;\n        pm.globals.set(\"monitoridForReport\", monitorid);\n        pm.globals.set(\"monTypeForReport\", nr[i].type);\n        break;\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.availreportdetailsford);",
    "output": "var funcUtils = eval(globals.availreportdetailsford);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.availreportdetailsford);",
    "output": "var funcUtils = eval(globals.availreportdetailsford);\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\npm.test(\"Response has summary_details\", function () {\n    pm.expect(nr).to.have.property('summary_details');\n});\n\npm.test(\"Down count is present in summary_details\", function () {\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details).to.have.property('down_count');\n    }\n});\n\npm.test(\"Charts are present and non-empty\", function () {\n    pm.expect(nr).to.have.property('charts').that.is.an('array').that.is.not.empty;\n    nr.charts.forEach(function(chart) {\n        pm.expect(chart).to.be.an('object');\n    });\n});\n\npm.test(\"Availability details are present and non-empty\", function () {\n    pm.expect(nr).to.have.property('availability_details').that.is.an('array').that.is.not.empty;\n    nr.availability_details.forEach(function(detail) {\n        pm.expect(detail).to.be.an('object');\n    });\n});\n\npm.test(\"Outage details are present and non-empty\", function () {\n    pm.expect(nr).to.have.property('outage_details').that.is.an('array').that.is.not.empty;\n    nr.outage_details.forEach(function(outage) {\n        pm.expect(outage).to.be.an('object');\n    });\n});\n\npm.test(\"Profile details are present\", function () {\n    pm.expect(nr).to.have.property('profile_details');\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "// postman.clearEnvironmentVariable(\"domain_name\");\n// postman.clearEnvironmentVariable(\"auth-token\");\n// postman.clearEnvironmentVariable(\"id\");\n// postman.clearEnvironmentVariable(\"status_viewid\");\n\n// postman.clearGlobalVariable(\"domain_name\");\n// postman.clearGlobalVariable(\"auth-token\");\n// postman.clearGlobalVariable(\"id\");\n// postman.clearGlobalVariable(\"status_viewid\");\n\n\n// postman.setGlobalVariable(\"domain_name\", \"https://betaclient.site24x7.com\");\n// postman.setGlobalVariable(\"auth-token\", \"c4635c84047832bb41a4f83933252d98\");\n// postman.setGlobalVariable(\"monitor_id\", \"174961000003472003\");\n// postman.setGlobalVariable(\"monitor_group_id\", \"174961000092705003\");\n// postman.setGlobalVariable(\"all_monitor_type\", \"URL\");",
    "output": "pm.globals.set(\"domain_name\", \"https://betaclient.site24x7.com\");\npm.globals.set(\"auth-token\", \"c4635c84047832bb41a4f83933252d98\");\npm.globals.set(\"monitor_id\", \"174961000003472003\");\npm.globals.set(\"monitor_group_id\", \"174961000092705003\");\npm.globals.set(\"all_monitor_type\", \"URL\");"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.availreportdetailsford);",
    "output": "var funcUtils = eval(pm.globals.get(\"availreportdetailsford\"));\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Summary details down count exists\", function() {\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\");\n    } else {\n        pm.expect.fail(\"summary_details not found\");\n    }\n});\n\npm.test(\"Availability details are valid\", function() {\n    if (Array.isArray(nr.availability_details)) {\n        nr.availability_details.forEach(function(detail, index) {\n            pm.expect(detail).to.have.property(\"duration\");\n            pm.expect(detail).to.have.property(\"start_time\");\n        });\n    } else {\n        pm.expect.fail(\"availability_details is not an array\");\n    }\n});\n\npm.test(\"Charts data exist\", function() {\n    if (Array.isArray(nr.charts)) {\n        nr.charts.forEach(function(chart, index) {\n            pm.expect(chart).to.have.property(\"type\");\n            pm.expect(chart).to.have.property(\"data\");\n        });\n    } else {\n        pm.expect.fail(\"charts is not an array\");\n    }\n});\n\npm.test(\"Outage details are valid\", function() {\n    if (Array.isArray(nr.outage_details)) {\n        nr.outage_details.forEach(function(outage, index) {\n            pm.expect(outage).to.have.property(\"duration\");\n            pm.expect(outage).to.have.property(\"start_time\");\n        });\n    } else {\n        pm.expect.fail(\"outage_details is not an array\");\n    }\n});\n\npm.test(\"Profile details exist\", function() {\n    pm.expect(nr).to.have.property(\"profile_details\");\n});\n\navailreportdetailsford();"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.availreportdetailsford);",
    "output": "var funcUtils = eval(globals.availreportdetailsford);\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Response has summary_details\", function() {\n    pm.expect(nr).to.have.property('summary_details');\n});\n\npm.test(\"Down count is present\", function() {\n    if(nr.summary_details) {\n        pm.expect(nr.summary_details).to.have.property('down_count');\n    }\n});\n\npm.test(\"Charts are an array\", function() {\n    if(nr.hasOwnProperty('charts')) {\n        pm.expect(Array.isArray(nr.charts)).to.be.true;\n    }\n});\n\npm.test(\"Availability details are an array\", function() {\n    if(nr.hasOwnProperty('availability_details')) {\n        pm.expect(Array.isArray(nr.availability_details)).to.be.true;\n    }\n});\n\npm.test(\"Outage details are an array\", function() {\n    if(nr.hasOwnProperty('outage_details')) {\n        pm.expect(Array.isArray(nr.outage_details)).to.be.true;\n    }\n});\n\npm.test(\"Profile details are present\", function() {\n    pm.expect(nr).to.have.property('profile_details');\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.availreportdetailsford);",
    "output": "var funcUtils = eval(pm.globals.get(\"availreportdetailsford\"));\n\npm.test(\"Response code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Summary details exist\", function () {\n    pm.expect(nr).to.have.property(\"summary_details\");\n});\n\npm.test(\"Down count is present\", function () {\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\");\n    }\n});\n\npm.test(\"Downtime duration is present\", function () {\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\");\n    }\n});\n\npm.test(\"Charts are present and are an array\", function () {\n    pm.expect(nr).to.have.property(\"charts\").that.is.an('array');\n    nr.charts.forEach(function(chart) {\n        pm.expect(chart).to.be.an('object');\n    });\n});\n\npm.test(\"Info is present\", function () {\n    pm.expect(nr).to.have.property(\"info\");\n});\n\npm.test(\"Availability details are present and are an array\", function () {\n    pm.expect(nr).to.have.property(\"availability_details\").that.is.an('array');\n    nr.availability_details.forEach(function(detail) {\n        pm.expect(detail).to.be.an('object');\n    });\n});\n\npm.test(\"Outage details are present and are an array\", function () {\n    pm.expect(nr).to.have.property(\"outage_details\").that.is.an('array');\n    nr.outage_details.forEach(function(outage) {\n        pm.expect(outage).to.be.an('object');\n    });\n});\n\npm.test(\"Profile details are present\", function () {\n    pm.expect(nr).to.have.property(\"profile_details\");\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.availreportdetailsford);",
    "output": "var funcUtils = eval(globals.availreportdetailsford);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setGlobalVariable(\"busyhourreport\", function busyhourreport()\n{\n    tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n//busy_hours validation\nif (responseBody.has(\"busy_hours\")) {\n    tests[\"busy_hours\"] = responseBody.has(\"busy_hours\") && (responseBody.busy_hours !== null);\n    tests[\"value\"] = responseBody.has(\"value\") && (responseBody.value !== null);\n    tests[\"period\"] = responseBody.has(\"period\") && (responseBody.period !== null);\n\n}\nelse { tests[\"busy_hours is missing\"] = responseBody.has(\"busy_hours\"); }\n\n// Info data validation\nif (responseBody.has(\"info\")) {\n    tests['resource type'] = (response.data.info.resource_type === 2);\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"resource_type\"] = responseBody.has(\"resource_type\");\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n\n}\nelse { tests[\"info is missing\"] = responseBody.has(\"info\"); }\n}+'busyhourreport()');",
    "output": "pm.globals.set(\"busyhourreport\", function busyhourreport() {\n    let response = pm.response.json();\n    let nr = response.data || {};\n\n    // Status code check\n    pm.test(\"Status code is 200\", function () {\n        pm.expect(pm.response.code).to.equal(200);\n    });\n\n    // busy_hours validation\n    if (response.hasOwnProperty(\"busy_hours\")) {\n        pm.test(\"busy_hours\", function () {\n            pm.expect(response.busy_hours).to.not.be.null;\n        });\n        pm.test(\"value\", function () {\n            pm.expect(response.value).to.not.be.null;\n        });\n        pm.test(\"period\", function () {\n            pm.expect(response.period).to.not.be.null;\n        });\n    } else {\n        pm.test(\"busy_hours is missing\", function () {\n            pm.expect(response).to.not.have.property(\"busy_hours\");\n        });\n    }\n\n    // Info data validation\n    if (response.hasOwnProperty(\"info\") && nr.info) {\n        pm.test(\"resource type\", function () {\n            pm.expect(nr.info.resource_type).to.equal(2);\n        });\n        pm.test(\"end_time\", function () {\n            pm.expect(response).to.have.property(\"end_time\");\n        });\n        pm.test(\"resource_type_name\", function () {\n            pm.expect(nr.info.resource_type_name).to.equal(\"Monitor\");\n        });\n        pm.test(\"report_name\", function () {\n            pm.expect(response).to.have.property(\"report_name\");\n        });\n        pm.test(\"period_name\", function () {\n            pm.expect(response).to.have.property(\"period_name\");\n        });\n        pm.test(\"formatted_start_time\", function () {\n            pm.expect(response).to.have.property(\"formatted_start_time\");\n        });\n        pm.test(\"generated_time\", function () {\n            pm.expect(response).to.have.property(\"generated_time\");\n        });\n        pm.test(\"formatted_end_time\", function () {\n            pm.expect(response).to.have.property(\"formatted_end_time\");\n        });\n        pm.test(\"segment_type\", function () {\n            pm.expect(response).to.have.property(\"segment_type\");\n        });\n        pm.test(\"start_time\", function () {\n            pm.expect(response).to.have.property(\"start_time\");\n        });\n        pm.test(\"resource_type\", function () {\n            pm.expect(response).to.have.property(\"resource_type\");\n        });\n        pm.test(\"period\", function () {\n            pm.expect(response).to.have.property(\"period\");\n        });\n        pm.test(\"formatted_generated_time\", function () {\n            pm.expect(response).to.have.property(\"formatted_generated_time\");\n        });\n        pm.test(\"report_type\", function () {\n            pm.expect(response).to.have.property(\"report_type\");\n        });\n        pm.test(\"segment_type_name\", function () {\n            pm.expect(response).to.have.property(\"segment_type_name\");\n        });\n\n        if (response.hasOwnProperty(\"resource_tags\")) {\n            pm.test(\"resource_tags\", function () {\n                pm.expect(response).to.have.property(\"resource_tags\");\n            });\n        }\n    } else {\n        pm.test(\"info is missing\", function () {\n            pm.expect(response).to.not.have.property(\"info\");\n        });\n    }\n} + 'busyhourreport()');"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.busyhourreport);",
    "output": "var funcUtils = eval(globals.busyhourreport);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.busyhourreport);",
    "output": "var funcUtils = eval(globals.busyhourreport);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nif(responseBody.has(\"info\"))\n{\n    tests['resource_type_name'] = responseData.data.info.resource_type_name == 'Monitor';\n    tests[\"end_time\"] = responseData.data.info.end_time!== null;\n    tests['resource_type_name'] = responseData.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseData.data.info.report_name !== null;\n    tests[\"period_name\"] = responseData.data.info.period_name !== null;\n    tests[\"formatted_start_time\"] = responseData.data.info.formatted_start_time !== null;\n    tests[\"formatted_end_time\"] = responseData.data.info.formatted_end_time !== null;\n    tests[\"generated_time\"] = responseData.data.info.generated_time !== null;\n    tests[\"segment_type\"] = responseData.data.info.segment_type !== null;\n    tests[\"start_time\"] = responseData.data.info.start_time !== null;\n    tests[\"unit\"] = responseData.data.info.unit !== null;\n    tests[\"period\"] = responseData.data.info.period !== null;\n    tests[\"formatted_generated_time\"] = responseData.data.info.formatted_generated_time !== null;\n    tests[\"resource_id\"] = responseData.data.info.resource_id !== null;\n    tests[\"report_type\"] = responseData.data.info.report_type !== null;\n    tests[\"segment_type_name\"] = responseData.data.info.segment_type_name !== null;\n    tests[\"attribute_name\"] = responseData.data.info.attribute_name !== null;\n    tests['resource type'] = (responseData.data.info.resource_type === 2);\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n\n}\ntests[\"busy_hours\"] = responseBody.has(\"busy_hours\") && responseData.data.busy_hours !== null;\nif(responseBody.has(\"busy_hours\"))\n{\n    for(var j=0;j < responseData.data.busy_hours.length; j++)\n    {\n        tests[\"busy_hours_\"+j+\"_value\"] = responseData.data.busy_hours[j].value!== null;\n        tests[\"busy_hours_\"+j+\"_period\"] = responseData.data.busy_hours[j].period!== null;\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Info data validation\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function() {\n        pm.expect(response.hasOwnProperty(\"resource_name\")).to.be.true;\n    });\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"resource_type_name\", function() {\n        pm.expect(nr.info.resource_type_name).to.equal('Monitor');\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(response.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(response.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"segment_type\", function() {\n        pm.expect(response.hasOwnProperty(\"segment_type\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"resource type\", function() {\n        pm.expect(nr.info.resource_type).to.equal(2);\n    });\n    pm.test(\"period\", function() {\n        pm.expect(response.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(response.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n    pm.test(\"segment_type_name\", function() {\n        pm.expect(response.hasOwnProperty(\"segment_type_name\")).to.be.true;\n    });\n    pm.test(\"metric_aggregation_name\", function() {\n        pm.expect(response.hasOwnProperty(\"metric_aggregation_name\")).to.be.true;\n    });\n    pm.test(\"metric_aggregation\", function() {\n        pm.expect(response.hasOwnProperty(\"metric_aggregation\")).to.be.true;\n    });\n    if (response.hasOwnProperty(\"resource_tags\")) {\n        pm.test(\"resource_tags\", function() {\n            pm.expect(response.hasOwnProperty(\"resource_tags\")).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"info is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.false;\n    });\n}\n\n// table_data validation\nif (response.hasOwnProperty(\"table_data\")) {\n    pm.test(\"table_data\", function() {\n        pm.expect(response.hasOwnProperty(\"table_data\") && nr.table_data !== null).to.be.true;\n    });\n} else {\n    pm.test(\"table_data is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"table_data\")).to.be.false;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setGlobalVariable(\"rbmmid\",postman.getGlobalVariable(\"getRBMMid\"));",
    "output": "pm.globals.set(\"rbmmid\", pm.globals.get(\"getRBMMid\"));"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.busyhourreport);",
    "output": "var funcUtils = eval(globals.busyhourreport);\n\npm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Response has success message\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(response.message).to.eql(\"success\");\n});\n\npm.test(\"Summary details down count exists\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.hasOwnProperty('summary_details')) {\n        pm.expect(nr.summary_details).to.have.property('down_count');\n    }\n});\n\npm.test(\"Availability details are valid\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.hasOwnProperty('availability_details')) {\n        nr.availability_details.forEach(function (detail) {\n            pm.expect(detail).to.have.property('status');\n        });\n    }\n});\n\npm.test(\"Charts data is present\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.hasOwnProperty('charts')) {\n        pm.expect(nr.charts.length).to.be.above(0);\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.busyhourreport);",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\nconsole.log(\"Full Response:\", JSON.stringify(pm.response.json(), null, 2));\n\npm.test(\"Response has data\", function() {\n    let response = pm.response.json();\n    let nr = response.data || {};\n    pm.expect(nr).to.have.property('summary_details');\n    pm.expect(nr).to.have.property('charts');\n    pm.expect(nr).to.have.property('info');\n    pm.expect(nr).to.have.property('availability_details');\n    pm.expect(nr).to.have.property('outage_details');\n    pm.expect(nr).to.have.property('profile_details');\n});\n\npm.test(\"Summary details are valid\", function() {\n    let response = pm.response.json();\n    let nr = response.data || {};\n    if (response.hasOwnProperty('summary_details')) {\n        pm.expect(nr.summary_details.down_count).to.be.a('number');\n        pm.expect(nr.summary_details.downtime_duration).to.be.a('number');\n    }\n});\n\npm.test(\"Charts are valid\", function() {\n    let response = pm.response.json();\n    let nr = response.data || {};\n    if (nr.hasOwnProperty('charts') && Array.isArray(nr.charts)) {\n        nr.charts.forEach(function(chart) {\n            pm.expect(chart).to.be.an('object');\n        });\n    }\n});\n\npm.test(\"Availability details are valid\", function() {\n    let response = pm.response.json();\n    let nr = response.data || {};\n    if (nr.hasOwnProperty('availability_details') && Array.isArray(nr.availability_details)) {\n        nr.availability_details.forEach(function(detail) {\n            pm.expect(detail).to.be.an('object');\n        });\n    }\n});\n\npm.test(\"Outage details are valid\", function() {\n    let response = pm.response.json();\n    let nr = response.data || {};\n    if (nr.hasOwnProperty('outage_details') && Array.isArray(nr.outage_details)) {\n        nr.outage_details.forEach(function(detail) {\n            pm.expect(detail).to.be.an('object');\n        });\n    }\n});\n\npm.test(\"Profile details are valid\", function() {\n    let response = pm.response.json();\n    let nr = response.data || {};\n    if (nr.hasOwnProperty('profile_details')) {\n        pm.expect(nr.profile_details).to.be.an('object');\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.busyhourreport);",
    "output": "var funcUtils = eval(globals.busyhourreport);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.busyhourreport);",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Response message is success\", function() {\n    pm.expect(response.message).to.eql(\"success\");\n});\n\nif(nr.hasOwnProperty('summary_details')) {\n    pm.test(\"Summary details have down_count\", function() {\n        pm.expect(nr.summary_details).to.have.property('down_count');\n    });\n\n    pm.test(\"Summary details have downtime_duration\", function() {\n        pm.expect(nr.summary_details).to.have.property('downtime_duration');\n    });\n}\n\nif(Array.isArray(nr.charts)) {\n    pm.test(\"Charts array is present\", function() {\n        pm.expect(nr.charts).to.be.an('array');\n    });\n\n    nr.charts.forEach(function(chart, index) {\n        pm.test(`Chart ${index} has necessary properties`, function() {\n            pm.expect(chart).to.have.property('property_name'); // replace 'property_name' with actual properties\n        });\n    });\n}\n\nif(Array.isArray(nr.availability_details)) {\n    pm.test(\"Availability details array is present\", function() {\n        pm.expect(nr.availability_details).to.be.an('array');\n    });\n\n    nr.availability_details.forEach(function(detail, index) {\n        pm.test(`Availability detail ${index} has necessary properties`, function() {\n            pm.expect(detail).to.have.property('property_name'); // replace 'property_name' with actual properties\n        });\n    });\n}\n\nif(Array.isArray(nr.outage_details)) {\n    pm.test(\"Outage details array is present\", function() {\n        pm.expect(nr.outage_details).to.be.an('array');\n    });\n\n    nr.outage_details.forEach(function(outage, index) {\n        pm.test(`Outage detail ${index} has necessary properties`, function() {\n            pm.expect(outage).to.have.property('property_name'); // replace 'property_name' with actual properties\n        });\n    });\n}\n\nif(nr.hasOwnProperty('profile_details')) {\n    pm.test(\"Profile details is present\", function() {\n        pm.expect(nr).to.have.property('profile_details');\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.busyhourreport);",
    "output": "var funcUtils = eval(globals.busyhourreport);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.busyhourreport);",
    "output": "var funcUtils = eval(globals.busyhourreport);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.busyhourreport);",
    "output": "var funcUtils = eval(globals.busyhourreport);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nvar monitorList = responseData.data.monitors;\nfor(var i in monitorList)\n{\n    var monitor = monitorList[i];\n    if(monitor.monitor_type=='URL' && monitor.status !==0 && monitor.status !==5)\n    {\n        postman.setGlobalVariable(\"getUrlMonitor\", monitor.monitor_id);\n        \n    }\n    if(monitor.monitor_type=='SMTP' && monitor.status !==0 && monitor.status !==5)\n    {\n        postman.setGlobalVariable(\"getSmtpMonitor\", monitor.monitor_id);\n       \n    }\n    \n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar monitorList = nr.monitors || [];\n\nfor (var i = 0; i < monitorList.length; i++) {\n    var monitor = monitorList[i];\n    if (monitor.monitor_type === 'URL' && monitor.status !== 0 && monitor.status !== 5) {\n        pm.globals.set(\"getUrlMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'SMTP' && monitor.status !== 0 && monitor.status !== 5) {\n        pm.globals.set(\"getSmtpMonitor\", monitor.monitor_id);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nvar monitorGroupsList = responseData.data;\nvar result=[];\nconsole.log(\"result\",monitorGroupsList);\nfor(var i in monitorGroupsList)\n{console.log(\"result\",i);\nif(i>24)break;\n    var group = monitorGroupsList[i];\n        result.push(group.group_id);\n        console.log(group.group_id);\n    \n}\npostman.setGlobalVariable(\"getGroupMonitorArr\", result);",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar monitorGroupsList = nr;\nvar result = [];\n\nconsole.log(\"result\", monitorGroupsList);\nfor (var i in monitorGroupsList) {\n    console.log(\"result\", i);\n    if (i > 24) break;\n    var group = monitorGroupsList[i];\n    result.push(group.group_id);\n    console.log(group.group_id);\n}\n\npm.globals.set(\"getGroupMonitorArr\", result);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getUrlMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\npm.globals.set(\"getUrlMonitorlocationprofile\", nr.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n     if (response.data[i].profile_id === globals.getUrlMonitorlocationprofile)\n { tests[\"if\"] = responseCode.code === 200;\n  postman.setEnvironmentVariable(\"getUrlMonitorprimarylocation\", response.data[i].primary_location);\n \n }\n \n }",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar j = nr.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    if (nr[i].profile_id === pm.globals.get(\"getUrlMonitorlocationprofile\")) {\n        pm.test(\"if\", function() {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.environment.set(\"getUrlMonitorprimarylocation\", nr[i].primary_location);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "//Report deatails validation\nif ( responseBody.has(\"data\"))\n{   tests[\"response code is 201\"] = responseCode.code === 201;\n    var responseData = JSON.parse(responseBody);\n    postman.setGlobalVariable(\"report_id\", responseData.data.report_id);\n    tests[\"report_id\"] = responseBody.has(\"report_id\") && (responseBody.report_id !== null);\n    tests[\"report_name\"] = responseBody.has(\"report_name\") && (responseData.data.report_name === \"test Report\");\n    tests[\"description\"] = responseBody.has(\"description\") && (responseData.data.description === \"test description\");\n    tests[\"config_data\"] = responseBody.has(\"config_data\");\n    tests[\"selection_type\"] = responseBody.has(\"selection_type\") && (responseData.data.config_data.selection_type === 2);\n    tests[\"attribute\"] = responseBody.has(\"attribute\") && (responseData.data.config_data.attribute === 1);\n    tests[\"period\"] = responseBody.has(\"period\") && (responseData.data.config_data.period === 13);\n    tests[\"monitors\"] = responseBody.has(\"monitors\") && (responseData.data.config_data.monitors !== null);\n    tests[\"locations\"] = responseBody.has(\"locations\") && (responseData.data.config_datalocations !== null);\n}\nelse\n{tests[\"Availability Trend report addition\"] = responseBody.has(\"report_id\") ;}",
    "output": "if (pm.response.json().hasOwnProperty(\"data\")) {\n    pm.test(\"response code is 201\", function () {\n        pm.expect(pm.response.code).to.equal(201);\n    });\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.globals.set(\"report_id\", nr.report_id);\n    pm.test(\"report_id\", function () {\n        pm.expect(nr.hasOwnProperty(\"report_id\") && nr.report_id !== null).to.be.true;\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.hasOwnProperty(\"report_name\") && nr.report_name === \"test Report\").to.be.true;\n    });\n    pm.test(\"description\", function () {\n        pm.expect(nr.hasOwnProperty(\"description\") && nr.description === \"test description\").to.be.true;\n    });\n    pm.test(\"config_data\", function () {\n        pm.expect(nr.hasOwnProperty(\"config_data\")).to.be.true;\n    });\n    pm.test(\"selection_type\", function () {\n        pm.expect(nr.hasOwnProperty(\"selection_type\") && nr.config_data.selection_type === 2).to.be.true;\n    });\n    pm.test(\"attribute\", function () {\n        pm.expect(nr.hasOwnProperty(\"attribute\") && nr.config_data.attribute === 1).to.be.true;\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.hasOwnProperty(\"period\") && nr.config_data.period === 13).to.be.true;\n    });\n    pm.test(\"monitors\", function () {\n        pm.expect(nr.hasOwnProperty(\"monitors\") && nr.config_data.monitors !== null).to.be.true;\n    });\n    pm.test(\"locations\", function () {\n        pm.expect(nr.hasOwnProperty(\"locations\") && nr.config_data.locations !== null).to.be.true;\n    });\n} else {\n    pm.test(\"Availability Trend report addition\", function () {\n        pm.expect(pm.response.json().hasOwnProperty(\"report_id\")).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "//Report deatails validation\nif ( responseBody.has(\"data\"))\n{   tests[\"response code is 200\"] = responseCode.code === 200;\n    var responseData = JSON.parse(responseBody);\n    postman.setGlobalVariable(\"report_id\", responseData.data.report_id);\n    tests[\"report_id\"] = responseBody.has(\"report_id\") && (responseBody.report_id !== null);\n    tests[\"report_name\"] = responseBody.has(\"report_name\") && (responseData.data.report_name === \"test Report\");\n    tests[\"description\"] = responseBody.has(\"description\") && (responseData.data.description === \"test description\");\n    tests[\"config_data\"] = responseBody.has(\"config_data\");\n    tests[\"selection_type\"] = responseBody.has(\"selection_type\") && (responseData.data.config_data.selection_type === 2);\n    tests[\"attribute\"] = responseBody.has(\"attribute\") && (responseData.data.config_data.attribute === 1);\n    tests[\"period\"] = responseBody.has(\"period\") && (responseData.data.config_data.period === 13);\n    tests[\"monitors\"] = responseBody.has(\"monitors\") && (responseData.data.config_data.monitors !== null);\n    tests[\"locations\"] = responseBody.has(\"locations\") && (responseData.data.config_datalocations !== null);\n}\nelse\n{tests[\"Availability Trend report edit\"] = responseBody.has(\"report_id\") ;}",
    "output": "pm.test(\"response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\n\npm.globals.set(\"report_id\", nr.report_id);\n\npm.test(\"report_id\", function() {\n    pm.expect(nr.hasOwnProperty(\"report_id\") && nr.report_id !== null).to.be.true;\n});\n\npm.test(\"report_name\", function() {\n    pm.expect(nr.hasOwnProperty(\"report_name\") && nr.report_name === \"test Report\").to.be.true;\n});\n\npm.test(\"description\", function() {\n    pm.expect(nr.hasOwnProperty(\"description\") && nr.description === \"test description\").to.be.true;\n});\n\npm.test(\"config_data\", function() {\n    pm.expect(nr.hasOwnProperty(\"config_data\")).to.be.true;\n});\n\npm.test(\"selection_type\", function() {\n    pm.expect(nr.hasOwnProperty(\"selection_type\") && nr.config_data.selection_type === 2).to.be.true;\n});\n\npm.test(\"attribute\", function() {\n    pm.expect(nr.hasOwnProperty(\"attribute\") && nr.config_data.attribute === 1).to.be.true;\n});\n\npm.test(\"period\", function() {\n    pm.expect(nr.hasOwnProperty(\"period\") && nr.config_data.period === 13).to.be.true;\n});\n\npm.test(\"monitors\", function() {\n    pm.expect(nr.hasOwnProperty(\"monitors\") && nr.config_data.monitors !== null).to.be.true;\n});\n\npm.test(\"locations\", function() {\n    pm.expect(nr.hasOwnProperty(\"locations\") && nr.config_data.locations !== null).to.be.true;\n});\n\npm.test(\"Availability Trend report edit\", function() {\n    pm.expect(response.hasOwnProperty(\"report_id\")).to.be.true;\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "// report_data data validation\nif ( responseBody.has(\"report_data\"))\n{   \n    tests[\"response code is 200\"] = responseCode.code === 200;\n    tests[\"report_data\"] = responseBody.has(\"report_data\");\n    tests[\"location_metrics\"] = responseBody.has(\"location_metrics\");\n    tests[\"display_name\"] = responseBody.has(\"display_name\");\n    \n    if(responseBody.has(\"location_metrics\"))\n   { tests[\"average\"] = responseBody.has(\"average\");\n    tests[\"location_name\"] = responseBody.has(\"location_name\");\n    tests[\"95_percentile\"] = responseBody.has(\"95_percentile\");\n  \n   }\n    \n}\n\nelse\n\n{tests[\"Availability Trend report get\"] = responseBody.has(\"report_data\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"report_id\"] = responseBody.has(\"report_id\");\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"description\"] = responseBody.has(\"description\");\n    tests[\"selection_type_name\"] = responseBody.has(\"selection_type_name\");\n    tests[\"type\"] = responseBody.has(\"type\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"selection_type\"] = responseBody.has(\"selection_type\");\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"locations\"] = responseBody.has(\"locations\");\n    tests[\"attribute\"] = responseBody.has(\"attribute\");\n    tests[\"monitors\"] = responseBody.has(\"monitors\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n     tests[\"attribute_title\"] = responseBody.has(\"attribute_title\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}",
    "output": "let response = pm.response.json();\nlet nr = response.data || {};\n\npm.test(\"response code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\npm.test(\"report_data\", function () {\n    pm.expect(response).to.have.property(\"report_data\");\n});\n\npm.test(\"location_metrics\", function () {\n    pm.expect(response).to.have.property(\"location_metrics\");\n});\n\npm.test(\"display_name\", function () {\n    pm.expect(response).to.have.property(\"display_name\");\n});\n\nif (response.hasOwnProperty(\"location_metrics\")) {\n    pm.test(\"average\", function () {\n        pm.expect(response).to.have.property(\"average\");\n    });\n\n    pm.test(\"location_name\", function () {\n        pm.expect(response).to.have.property(\"location_name\");\n    });\n\n    pm.test(\"95_percentile\", function () {\n        pm.expect(response).to.have.property(\"95_percentile\");\n    });\n}\n\npm.test(\"Availability Trend report get\", function () {\n    pm.expect(response).to.have.property(\"report_data\");\n});\n\npm.test(\"report_id\", function () {\n    pm.expect(response).to.have.property(\"report_id\");\n});\n\npm.test(\"report_name\", function () {\n    pm.expect(response).to.have.property(\"report_name\");\n});\n\npm.test(\"description\", function () {\n    pm.expect(response).to.have.property(\"description\");\n});\n\npm.test(\"selection_type_name\", function () {\n    pm.expect(response).to.have.property(\"selection_type_name\");\n});\n\npm.test(\"type\", function () {\n    pm.expect(response).to.have.property(\"type\");\n});\n\npm.test(\"generated_time\", function () {\n    pm.expect(response).to.have.property(\"generated_time\");\n});\n\npm.test(\"formatted_generated_time\", function () {\n    pm.expect(response).to.have.property(\"formatted_generated_time\");\n});\n\npm.test(\"selection_type\", function () {\n    pm.expect(response).to.have.property(\"selection_type\");\n});\n\npm.test(\"period\", function () {\n    pm.expect(response).to.have.property(\"period\");\n});\n\npm.test(\"locations\", function () {\n    pm.expect(response).to.have.property(\"locations\");\n});\n\npm.test(\"attribute\", function () {\n    pm.expect(response).to.have.property(\"attribute\");\n});\n\npm.test(\"monitors\", function () {\n    pm.expect(response).to.have.property(\"monitors\");\n});\n\npm.test(\"start_time\", function () {\n    pm.expect(response).to.have.property(\"start_time\");\n});\n\npm.test(\"end_time\", function () {\n    pm.expect(response).to.have.property(\"end_time\");\n});\n\npm.test(\"formatted_start_time\", function () {\n    pm.expect(response).to.have.property(\"formatted_start_time\");\n});\n\npm.test(\"formatted_end_time\", function () {\n    pm.expect(response).to.have.property(\"formatted_end_time\");\n});\n\npm.test(\"attribute_title\", function () {\n    pm.expect(response).to.have.property(\"attribute_title\");\n});\n\npm.test(\"info is missing\", function () {\n    pm.expect(response).to.have.property(\"info\");\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "//Report deatails validation\r\nif ( responseBody.has(\"data\"))\r\n{   tests[\"response code is 200\"] = responseCode.code === 200;\r\n    var responseData = JSON.parse(responseBody);\r\n    postman.setGlobalVariable(\"report_id\", responseData.data.report_id);\r\n    tests[\"report_id\"] = responseBody.has(\"report_id\") && (responseBody.report_id !== null);\r\n    tests[\"report_name\"] = responseBody.has(\"report_name\") && (responseData.data.report_name === \"test Report\");\r\n    tests[\"description\"] = responseBody.has(\"description\") && (responseData.data.description === \"test description\");\r\n    tests[\"config_data\"] = responseBody.has(\"config_data\");\r\n    tests[\"selection_type\"] = responseBody.has(\"selection_type\") && (responseData.data.config_data.selection_type === 1);\r\n    tests[\"attribute\"] = responseBody.has(\"attribute\") && (responseData.data.config_data.attribute === 2);\r\n    tests[\"period\"] = responseBody.has(\"period\") && (responseData.data.config_data.period === 13);\r\n    tests[\"monitor_groups\"] = responseBody.has(\"monitor_groups\") && (responseData.data.config_data.monitor_groups !== null);\r\n    tests[\"locations\"] = responseBody.has(\"locations\") && (responseData.data.config_datalocations !== null);\r\n}\r\nelse\r\n{tests[\"Availability Trend report edit\"] = responseBody.has(\"report_id\") ;}",
    "output": "if (pm.response.json().hasOwnProperty(\"data\")) {\n    pm.test(\"response code is 200\", function () {\n        pm.expect(pm.response.code).to.equal(200);\n    });\n\n    var response = pm.response.json();\n    var nr = response.data || {};\n\n    pm.globals.set(\"report_id\", nr.report_id);\n\n    pm.test(\"report_id\", function () {\n        pm.expect(nr.hasOwnProperty(\"report_id\")).to.be.true;\n        pm.expect(nr.report_id).to.not.be.null;\n    });\n\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.hasOwnProperty(\"report_name\")).to.be.true;\n        pm.expect(nr.report_name).to.equal(\"test Report\");\n    });\n\n    pm.test(\"description\", function () {\n        pm.expect(nr.hasOwnProperty(\"description\")).to.be.true;\n        pm.expect(nr.description).to.equal(\"test description\");\n    });\n\n    pm.test(\"config_data\", function () {\n        pm.expect(nr.hasOwnProperty(\"config_data\")).to.be.true;\n    });\n\n    pm.test(\"selection_type\", function () {\n        pm.expect(nr.hasOwnProperty(\"selection_type\")).to.be.true;\n        pm.expect(nr.config_data.selection_type).to.equal(1);\n    });\n\n    pm.test(\"attribute\", function () {\n        pm.expect(nr.hasOwnProperty(\"attribute\")).to.be.true;\n        pm.expect(nr.config_data.attribute).to.equal(2);\n    });\n\n    pm.test(\"period\", function () {\n        pm.expect(nr.hasOwnProperty(\"period\")).to.be.true;\n        pm.expect(nr.config_data.period).to.equal(13);\n    });\n\n    pm.test(\"monitor_groups\", function () {\n        pm.expect(nr.hasOwnProperty(\"monitor_groups\")).to.be.true;\n        pm.expect(nr.config_data.monitor_groups).to.not.be.null;\n    });\n\n    pm.test(\"locations\", function () {\n        pm.expect(nr.hasOwnProperty(\"locations\")).to.be.true;\n        pm.expect(nr.config_data.locations).to.not.be.null;\n    });\n} else {\n    pm.test(\"Availability Trend report edit\", function () {\n        pm.expect(pm.response.json().hasOwnProperty(\"report_id\")).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "// report_data data validation\nif ( responseBody.has(\"report_data\"))\n{   \n    tests[\"response code is 200\"] = responseCode.code === 200;\n    tests[\"report_data\"] = responseBody.has(\"report_data\");\n    tests[\"display_name\"] = responseBody.has(\"display_name\");\n    \n    if(responseBody.has(\"location_metrics\"))\n   { tests[\"average\"] = responseBody.has(\"average\");\n    tests[\"location_name\"] = responseBody.has(\"location_name\");\n    tests[\"95_percentile\"] = responseBody.has(\"95_percentile\");\n  \n   }\n    \n}\n\nelse\n\n{tests[\"Availability Trend report get\"] = responseBody.has(\"report_data\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"report_id\"] = responseBody.has(\"report_id\");\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"description\"] = responseBody.has(\"description\");\n    tests[\"selection_type_name\"] = responseBody.has(\"selection_type_name\");\n    tests[\"type\"] = responseBody.has(\"type\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"selection_type\"] = responseBody.has(\"selection_type\");\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"locations\"] = responseBody.has(\"locations\");\n    tests[\"attribute\"] = responseBody.has(\"attribute\");\n    tests[\"monitor_groups\"] = responseBody.has(\"monitor_groups\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n     tests[\"attribute_title\"] = responseBody.has(\"attribute_title\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}",
    "output": "let response = pm.response.json();\nlet nr = response.data || {};\n\n// report_data data validation\npm.test(\"response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nif (response.hasOwnProperty(\"report_data\")) {\n    pm.test(\"report_data\", function() {\n        pm.expect(response).to.have.property(\"report_data\");\n    });\n\n    pm.test(\"display_name\", function() {\n        pm.expect(response).to.have.property(\"display_name\");\n    });\n\n    if (response.hasOwnProperty(\"location_metrics\")) {\n        pm.test(\"average\", function() {\n            pm.expect(response).to.have.property(\"average\");\n        });\n\n        pm.test(\"location_name\", function() {\n            pm.expect(response).to.have.property(\"location_name\");\n        });\n\n        pm.test(\"95_percentile\", function() {\n            pm.expect(response).to.have.property(\"95_percentile\");\n        });\n    }\n\n} else {\n    pm.test(\"Availability Trend report get\", function() {\n        pm.expect(response).to.have.property(\"report_data\");\n    });\n}\n\n// Info data validation\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"report_id\", function() {\n        pm.expect(response).to.have.property(\"report_id\");\n    });\n\n    pm.test(\"report_name\", function() {\n        pm.expect(response).to.have.property(\"report_name\");\n    });\n\n    pm.test(\"description\", function() {\n        pm.expect(response).to.have.property(\"description\");\n    });\n\n    pm.test(\"selection_type_name\", function() {\n        pm.expect(response).to.have.property(\"selection_type_name\");\n    });\n\n    pm.test(\"type\", function() {\n        pm.expect(response).to.have.property(\"type\");\n    });\n\n    pm.test(\"generated_time\", function() {\n        pm.expect(response).to.have.property(\"generated_time\");\n    });\n\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response).to.have.property(\"formatted_generated_time\");\n    });\n\n    pm.test(\"selection_type\", function() {\n        pm.expect(response).to.have.property(\"selection_type\");\n    });\n\n    pm.test(\"period\", function() {\n        pm.expect(response).to.have.property(\"period\");\n    });\n\n    pm.test(\"locations\", function() {\n        pm.expect(response).to.have.property(\"locations\");\n    });\n\n    pm.test(\"attribute\", function() {\n        pm.expect(response).to.have.property(\"attribute\");\n    });\n\n    pm.test(\"monitor_groups\", function() {\n        pm.expect(response).to.have.property(\"monitor_groups\");\n    });\n\n    pm.test(\"start_time\", function() {\n        pm.expect(response).to.have.property(\"start_time\");\n    });\n\n    pm.test(\"end_time\", function() {\n        pm.expect(response).to.have.property(\"end_time\");\n    });\n\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response).to.have.property(\"formatted_start_time\");\n    });\n\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response).to.have.property(\"formatted_end_time\");\n    });\n\n    pm.test(\"attribute_title\", function() {\n        pm.expect(response).to.have.property(\"attribute_title\");\n    });\n\n} else {\n    pm.test(\"info is missing\", function() {\n        pm.expect(response).to.have.property(\"info\");\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"response code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"status\"] = responseBody.has(\"message\") && (responseData.message === \"success\");",
    "output": "pm.test(\"response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"status\", function() {\n    pm.expect(response).to.have.property(\"message\");\n    pm.expect(response.message).to.equal(\"success\");\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\n\nif(jsonData.data.length>0){\n    \n    var urlDataPresent = 'false';\n    var groupDataPresent = 'false';\n    var tagDataPresent = 'false';\n     \n    for(var i=0; i<jsonData.data.length>0; i++){\n        \n        if(urlDataPresent === 'false'){\n            \n            if(jsonData.data[i].type === \"URL\"){\n        \n                urlDataPresent = 'true';\n            }\n            pm.globals.set(\"avail_mon_id\",jsonData.data[i].monitor_id);\n            pm.globals.set(\"avail_mon_type\",jsonData.data[i].type);\n        }\n        \n        if(groupDataPresent === 'false' && jsonData.data[i].monitor_groups !== undefined){\n            \n            if(jsonData.data[i].monitor_groups.length>0){\n        \n                groupDataPresent = 'true';\n                pm.globals.set(\"avail_group_id\",jsonData.data[i].monitor_groups[0]);\n            }\n        }\n        \n        if(tagDataPresent == 'false' && jsonData.data[i].tags !== undefined){\n            \n            if(jsonData.data[i].tags.length>0){\n        \n                tagDataPresent = 'true';\n                pm.globals.set(\"avail_tag\",jsonData.data[i].tags[0]);\n                pm.globals.set(\"avail_tag_mon_type\",jsonData.data[i].type);\n            }\n        }\n        \n        if(urlDataPresent === 'true' && tagDataPresent == 'false' && groupDataPresent === 'false'){\n            \n            break;\n        }\n    }\n}",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\nif (nr.length > 0) {\n    var urlDataPresent = 'false';\n    var groupDataPresent = 'false';\n    var tagDataPresent = 'false';\n\n    for (var i = 0; i < nr.length; i++) {\n        if (urlDataPresent === 'false') {\n            if (nr[i].type === \"URL\") {\n                urlDataPresent = 'true';\n            }\n            pm.globals.set(\"avail_mon_id\", nr[i].monitor_id);\n            pm.globals.set(\"avail_mon_type\", nr[i].type);\n        }\n\n        if (groupDataPresent === 'false' && nr[i].monitor_groups !== undefined) {\n            if (nr[i].monitor_groups.length > 0) {\n                groupDataPresent = 'true';\n                pm.globals.set(\"avail_group_id\", nr[i].monitor_groups[0]);\n            }\n        }\n\n        if (tagDataPresent == 'false' && nr[i].tags !== undefined) {\n            if (nr[i].tags.length > 0) {\n                tagDataPresent = 'true';\n                pm.globals.set(\"avail_tag\", nr[i].tags[0]);\n                pm.globals.set(\"avail_tag_mon_type\", nr[i].type);\n            }\n        }\n\n        if (urlDataPresent === 'true' && tagDataPresent == 'false' && groupDataPresent === 'false') {\n            break;\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\n\nif(jsonData.data.length>0){\n    \n    if(Object.keys(jsonData.data).length>0){\n    \n        for(var i=0 ;i<Object.keys(jsonData.data).length ; i++){\n              \n            if(jsonData.data[i].tag_type === 1  || jsonData.data[i].tag_type === 2){\n              \n                var tagname = jsonData.data[i].tag_name;\n                var tagvalue = jsonData.data[i].tag_value;\n                var checkTag = tagname+\":\"+tagvalue;\n                console.log(\"  oooo   \"+checkTag);\n                if(checkTag === pm.globals.get(\"avail_tag\")){\n                    \n                     pm.globals.set(\"avail_tag_id\",jsonData.data[i].tag_id);\n                     break;\n                }\n            }\n        }\n            \n        \n    }\n}",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\nif (Array.isArray(nr) && nr.length > 0) {\n    for (var i = 0; i < nr.length; i++) {\n        if ((nr[i].tag_type === 1 || nr[i].tag_type === 2)) {\n            var tagname = nr[i].tag_name;\n            var tagvalue = nr[i].tag_value;\n            var checkTag = tagname + \":\" + tagvalue;\n            console.log(\"  oooo   \" + checkTag);\n            if (checkTag === pm.globals.get(\"avail_tag\")) {\n                pm.globals.set(\"avail_tag_id\", nr[i].tag_id);\n                break;\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 14){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==2);\n                    tests['monitor_type'] = jsonData.data.info.monitor_type;\n                    tests['resource_id'] = jsonData.data.info.resource_id;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 14){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                \n                if(Object.keys(jsonData.data.summary_details).length==12){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    tests[\"alarm_count\"] = (jsonData.data.summary_details.alarm_count!==null);\n\n                }else{\n                    \n                    if(Object.keys(jsonData.data.summary_details).length>12){\n                    \n                         tests[\"new attribute added to port monitor summary_details \"] =false;\n                    \n                    }else{\n                     \n                         tests[\"attribute removed port monitor summary_details \"] =false;   \n                    }\n                }\n            \n            }else{\n        \n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "var response = pm.response.json();\nif (response.code === 0) {\n    if (response.error === undefined) {\n        pm.test(\"Status code is 200\", function () {\n            pm.expect(pm.response.code).to.eql(200);\n        });\n        pm.test(\"code\", function () {\n            pm.expect(response.code).to.eql(0);\n        });\n        pm.test(\"message\", function () {\n            pm.expect(response.message).to.eql(\"success\");\n        });\n\n        var nr = response.data || {};\n        if (Object.keys(nr).length > 0) {\n            if (nr.info) {\n                if (Object.keys(nr.info).length == 14) {\n                    pm.test(\"info \", function () {\n                        pm.expect(true).to.be.true;\n                    });\n                    pm.test(\"monitor_count\", function () {\n                        pm.expect(nr.info.monitor_count).to.exist;\n                    });\n                    pm.test(\"resource type\", function () {\n                        pm.expect(nr.info.resource_type).to.eql(2);\n                    });\n                    pm.test(\"monitor_type\", function () {\n                        pm.expect(nr.info.monitor_type).to.exist;\n                    });\n                    pm.test(\"resource_id\", function () {\n                        pm.expect(nr.info.resource_id).to.exist;\n                    });\n                    pm.test(\"formatted_generated_time\", function () {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n                    pm.test(\"period\", function () {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n                    pm.test(\"start_time\", function () {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n                    pm.test(\"generated_time\", function () {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n                    pm.test(\"formatted_end_time\", function () {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n                    pm.test(\"formatted_start_time\", function () {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n                    pm.test(\"period_name\", function () {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n                    pm.test(\"resource_type_name\", function () {\n                        pm.expect(nr.info.resource_type_name).to.exist;\n                    });\n                    pm.test(\"resource_name\", function () {\n                        pm.expect(nr.info.resource_name).to.exist;\n                    });\n                    pm.test(\"end_time\", function () {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n                } else {\n                    if (Object.keys(nr.info).length > 14) {\n                        pm.test(\"new attribute added to info\", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"attribute removed from info\", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"info\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (nr.summary_details) {\n                if (Object.keys(nr.summary_details).length == 12) {\n                    pm.test(\"summary_details \", function () {\n                        pm.expect(true).to.be.true;\n                    });\n                    pm.test(\"down_count\", function () {\n                        pm.expect(nr.summary_details.down_count).to.not.be.null;\n                    });\n                    pm.test(\"downtime_duration\", function () {\n                        pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n                    });\n                    pm.test(\"availability_percentage\", function () {\n                        pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n                    });\n                    pm.test(\"mtbf\", function () {\n                        pm.expect(nr.summary_details.mtbf).to.not.be.null;\n                    });\n                    pm.test(\"unmanaged_duration\", function () {\n                        pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n                    });\n                    pm.test(\"mttr\", function () {\n                        pm.expect(nr.summary_details.mttr).to.not.be.null;\n                    });\n                    pm.test(\"maintenance_percentage\", function () {\n                        pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n                    });\n                    pm.test(\"maintenance_duration\", function () {\n                        pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n                    });\n                    pm.test(\"availability_duration\", function () {\n                        pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n                    });\n                    pm.test(\"unmanaged_percentage\", function () {\n                        pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n                    });\n                    pm.test(\"downtime_percentage\", function () {\n                        pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n                    });\n                    pm.test(\"alarm_count\", function () {\n                        pm.expect(nr.summary_details.alarm_count).to.not.be.null;\n                    });\n                } else {\n                    if (Object.keys(nr.summary_details).length > 12) {\n                        pm.test(\"new attribute added to port monitor summary_details \", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"attribute removed port monitor summary_details \", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"summary_details is missing\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 13){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==1);\n                    tests['resource_id'] = jsonData.data.info.resource_id;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 13){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                \n                if(Object.keys(jsonData.data.summary_details).length==12){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    tests[\"alarm_count\"] = (jsonData.data.summary_details.alarm_count!==null);\n                    \n                }else{\n                    \n                    if(Object.keys(jsonData.data.summary_details).length>12){\n                    \n                         tests[\"new attribute added to port monitor summary_details \"] =false;\n                    \n                    }else{\n                     \n                         tests[\"attribute removed port monitor summary_details \"] =false;   \n                    }\n                }\n            \n            }else{\n        \n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "var response = pm.response.json();\nif (response.code === 0) {\n    if (response.error === undefined) {\n        pm.test(\"Status code is 200\", function () {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.test(\"code\", function () {\n            pm.expect(response.code).to.equal(0);\n        });\n        pm.test(\"message\", function () {\n            pm.expect(response.message).to.equal(\"success\");\n        });\n        var nr = response.data || {};\n        if (Object.keys(nr).length > 0) {\n            if (nr.info) {\n                if (Object.keys(nr.info).length == 13) {\n                    pm.test(\"info \", function () {\n                        pm.expect(true).to.be.true;\n                    });\n                    pm.test(\"monitor_count\", function () {\n                        pm.expect(nr.info.monitor_count).to.exist;\n                    });\n                    pm.test(\"resource type\", function () {\n                        pm.expect(nr.info.resource_type).to.equal(1);\n                    });\n                    pm.test(\"resource_id\", function () {\n                        pm.expect(nr.info.resource_id).to.exist;\n                    });\n                    pm.test(\"formatted_generated_time\", function () {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n                    pm.test(\"period\", function () {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n                    pm.test(\"start_time\", function () {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n                    pm.test(\"generated_time\", function () {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n                    pm.test(\"formatted_end_time\", function () {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n                    pm.test(\"formatted_start_time\", function () {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n                    pm.test(\"period_name\", function () {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n                    pm.test(\"resource_type_name\", function () {\n                        pm.expect(nr.info.resource_type_name).to.exist;\n                    });\n                    pm.test(\"resource_name\", function () {\n                        pm.expect(nr.info.resource_name).to.exist;\n                    });\n                    pm.test(\"end_time\", function () {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n                } else {\n                    if (Object.keys(nr.info).length > 13) {\n                        pm.test(\"new attribute added to info\", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"attribute removed from info\", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"info\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n            if (nr.summary_details) {\n                if (Object.keys(nr.summary_details).length == 12) {\n                    pm.test(\"summary_details \", function () {\n                        pm.expect(true).to.be.true;\n                    });\n                    pm.test(\"down_count\", function () {\n                        pm.expect(nr.summary_details.down_count).to.not.be.null;\n                    });\n                    pm.test(\"downtime_duration\", function () {\n                        pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n                    });\n                    pm.test(\"availability_percentage\", function () {\n                        pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n                    });\n                    pm.test(\"mtbf\", function () {\n                        pm.expect(nr.summary_details.mtbf).to.not.be.null;\n                    });\n                    pm.test(\"unmanaged_duration\", function () {\n                        pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n                    });\n                    pm.test(\"mttr\", function () {\n                        pm.expect(nr.summary_details.mttr).to.not.be.null;\n                    });\n                    pm.test(\"maintenance_percentage\", function () {\n                        pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n                    });\n                    pm.test(\"maintenance_duration\", function () {\n                        pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n                    });\n                    pm.test(\"availability_duration\", function () {\n                        pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n                    });\n                    pm.test(\"unmanaged_percentage\", function () {\n                        pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n                    });\n                    pm.test(\"downtime_percentage\", function () {\n                        pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n                    });\n                    pm.test(\"alarm_count\", function () {\n                        pm.expect(nr.summary_details.alarm_count).to.not.be.null;\n                    });\n                } else {\n                    if (Object.keys(nr.summary_details).length > 12) {\n                        pm.test(\"new attribute added to port monitor summary_details \", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"attribute removed port monitor summary_details \", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"summary_details is missing\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 13){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==4);\n                    tests['monitor_type'] = jsonData.data.info.monitor_type;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 13){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                \n                if(Object.keys(jsonData.data.summary_details).length==12){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    tests[\"alarm_count\"] = (jsonData.data.summary_details.alarm_count!==null);\n                    \n                }else{\n                    \n                    if(Object.keys(jsonData.data.summary_details).length>12){\n                    \n                         tests[\"new attribute added to port monitor summary_details \"] =false;\n                    \n                    }else{\n                     \n                         tests[\"attribute removed port monitor summary_details \"] =false;   \n                    }\n                }\n            \n            }else{\n        \n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "var response = pm.response.json();\nif (response.code === 0) {\n  if (response.error === undefined) {\n    pm.test(\"Status code is 200\", function () {\n      pm.expect(pm.response.code).to.equal(200);\n    });\n    pm.test(\"code\", function () {\n      pm.expect(response.code).to.equal(0);\n    });\n    pm.test(\"message\", function () {\n      pm.expect(response.message).to.equal(\"success\");\n    });\n    \n    var nr = response.data || {};\n    if (Object.keys(nr).length > 0) {\n      if (nr.info) {\n        pm.test(\"info \", function () {\n          pm.expect(Object.keys(nr.info).length).to.equal(13);\n          pm.expect(nr.info.monitor_count).to.be.ok;\n          pm.expect(nr.info.resource_type).to.equal(4);\n          pm.expect(nr.info.monitor_type).to.be.ok;\n          pm.expect(nr.info.formatted_generated_time).to.be.ok;\n          pm.expect(nr.info.period).to.be.ok;\n          pm.expect(nr.info.start_time).to.be.ok;\n          pm.expect(nr.info.generated_time).to.be.ok;\n          pm.expect(nr.info.formatted_end_time).to.be.ok;\n          pm.expect(nr.info.formatted_start_time).to.be.ok;\n          pm.expect(nr.info.period_name).to.be.ok;\n          pm.expect(nr.info.resource_type_name).to.be.ok;\n          pm.expect(nr.info.resource_name).to.be.ok;\n          pm.expect(nr.info.end_time).to.be.ok;\n        });\n        \n        pm.test(\"new attribute added to info\", function () {\n          pm.expect(Object.keys(nr.info).length).to.be.at.most(13);\n        });\n        \n        pm.test(\"attribute removed from info\", function () {\n          pm.expect(Object.keys(nr.info).length).to.be.at.least(13);\n        });\n        \n      } else {\n        pm.test(\"info\", function () {\n          pm.expect(false).to.be.true;\n        });\n      }\n      \n      if (nr.summary_details) {\n        pm.test(\"summary_details \", function () {\n          pm.expect(Object.keys(nr.summary_details).length).to.equal(12);\n          pm.expect(nr.summary_details.down_count).to.not.be.null;\n          pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n          pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n          pm.expect(nr.summary_details.mtbf).to.not.be.null;\n          pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n          pm.expect(nr.summary_details.mttr).to.not.be.null;\n          pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n          pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n          pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n          pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n          pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n          pm.expect(nr.summary_details.alarm_count).to.not.be.null;\n        });\n        \n        pm.test(\"new attribute added to port monitor summary_details \", function () {\n          pm.expect(Object.keys(nr.summary_details).length).to.be.at.most(12);\n        });\n        \n        pm.test(\"attribute removed port monitor summary_details \", function () {\n          pm.expect(Object.keys(nr.summary_details).length).to.be.at.least(12);\n        });\n        \n      } else {\n        pm.test(\"summary_details is missing\", function () {\n          pm.expect(false).to.be.true;\n        });\n      }\n    }\n  }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 14){\n                        \n                    tests['info '] = true;\n                    //tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==3);\n                    tests['monitor_type'] = jsonData.data.info.monitor_type;\n                    tests['resource_id'] = jsonData.data.info.resource_id;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 14){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                \n                if(Object.keys(jsonData.data.summary_details).length==12){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    tests[\"alarm_count\"] = (jsonData.data.summary_details.alarm_count!==null);\n                    \n                }else{\n                    \n                    if(Object.keys(jsonData.data.summary_details).length>12){\n                    \n                         tests[\"new attribute added to port monitor summary_details \"] =false;\n                    \n                    }else{\n                     \n                         tests[\"attribute removed port monitor summary_details \"] =false;   \n                    }\n                }\n            \n            }else{\n        \n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "var response = pm.response.json();\nif (response.code === 0) {\n\n    if (response.error === undefined) {\n\n        pm.test(\"Status code is 200\", function () {\n            pm.expect(pm.response.code).to.eql(200);\n        });\n\n        pm.test(\"code\", function () {\n            pm.expect(response.code).to.eql(0);\n        });\n\n        pm.test(\"message\", function () {\n            pm.expect(response.message).to.eql(\"success\");\n        });\n\n        var nr = response.data || {};\n        if (Object.keys(nr).length > 0) {\n\n            if (nr.info) {\n\n                if (Object.keys(nr.info).length === 14) {\n\n                    pm.test('info ', function () {\n                        pm.expect(true).to.be.true;\n                    });\n\n                    pm.test('resource type', function () {\n                        pm.expect(nr.info.resource_type).to.eql(3);\n                    });\n\n                    pm.test('monitor_type', function () {\n                        pm.expect(nr.info.monitor_type).to.exist;\n                    });\n\n                    pm.test('resource_id', function () {\n                        pm.expect(nr.info.resource_id).to.exist;\n                    });\n\n                    pm.test('formatted_generated_time', function () {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n\n                    pm.test('period', function () {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n\n                    pm.test('start_time', function () {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n\n                    pm.test('generated_time', function () {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n\n                    pm.test('formatted_end_time', function () {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n\n                    pm.test('formatted_start_time', function () {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n\n                    pm.test('period_name', function () {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n\n                    pm.test('resource_type_name', function () {\n                        pm.expect(nr.info.resource_type_name).to.exist;\n                    });\n\n                    pm.test('resource_name', function () {\n                        pm.expect(nr.info.resource_name).to.exist;\n                    });\n\n                    pm.test('end_time', function () {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n\n                } else {\n\n                    pm.test('new attribute added to info', function () {\n                        pm.expect(Object.keys(nr.info).length <= 14).to.be.false;\n                    });\n\n                    pm.test('attribute removed from info', function () {\n                        pm.expect(Object.keys(nr.info).length >= 14).to.be.false;\n                    });\n                }\n\n            } else {\n\n                pm.test('info', function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (nr.summary_details) {\n\n                if (Object.keys(nr.summary_details).length === 12) {\n\n                    pm.test(\"summary_details \", function () {\n                        pm.expect(true).to.be.true;\n                    });\n\n                    pm.test(\"down_count\", function () {\n                        pm.expect(nr.summary_details.down_count).to.not.be.null;\n                    });\n\n                    pm.test(\"downtime_duration\", function () {\n                        pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n                    });\n\n                    pm.test(\"availability_percentage\", function () {\n                        pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n                    });\n\n                    pm.test(\"mtbf\", function () {\n                        pm.expect(nr.summary_details.mtbf).to.not.be.null;\n                    });\n\n                    pm.test(\"unmanaged_duration\", function () {\n                        pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n                    });\n\n                    pm.test(\"mttr\", function () {\n                        pm.expect(nr.summary_details.mttr).to.not.be.null;\n                    });\n\n                    pm.test(\"maintenance_percentage\", function () {\n                        pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n                    });\n\n                    pm.test(\"maintenance_duration\", function () {\n                        pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n                    });\n\n                    pm.test(\"availability_duration\", function () {\n                        pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n                    });\n\n                    pm.test(\"unmanaged_percentage\", function () {\n                        pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n                    });\n\n                    pm.test(\"downtime_percentage\", function () {\n                        pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n                    });\n\n                    pm.test(\"alarm_count\", function () {\n                        pm.expect(nr.summary_details.alarm_count).to.not.be.null;\n                    });\n\n                } else {\n\n                    pm.test(\"new attribute added to port monitor summary_details \", function () {\n                        pm.expect(Object.keys(nr.summary_details).length <= 12).to.be.false;\n                    });\n\n                    pm.test(\"attribute removed port monitor summary_details \", function () {\n                        pm.expect(Object.keys(nr.summary_details).length >= 12).to.be.false;\n                    });\n                }\n\n            } else {\n\n                pm.test(\"summary_details is missing\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "pm.globals.unset(\"avail_mon_id\");\npm.globals.unset(\"avail_mon_type\");\npm.globals.unset(\"avail_group_id\");\npm.globals.unset(\"avail_tag_id\");\npm.globals.unset(\"avail_tag_mon_type\");\npm.globals.unset(\"avail_tag\");",
    "output": "pm.globals.unset(\"avail_mon_id\");\npm.globals.unset(\"avail_mon_type\");\npm.globals.unset(\"avail_group_id\");\npm.globals.unset(\"avail_tag_id\");\npm.globals.unset(\"avail_tag_mon_type\");\npm.globals.unset(\"avail_tag\");"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 11){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==0);\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 11){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                \n                if(Object.keys(jsonData.data.summary_details).length==12){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    tests[\"alarm_count\"] = (jsonData.data.summary_details.alarm_count!==null);\n                    \n                }else{\n                    \n                    if(Object.keys(jsonData.data.summary_details).length>12){\n                    \n                         tests[\"new attribute added to port monitor summary_details \"] =false;\n                    \n                    }else{\n                     \n                         tests[\"attribute removed port monitor summary_details \"] =false;   \n                    }\n                }\n            \n            }else{\n        \n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"code\", function() {\n    pm.expect(response.code).to.eql(0);\n});\n\npm.test(\"message\", function() {\n    pm.expect(response.message).to.eql(\"success\");\n});\n\nif (Object.keys(nr).length > 0) {\n    if (nr.info) {\n        if (Object.keys(nr.info).length === 11) {\n            pm.test(\"info \", function() {\n                pm.expect(true).to.be.true;\n            });\n            pm.test(\"monitor_count\", function() {\n                pm.expect(nr.info.monitor_count).to.exist;\n            });\n            pm.test(\"resource type\", function() {\n                pm.expect(nr.info.resource_type).to.eql(0);\n            });\n            pm.test(\"formatted_generated_time\", function() {\n                pm.expect(nr.info.formatted_generated_time).to.exist;\n            });\n            pm.test(\"period\", function() {\n                pm.expect(nr.info.period).to.exist;\n            });\n            pm.test(\"start_time\", function() {\n                pm.expect(nr.info.start_time).to.exist;\n            });\n            pm.test(\"generated_time\", function() {\n                pm.expect(nr.info.generated_time).to.exist;\n            });\n            pm.test(\"formatted_end_time\", function() {\n                pm.expect(nr.info.formatted_end_time).to.exist;\n            });\n            pm.test(\"formatted_start_time\", function() {\n                pm.expect(nr.info.formatted_start_time).to.exist;\n            });\n            pm.test(\"period_name\", function() {\n                pm.expect(nr.info.period_name).to.exist;\n            });\n            pm.test(\"resource_type_name\", function() {\n                pm.expect(nr.info.resource_type_name).to.exist;\n            });\n            pm.test(\"end_time\", function() {\n                pm.expect(nr.info.end_time).to.exist;\n            });\n        } else {\n            pm.test(\"new attribute added to info\", function() {\n                pm.expect(Object.keys(nr.info).length > 11).to.be.false;\n            });\n            pm.test(\"attribute removed from info\", function() {\n                pm.expect(Object.keys(nr.info).length < 11).to.be.false;\n            });\n        }\n    } else {\n        pm.test(\"info\", function() {\n            pm.expect(false).to.be.false;\n        });\n    }\n    \n    if (nr.summary_details) {\n        if (Object.keys(nr.summary_details).length === 12) {\n            pm.test(\"summary_details \", function() {\n                pm.expect(true).to.be.true;\n            });\n            pm.test(\"down_count\", function() {\n                pm.expect(nr.summary_details.down_count).to.not.be.null;\n            });\n            pm.test(\"downtime_duration\", function() {\n                pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n            });\n            pm.test(\"availability_percentage\", function() {\n                pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n            });\n            pm.test(\"mtbf\", function() {\n                pm.expect(nr.summary_details.mtbf).to.not.be.null;\n            });\n            pm.test(\"unmanaged_duration\", function() {\n                pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n            });\n            pm.test(\"mttr\", function() {\n                pm.expect(nr.summary_details.mttr).to.not.be.null;\n            });\n            pm.test(\"maintenance_percentage\", function() {\n                pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n            });\n            pm.test(\"maintenance_duration\", function() {\n                pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n            });\n            pm.test(\"availability_duration\", function() {\n                pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n            });\n            pm.test(\"unmanaged_percentage\", function() {\n                pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n            });\n            pm.test(\"downtime_percentage\", function() {\n                pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n            });\n            pm.test(\"alarm_count\", function() {\n                pm.expect(nr.summary_details.alarm_count).to.not.be.null;\n            });\n        } else {\n            pm.test(\"new attribute added to port monitor summary_details \", function() {\n                pm.expect(Object.keys(nr.summary_details).length > 12).to.be.false;\n            });\n            pm.test(\"attribute removed port monitor summary_details \", function() {\n                pm.expect(Object.keys(nr.summary_details).length < 12).to.be.false;\n            });\n        }\n    } else {\n        pm.test(\"summary_details is missing\", function() {\n            pm.expect(false).to.be.false;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setGlobalVariable(\"performancereportdetailsford\", function performancereportdetailsford()\n{\n    var jsonData = JSON.parse(responseBody);\n    var resourcetype=(jsonData.data.info.resource_type);\nif (jsonData.code===0)\n{\n   if(jsonData.error === undefined)\n   {\n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        \n        if(jsonData.data.info){\n            if (resourcetype===1)\n            {\n                var infolength=16;\n                var resourcetypename=\"Group\";\n            }\n            if (resourcetype===4)\n            {\n                var infolength=16;\n                var resourcetypename=\"Monitor Type\";\n            }         \n            if (resourcetype===0)\n            {\n                var infolength=14;\n                var resourcetypename=\"All Monitors\";\n            }\n            if(responseBody.has(\"resource_tags\"))\n                {\n                    infolength=infolength+1;\n                }\n            if((Object.keys(jsonData.data.info)).length == infolength){\n                    \n                tests['info node present'] = true;\n                tests['resource type'] = (jsonData.data.info.resource_type==resourcetype);\n                tests['report_type'] = jsonData.data.info.report_type;\n                tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                tests['period'] = jsonData.data.info.period;\n                tests['start_time'] = jsonData.data.info.start_time;\n                tests['generated_time'] = jsonData.data.info.generated_time;\n                tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                tests['period_name'] = jsonData.data.info.period_name;\n                tests['report_name'] = jsonData.data.info.report_name;\n                tests['resource_type_name'] = jsonData.data.info.resource_type_name == resourcetypename;\n                tests['end_time'] = jsonData.data.info.end_time;\n                tests['metric_aggregation_name'] = jsonData.data.info.metric_aggregation_name;\n                tests['metric_aggregation'] = jsonData.data.info.metric_aggregation!=null;\n                if (resourcetype===1)\n                {\n                tests['resource_name'] = jsonData.data.info.resource_name;\n                tests['resource_id'] = jsonData.data.info.resource_id;\n                }\n            \n            }else{\n\n                if((Object.keys(jsonData.data.info)).length > infolength){\n                \n                    tests['new attribute added to info'] = false;\n                    \n                }else{\n                    \n                    tests['attribute removed from info'] = false;\n                }\n                \n            }\n            \n        }else{\n            \n            tests['info'] = false;\n        }\n        \n        if (responseBody.has(\"report_details\") && jsonData.data.report_details.length>0){\n         \n            if (responseBody.has(\"location_info\") && Object.keys(jsonData.data.location_info).length>0){\n            \n                for(var i=0;i<Object.keys(jsonData.data.location_info).length;i++){\n                 \n                    var key = Object.keys(jsonData.data.location_info)[i];\n                    var locObj = jsonData.data.location_info[\"\"+key+\"\"];\n                    \n                    tests[\"locObj >> short_name\"] = (locObj.short_name !== null);\n                    tests[\"locObj >> name\"] = (locObj.name !== null);\n                }\n            }\n            \n            var reportData = jsonData.data.report_details[0];\n            tests[\"name\"] = (reportData.name !== null);\n            tests[\"monitors\"] = (reportData.monitors !== null);\n            tests[\"type\"] = (reportData.type !== null);\n            if(reportData.monitors.length>0){\n                \n                tests[\"name\"] = (reportData.monitors[0].name);\n                tests[\"availability\"] = (reportData.monitors[0].availability>=0 || reportData.monitors[0].availability== '-');\n                tests[\"id\"] = (reportData.monitors[0].id);\n                tests[\"tags\"] = (reportData.monitors[0].tags);\n                \n            }\n        }\n        if (responseBody.has(\"plugin_report_details\") && jsonData.data.plugin_report_details.length>0){\n         \n            var reportData = jsonData.data.plugin_report_details[0];\n            tests[\"name\"] = (reportData.name !== null);\n            tests[\"monitors\"] = (reportData.monitors !== null);\n            tests[\"type\"] = (reportData.type !== null);\n            if(reportData.monitors.length>0){\n                \n                tests[\"name\"] = (reportData.monitors[0].name);\n               tests[\"availability\"] = (reportData.monitors[0].availability>=0 || reportData.monitors[0].availability== '-');\n                tests[\"id\"] = (reportData.monitors[0].id);\n\n            }\n        }\n        if (responseBody.has(\"customapi_report_details\") && jsonData.data.customapi_report_details.length>0){\n         \n            var reportData = jsonData.data.customapi_report_details[0];\n            tests[\"name\"] = (reportData.name !== null);\n            tests[\"monitors\"] = (reportData.monitors !== null);\n            tests[\"type\"] = (reportData.type !== null);\n            if(reportData.monitors.length>0){\n                \n                tests[\"name\"] = (reportData.monitors[0].name);\n                tests[\"availability\"] = (reportData.monitors[0].availability>=0 || reportData.monitors[0].availability== '-');\n                tests[\"id\"] = (reportData.monitors[0].id);\n                \n            }\n        }\n        \n   }else{\n       \n       tests[\"error\"]=false;\n   }\n}\n}+ ' performancereportdetailsford()');",
    "output": "pm.globals.set(\"performancereportdetailsford\", function performancereportdetailsford() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    var resourcetype = (nr.info.resource_type);\n\n    if (response.code === 0) {\n        if (response.error === undefined) {\n            pm.test(\"Status code is 200\", function() {\n                pm.expect(pm.response.code).to.equal(200);\n            });\n            pm.test(\"code\", function() {\n                pm.expect(response.code).to.equal(0);\n            });\n            pm.test(\"message\", function() {\n                pm.expect(response.message).to.equal(\"success\");\n            });\n\n            if (nr.info) {\n                var infolength, resourcetypename;\n                if (resourcetype === 1) {\n                    infolength = 16;\n                    resourcetypename = \"Group\";\n                }\n                if (resourcetype === 4) {\n                    infolength = 16;\n                    resourcetypename = \"Monitor Type\";\n                }\n                if (resourcetype === 0) {\n                    infolength = 14;\n                    resourcetypename = \"All Monitors\";\n                }\n                if (response.hasOwnProperty(\"resource_tags\")) {\n                    infolength = infolength + 1;\n                }\n                if ((Object.keys(nr.info)).length == infolength) {\n                    pm.test('info node present', function() {\n                        pm.expect(true).to.be.true;\n                    });\n                    pm.test('resource type', function() {\n                        pm.expect(nr.info.resource_type).to.equal(resourcetype);\n                    });\n                    pm.test('report_type', function() {\n                        pm.expect(nr.info.report_type).to.exist;\n                    });\n                    pm.test('formatted_generated_time', function() {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n                    pm.test('period', function() {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n                    pm.test('start_time', function() {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n                    pm.test('generated_time', function() {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n                    pm.test('formatted_end_time', function() {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n                    pm.test('formatted_start_time', function() {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n                    pm.test('period_name', function() {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n                    pm.test('report_name', function() {\n                        pm.expect(nr.info.report_name).to.exist;\n                    });\n                    pm.test('resource_type_name', function() {\n                        pm.expect(nr.info.resource_type_name).to.equal(resourcetypename);\n                    });\n                    pm.test('end_time', function() {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n                    pm.test('metric_aggregation_name', function() {\n                        pm.expect(nr.info.metric_aggregation_name).to.exist;\n                    });\n                    pm.test('metric_aggregation', function() {\n                        pm.expect(nr.info.metric_aggregation).to.not.be.null;\n                    });\n                    if (resourcetype === 1) {\n                        pm.test('resource_name', function() {\n                            pm.expect(nr.info.resource_name).to.exist;\n                        });\n                        pm.test('resource_id', function() {\n                            pm.expect(nr.info.resource_id).to.exist;\n                        });\n                    }\n\n                } else {\n                    if ((Object.keys(nr.info)).length > infolength) {\n                        pm.test('new attribute added to info', function() {\n                            pm.expect(false).to.be.false;\n                        });\n                    } else {\n                        pm.test('attribute removed from info', function() {\n                            pm.expect(false).to.be.false;\n                        });\n                    }\n                }\n\n            } else {\n                pm.test('info', function() {\n                    pm.expect(false).to.be.false;\n                });\n            }\n\n            if (response.hasOwnProperty(\"report_details\") && nr.report_details.length > 0) {\n                if (response.hasOwnProperty(\"location_info\") && Object.keys(nr.location_info).length > 0) {\n                    for (var i = 0; i < Object.keys(nr.location_info).length; i++) {\n                        var key = Object.keys(nr.location_info)[i];\n                        var locObj = nr.location_info[\"\" + key + \"\"];\n\n                        pm.test(\"locObj >> short_name\", function() {\n                            pm.expect(locObj.short_name).to.not.be.null;\n                        });\n                        pm.test(\"locObj >> name\", function() {\n                            pm.expect(locObj.name).to.not.be.null;\n                        });\n                    }\n                }\n\n                var reportData = nr.report_details[0];\n                pm.test(\"name\", function() {\n                    pm.expect(reportData.name).to.not.be.null;\n                });\n                pm.test(\"monitors\", function() {\n                    pm.expect(reportData.monitors).to.not.be.null;\n                });\n                pm.test(\"type\", function() {\n                    pm.expect(reportData.type).to.not.be.null;\n                });\n                if (reportData.monitors.length > 0) {\n                    pm.test(\"name\", function() {\n                        pm.expect(reportData.monitors[0].name).to.exist;\n                    });\n                    pm.test(\"availability\", function() {\n                        pm.expect(reportData.monitors[0].availability >= 0 || reportData.monitors[0].availability == '-').to.be.true;\n                    });\n                    pm.test(\"id\", function() {\n                        pm.expect(reportData.monitors[0].id).to.exist;\n                    });\n                    pm.test(\"tags\", function() {\n                        pm.expect(reportData.monitors[0].tags).to.exist;\n                    });\n                }\n            }\n            if (response.hasOwnProperty(\"plugin_report_details\") && nr.plugin_report_details.length > 0) {\n                var reportData = nr.plugin_report_details[0];\n                pm.test(\"name\", function() {\n                    pm.expect(reportData.name).to.not.be.null;\n                });\n                pm.test(\"monitors\", function() {\n                    pm.expect(reportData.monitors).to.not.be.null;\n                });\n                pm.test(\"type\", function() {\n                    pm.expect(reportData.type).to.not.be.null;\n                });\n                if (reportData.monitors.length > 0) {\n                    pm.test(\"name\", function() {\n                        pm.expect(reportData.monitors[0].name).to.exist;\n                    });\n                    pm.test(\"availability\", function() {\n                        pm.expect(reportData.monitors[0].availability >= 0 || reportData.monitors[0].availability == '-').to.be.true;\n                    });\n                    pm.test(\"id\", function() {\n                        pm.expect(reportData.monitors[0].id).to.exist;\n                    });\n                }\n            }\n            if (response.hasOwnProperty(\"customapi_report_details\") && nr.customapi_report_details.length > 0) {\n                var reportData = nr.customapi_report_details[0];\n                pm.test(\"name\", function() {\n                    pm.expect(reportData.name).to.not.be.null;\n                });\n                pm.test(\"monitors\", function() {\n                    pm.expect(reportData.monitors).to.not.be.null;\n                });\n                pm.test(\"type\", function() {\n                    pm.expect(reportData.type).to.not.be.null;\n                });\n                if (reportData.monitors.length > 0) {\n                    pm.test(\"name\", function() {\n                        pm.expect(reportData.monitors[0].name).to.exist;\n                    });\n                    pm.test(\"availability\", function() {\n                        pm.expect(reportData.monitors[0].availability >= 0 || reportData.monitors[0].availability == '-').to.be.true;\n                    });\n                    pm.test(\"id\", function() {\n                        pm.expect(reportData.monitors[0].id).to.exist;\n                    });\n                }\n            }\n\n        } else {\n            pm.test(\"error\", function() {\n                pm.expect(false).to.be.false;\n            });\n        }\n    }\n} + ' performancereportdetailsford()');"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "// postman.clearGlobalVariable(\"var1\");\n// postman.clearGlobalVariable(\"var\");\n// postman.clearGlobalVariable(\"domain\");\n// postman.clearGlobalVariable(\"date\");\n\npostman.clearGlobalVariable(\"monitorGroupIdForReport\");\npostman.clearGlobalVariable(\"monTypeForReport\");\n\npostman.setGlobalVariable(\"monTypeForReport\",\"URL\");",
    "output": "pm.globals.unset(\"monitorGroupIdForReport\");\npm.globals.unset(\"monTypeForReport\");\n\npm.globals.set(\"monTypeForReport\", \"URL\");"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar jsonData = JSON.parse(responseBody);\nfor (var i=0;i<jsonData.data.length;i++)\n{\n    if(undefined !== jsonData.data[i].monitors)\n    {\n        var monitorGroupId =jsonData.data[i].group_id;\n        postman.setGlobalVariable(\"monitorGroupIdForReport\",monitorGroupId);\n        break;\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\nfor (var i = 0; i < nr.length; i++) {\n    if (nr[i].hasOwnProperty('monitors')) {\n        var monitorGroupId = nr[i].group_id;\n        pm.globals.set(\"monitorGroupIdForReport\", monitorGroupId);\n        break;\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.performancereportdetailsford);",
    "output": "var funcUtils = eval(globals.performancereportdetailsford);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.performancereportdetailsford);",
    "output": "var funcUtils = eval(globals.performancereportdetailsford);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.performancereportdetailsford);",
    "output": "var funcUtils = eval(globals.performancereportdetailsford);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.performancereportdetailsford);",
    "output": "var funcUtils = eval(globals.performancereportdetailsford);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.performancereportdetailsford);",
    "output": "var funcUtils = eval(globals.performancereportdetailsford);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.performancereportdetailsford);",
    "output": "var funcUtils = eval(globals.performancereportdetailsford);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nvar monitorList = jsonData.data.monitors;\nfor(var i in monitorList)\n{\n    var monitor = monitorList[i];\n    if(monitor.monitor_type=='URL' && monitor.status==1 && monitor.attribute_value!='-')\n    {\n        postman.setEnvironmentVariable(\"getUrlMonitor\", monitor.monitor_id);\n        \n    }\n    if(monitor.monitor_type=='SMTP' && monitor.status==1 && monitor.attribute_value!='-'){\n        postman.setEnvironmentVariable(\"getSmtpMonitor\", monitor.monitor_id);\n       \n        \n    }\n    if(monitor.monitor_type=='SERVER' && (monitor.status==1 || monitor.status==2 || monitor.status==7) && monitor.attribute_value!='-'){\n        postman.setEnvironmentVariable(\"getServerMonitor\", monitor.monitor_id);\n        \n    }\n    if(monitor.monitor_type === 'REALBROWSER' &&  (monitor.status === 1 ||  monitor.status==2))\n    {\n        postman.setGlobalVariable(\"getRBMMid\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'DNS' &&  (monitor.status === 1 ||  monitor.status==2))\n    {\n        postman.setGlobalVariable(\"getDNSMonitor\", monitor.monitor_id);\n    }\n    \n    if(monitor.monitor_type === 'HOMEPAGE' && (monitor.status === 1 ||  monitor.status==2))\n    {\n        postman.setGlobalVariable(\"getHOMEPAGEMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'PORT' && (monitor.status === 1 ||  monitor.status==2))\n    {\n        postman.setGlobalVariable(\"getPORTMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'UDP' && (monitor.status === 1 ||  monitor.status==2))\n    {\n        postman.setGlobalVariable(\"getUDPMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'PORT-POP' && (monitor.status === 1 ||  monitor.status==2))\n    {\n        postman.setGlobalVariable(\"getPOPMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'PING' && (monitor.status === 1 ||  monitor.status==2))\n    {\n        postman.setGlobalVariable(\"getPINGMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'PORT-SMTP' && (monitor.status === 1 ||  monitor.status==2)&& monitor.attribute_value!='-')\n    {\n        postman.setGlobalVariable(\"getPORT_SMTPMonitor\", monitor.monitor_id);\n    }\n    if(monitor.monitor_type === 'FILEUPLOAD' && (monitor.status === 1 ||  monitor.status==2)&& monitor.attribute_value!='-')\n    {\n        postman.setGlobalVariable(\"getFILEUPLOADMonitor\", monitor.monitor_id);\n    }\n    \n}\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\nvar monitorList = nr.monitors;\n\nfor (var i in monitorList) {\n    var monitor = monitorList[i];\n    if (monitor.monitor_type === 'URL' && monitor.status === 1 && monitor.attribute_value !== '-') {\n        pm.environment.set(\"getUrlMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'SMTP' && monitor.status === 1 && monitor.attribute_value !== '-') {\n        pm.environment.set(\"getSmtpMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'SERVER' && (monitor.status === 1 || monitor.status === 2 || monitor.status === 7) && monitor.attribute_value !== '-') {\n        pm.environment.set(\"getServerMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'REALBROWSER' && (monitor.status === 1 || monitor.status === 2)) {\n        pm.globals.set(\"getRBMMid\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'DNS' && (monitor.status === 1 || monitor.status === 2)) {\n        pm.globals.set(\"getDNSMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'HOMEPAGE' && (monitor.status === 1 || monitor.status === 2)) {\n        pm.globals.set(\"getHOMEPAGEMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'PORT' && (monitor.status === 1 || monitor.status === 2)) {\n        pm.globals.set(\"getPORTMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'UDP' && (monitor.status === 1 || monitor.status === 2)) {\n        pm.globals.set(\"getUDPMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'PORT-POP' && (monitor.status === 1 || monitor.status === 2)) {\n        pm.globals.set(\"getPOPMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'PING' && (monitor.status === 1 || monitor.status === 2)) {\n        pm.globals.set(\"getPINGMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'PORT-SMTP' && (monitor.status === 1 || monitor.status === 2) && monitor.attribute_value !== '-') {\n        pm.globals.set(\"getPORT_SMTPMonitor\", monitor.monitor_id);\n    }\n    if (monitor.monitor_type === 'FILEUPLOAD' && (monitor.status === 1 || monitor.status === 2) && monitor.attribute_value !== '-') {\n        pm.globals.set(\"getFILEUPLOADMonitor\", monitor.monitor_id);\n    }\n}\n\npm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var myDate = new Date();  \nvar year = myDate.getFullYear(); \nvar month = myDate.getMonth()+1; \nvar day= myDate.getDate(); \nvar currentDate=null; \nif(day <= 9)\n{     day = '0'+day; } \nif(month<=9)\n{ month = '0'+month; } \nvar currentDate =year + \"-\" + month + \"-\" + day;\npostman.setGlobalVariable('date',currentDate);",
    "output": "pm.globals.set('date', (function() {\n    var myDate = new Date();\n    var year = myDate.getFullYear();\n    var month = myDate.getMonth() + 1;\n    var day = myDate.getDate();\n    if (day <= 9) { day = '0' + day; }\n    if (month <= 9) { month = '0' + month; }\n    return year + \"-\" + month + \"-\" + day;\n})());"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getUrlMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\npm.globals.set(\"getUrlMonitorlocationprofile\", nr.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n     if (response.data[i].profile_id === globals.getUrlMonitorlocationprofile)\n { \n     tests[\"if\"] = responseCode.code === 200;\n     postman.setEnvironmentVariable(\"getUrlMonitorprimarylocation\", response.data[i].primary_location);\n \n }\n \n }",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar j = nr.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    if (nr[i].profile_id === pm.globals.get(\"getUrlMonitorlocationprofile\")) {\n        pm.test(\"if\", function() {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.environment.set(\"getUrlMonitorprimarylocation\", nr[i].primary_location);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Info data validation\nif (responseBody.has(\"info\")) {\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"metric_aggregation_name\"] = responseBody.has(\"metric_aggregation_name\");\n    tests[\"metric_aggregation\"] = responseBody.has(\"metric_aggregation\");\n    tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n}\nelse { tests[\"info is missing\"] = responseBody.has(\"info\"); }\n\n// table_data validation\nif (responseBody.has(\"table_data\")) {\n    tests[\"table_data\"] = responseBody.has(\"table_data\") && response.data.table_data !== null;\n\n}\nelse { tests[\"table_data is missing\"] = responseBody.has(\"table_data\"); }",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Info data validation\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function() {\n        pm.expect(response.hasOwnProperty(\"resource_name\")).to.be.true;\n    });\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"resource_type_name\", function() {\n        pm.expect(nr.info.resource_type_name).to.equal('Monitor');\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(response.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(response.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"segment_type\", function() {\n        pm.expect(response.hasOwnProperty(\"segment_type\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"resource type\", function() {\n        pm.expect(nr.info.resource_type).to.equal(2);\n    });\n    pm.test(\"period\", function() {\n        pm.expect(response.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(response.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n    pm.test(\"segment_type_name\", function() {\n        pm.expect(response.hasOwnProperty(\"segment_type_name\")).to.be.true;\n    });\n    pm.test(\"metric_aggregation_name\", function() {\n        pm.expect(response.hasOwnProperty(\"metric_aggregation_name\")).to.be.true;\n    });\n    pm.test(\"metric_aggregation\", function() {\n        pm.expect(response.hasOwnProperty(\"metric_aggregation\")).to.be.true;\n    });\n    pm.test(\"resource_tags\", function() {\n        pm.expect(response.hasOwnProperty(\"resource_tags\")).to.be.true;\n    });\n} else {\n    pm.test(\"info is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.false;\n    });\n}\n\n// table_data validation\nif (response.hasOwnProperty(\"table_data\")) {\n    pm.test(\"table_data\", function() {\n        pm.expect(response.hasOwnProperty(\"table_data\") && nr.table_data !== null).to.be.true;\n    });\n} else {\n    pm.test(\"table_data is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"table_data\")).to.be.false;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getSMTPMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.globals.set(\"getSMTPMonitorlocationprofile\", nr.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n     if (response.data[i].profile_id === globals.getSMTPMonitorlocationprofile)\n {  tests[\"if\"] = responseCode.code === 200;\n  postman.setGlobalVariable(\"getSMTPMonitorprimarylocation\", response.data[i].primary_location);\n \n }\n \n }",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar j = nr.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    if (nr[i].profile_id === pm.globals.get(\"getSMTPMonitorlocationprofile\")) {\n        pm.test(\"if\", function() {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.globals.set(\"getSMTPMonitorprimarylocation\", nr[i].primary_location);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"metric_aggregation_name\"] = responseBody.has(\"metric_aggregation_name\");\n    tests[\"metric_aggregation\"] = responseBody.has(\"metric_aggregation\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n// table_data validation\nif(responseBody.has(\"table_data\"))\n{\n    tests[\"table_data\"] = responseBody.has(\"table_data\") && response.data.table_data !== null;\n    tests[\"table_data response\"] = responseBody.has('RESPONSETIME\":{') && response.data.table_data.RESPONSETIME !== null ;\n    tests[\"table_data max\"] = responseBody.has('max') && response.data.table_data[globals.getSMTPMonitorprimarylocation].RESPONSETIME.max !== null ;\n    tests[\"table_data min\"] = responseBody.has('min') && response.data.table_data[globals.getSMTPMonitorprimarylocation].RESPONSETIME.min !== null ;\n    tests[\"table_data average\"] = responseBody.has('average') && response.data.table_data[globals.getSMTPMonitorprimarylocation].RESPONSETIME.average !== null ;\n    tests[\"table_data unit\"] = responseBody.has('unit') && response.data.table_data[globals.getSMTPMonitorprimarylocation].RESPONSETIME.unit !== null ;\n    tests[\"table_data average_description\"] = responseBody.has('average_description') && response.data.table_data[globals.getSMTPMonitorprimarylocation].RESPONSETIME.average_description !== null ;\n    tests[\"table_data title\"] = responseBody.has('title') && response.data.table_data[globals.getSMTPMonitorprimarylocation].RESPONSETIME.title !== null ;\n    tests[\"table_data chart_data\"] = responseBody.has('chart_data\":[') && response.data.table_data[globals.getSMTPMonitorprimarylocation].RESPONSETIME.chart_data !== null ;\n\n}\nelse\n{tests[\"table_data is missing\"] = responseBody.has(\"table_data\");}\n\n// chart_data validation\nif(responseBody.has(\"chart_data\"))\nif(responseBody.has(\"chart_data\"))\n{\n    tests[\"chart_data\"] = responseBody.has(\"chart_data\") && response.data.chart_data !== null;\n    tests[\"chart_data ResponseTimeChart \"] = responseBody.has('ResponseTimeChart\":[') && response.data.chart_data[0].ResponseTimeChart !== null ;\n    tests[\"chart_data ResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[0].ResponseTimeChart[0][globals.getSMTPMonitorprimarylocation].max !== null ;\n    tests[\"chart_data ResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getSMTPMonitorprimarylocation].min !== null ;\n    tests[\"chart_data ResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getSMTPMonitorprimarylocation].label !== null ;\n    tests[\"chart_data ResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getSMTPMonitorprimarylocation].average !== null ;\n   //tests[\"chart_data ResponseTimeChart 95_percentile\"] = response.data.chart_data[0].ResponseTimeChart[0][globals.getSMTPMonitorprimarylocation].95_percentile !== null ;\n    tests[\"chart_data ResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getSMTPMonitorprimarylocation].chart_data !== null ;\n    // Location Response time charts\n    tests[\"chart_data LocationResponseTimeChart\"] = responseBody.has('LocationResponseTimeChart\":[') && response.data.chart_data[1].LocationResponseTimeChart !== null ;\n    //tests[\"chart_data LocationResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[1].LocationResponseTimeChart[1][globals.getSMTPMonitorprimarylocation].max !== null ;\n    //tests[\"chart_data LocationResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getSMTPMonitorprimarylocation].min !== null ;\n   // tests[\"chart_data LocationResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getSMTPMonitorprimarylocation].label !== null ;\n   // tests[\"chart_data LocationResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getSMTPMonitorprimarylocation].average !== null ;\n   //tests[\"chart_data ResponseTimeChart 95_percentile\"] = response.data.chart_data[0].ResponseTimeChart[0][globals.getSMTPMonitorprimarylocation].95_percentile !== null ;\n   // tests[\"chart_data LocationResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getSMTPMonitorprimarylocation].chart_data !== null ;\n    \n    \n}\nelse\n{tests[\"chart_data is missing\"] = responseBody.has(\"chart_data\");}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nconst response = pm.response.json();\nconst data = response.data || {};\nconst location = pm.globals.get(\"getSMTPMonitorprimarylocation\");\n\n// ðŸ”Ž Info section checks\nif (data.hasOwnProperty(\"info\")) {\n    pm.test(\"Info > resource_name exists\", () => pm.expect(data.info).to.have.property(\"resource_name\"));\n    pm.test(\"Info > end_time exists\", () => pm.expect(data.info).to.have.property(\"end_time\"));\n    pm.test(\"Info > resource_type_name == Monitor\", () => pm.expect(data.info.resource_type_name).to.eql(\"Monitor\"));\n    pm.test(\"Info > report_name exists\", () => pm.expect(data.info).to.have.property(\"report_name\"));\n    pm.test(\"Info > period_name exists\", () => pm.expect(data.info).to.have.property(\"period_name\"));\n    pm.test(\"Info > formatted_start_time exists\", () => pm.expect(data.info).to.have.property(\"formatted_start_time\"));\n    pm.test(\"Info > generated_time exists\", () => pm.expect(data.info).to.have.property(\"generated_time\"));\n    pm.test(\"Info > formatted_end_time exists\", () => pm.expect(data.info).to.have.property(\"formatted_end_time\"));\n    pm.test(\"Info > segment_type exists\", () => pm.expect(data.info).to.have.property(\"segment_type\"));\n    pm.test(\"Info > start_time exists\", () => pm.expect(data.info).to.have.property(\"start_time\"));\n    pm.test(\"Info > resource_type == 2\", () => pm.expect(data.info.resource_type).to.eql(2));\n    pm.test(\"Info > period exists\", () => pm.expect(data.info).to.have.property(\"period\"));\n    pm.test(\"Info > formatted_generated_time exists\", () => pm.expect(data.info).to.have.property(\"formatted_generated_time\"));\n    pm.test(\"Info > report_type exists\", () => pm.expect(data.info).to.have.property(\"report_type\"));\n    pm.test(\"Info > segment_type_name exists\", () => pm.expect(data.info).to.have.property(\"segment_type_name\"));\n    pm.test(\"Info > metric_aggregation_name exists\", () => pm.expect(data.info).to.have.property(\"metric_aggregation_name\"));\n    pm.test(\"Info > metric_aggregation exists\", () => pm.expect(data.info).to.have.property(\"metric_aggregation\"));\n\n    if (data.hasOwnProperty(\"resource_tags\")) {\n        pm.test(\"Info > resource_tags exists\", () => pm.expect(data).to.have.property(\"resource_tags\"));\n    }\n} else {\n    pm.test(\"Info is missing\", () => pm.expect(false, \"Missing 'info'\").to.be.true);\n}\n\n// ðŸ§¾ Table Data validation\nif (data.hasOwnProperty(\"table_data\")) {\n    const tdata = data.table_data;\n    pm.test(\"table_data exists\", () => pm.expect(tdata).to.not.be.null);\n    pm.test(\"table_data > RESPONSETIME exists\", () => pm.expect(tdata[location]).to.have.property(\"RESPONSETIME\"));\n\n    const rt = tdata[location]?.RESPONSETIME || {};\n    pm.test(\"table_data > max exists\", () => pm.expect(rt).to.have.property(\"max\"));\n    pm.test(\"table_data > min exists\", () => pm.expect(rt).to.have.property(\"min\"));\n    pm.test(\"table_data > average exists\", () => pm.expect(rt).to.have.property(\"average\"));\n    pm.test(\"table_data > unit exists\", () => pm.expect(rt).to.have.property(\"unit\"));\n    pm.test(\"table_data > average_description exists\", () => pm.expect(rt).to.have.property(\"average_description\"));\n    pm.test(\"table_data > title exists\", () => pm.expect(rt).to.have.property(\"title\"));\n    pm.test(\"table_data > chart_data exists\", () => pm.expect(rt).to.have.property(\"chart_data\"));\n} else {\n    pm.test(\"table_data is missing\", () => pm.expect(false, \"Missing 'table_data'\").to.be.true);\n}\n\n// ðŸ“Š Chart Data validation\nif (data.hasOwnProperty(\"chart_data\")) {\n    const chart = data.chart_data;\n    const rtc = chart[0]?.ResponseTimeChart?.[0]?.[location] || {};\n    const lrtc = chart[1]?.LocationResponseTimeChart?.[1]?.[location] || {};\n\n    pm.test(\"chart_data exists\", () => pm.expect(chart).to.not.be.null);\n    pm.test(\"chart_data > ResponseTimeChart exists\", () => pm.expect(chart[0]).to.have.property(\"ResponseTimeChart\"));\n\n    pm.test(\"ResponseTimeChart > max exists\", () => pm.expect(rtc).to.have.property(\"max\"));\n    pm.test(\"ResponseTimeChart > min exists\", () => pm.expect(rtc).to.have.property(\"min\"));\n    pm.test(\"ResponseTimeChart > label exists\", () => pm.expect(rtc).to.have.property(\"label\"));\n    pm.test(\"ResponseTimeChart > average exists\", () => pm.expect(rtc).to.have.property(\"average\"));\n    pm.test(\"ResponseTimeChart > chart_data exists\", () => pm.expect(rtc).to.have.property(\"chart_data\"));\n\n    pm.test(\"LocationResponseTimeChart exists\", () => pm.expect(chart[1]).to.have.property(\"LocationResponseTimeChart\"));\n    \n    // ðŸ”’ Optional: Uncomment below if LocationResponseTimeChart values are expected:\n    // pm.test(\"LocationResponseTimeChart > max exists\", () => pm.expect(lrtc).to.have.property(\"max\"));\n    // pm.test(\"LocationResponseTimeChart > chart_data exists\", () => pm.expect(lrtc).to.have.property(\"chart_data\"));\n} else {\n    pm.test(\"chart_data is missing\", () => pm.expect(false, \"Missing 'chart_data'\").to.be.true);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nvar monitorList = responseData.data.monitors;\npostman.clearGlobalVariable(\"rbmLocProfileId\");\nif(responseData.data.location_profile_id !== null)\n{\n    postman.setGlobalVariable(\"rbmLocProfileId\", responseData.data.location_profile_id);\n}\n tests[postman.getGlobalVariable(\"rbmLocProfileId\")] = postman.getGlobalVariable(\"rbmLocProfileId\") !== null;",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar monitorList = nr.monitors;\n\npm.globals.unset(\"rbmLocProfileId\");\nif(nr.location_profile_id !== null) {\n    pm.globals.set(\"rbmLocProfileId\", nr.location_profile_id);\n}\n\npm.test(pm.globals.get(\"rbmLocProfileId\"), function() {\n    pm.expect(pm.globals.get(\"rbmLocProfileId\")).to.not.be.null;\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nvar monitorList = responseData.data.monitors;\npostman.clearGlobalVariable(\"rbmLocId\");\nif(responseData.data.primary_location !== null)\n{\n    postman.setGlobalVariable(\"rbmLocId\", responseData.data.primary_location);\n}\ntests[postman.getGlobalVariable(\"rbmLocId\")] = postman.getGlobalVariable(\"rbmLocId\") !== null;",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar monitorList = response.data.monitors;\n\npm.globals.unset(\"rbmLocId\");\nif(response.data.primary_location !== null) {\n    pm.globals.set(\"rbmLocId\", response.data.primary_location);\n}\n\npm.test(pm.globals.get(\"rbmLocId\"), function() {\n    pm.expect(pm.globals.get(\"rbmLocId\")).to.not.be.null;\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nvar locId = postman.getGlobalVariable(\"rbmLocId\");\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseData.data.info.resource_name!== null;\n    tests[\"end_time\"] = responseData.data.info.end_time!== null;\n    tests[\"resource_type_name\"] = responseData.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseData.data.info.report_name!== null;\n    tests[\"period_name\"] = responseData.data.info.period_name!== null;\n    tests[\"formatted_start_time\"] = responseData.data.info.formatted_start_time!== null;\n    tests[\"formatted_end_time\"] = responseData.data.info.formatted_end_time!== null;\n    tests[\"generated_time\"] = responseData.data.info.generated_time!== null;\n    tests[\"start_time\"] = responseData.data.info.start_time!== null;\n    tests[\"segment_type\"] = responseData.data.info.segment_type!== null;\n    tests[\"period\"] = responseData.data.info.period!== null;\n    tests[\"formatted_generated_time\"] = responseData.data.info.formatted_generated_time!== null;\n    tests[\"resource_id\"] = responseData.data.info.resource_id!== null;\n    tests[\"report_type\"] = responseData.data.info.report_type!== null;\n    tests[\"monitor_type\"] = responseData.data.info.monitor_type!== null;\n    tests[\"resource_type\"] = responseData.data.info.resource_type == 2;\n    tests[\"segment_type_name\"] = responseData.data.info.segment_type_name!== null;\n    tests[\"metric_aggregation_name\"] = responseBody.has(\"metric_aggregation_name\");\n    tests[\"metric_aggregation\"] = responseBody.has(\"metric_aggregation\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n\n}\ntests[\"table_data\"] = responseBody.has(\"table_data\") && responseData.data.table_data !== null;\nif(responseBody.has(\"table_data\"))\n{\n    var locData = responseData.data.table_data[locId];\n    if(locData[\"RESPONSETIME\"] !== null)\n    {\n        tests[\"locId_\"+locId+\"_RESPONSETIME\"] = locData[\"RESPONSETIME\"] !== null;\n        tests[\"locId_\"+locId+\"_max\"] = locData[\"RESPONSETIME\"][\"max\"] !== null;\n        tests[\"locId_\"+locId+\"_min\"] = locData[\"RESPONSETIME\"][\"min\"] !== null;\n        tests[\"locId_\"+locId+\"_average\"] = locData[\"RESPONSETIME\"][\"average\"] !== null;\n        tests[\"locId_\"+locId+\"_unit\"] = locData[\"RESPONSETIME\"][\"unit\"] !== null;\n        tests[\"locId_\"+locId+\"_average_description\"] = locData[\"RESPONSETIME\"][\"average_description\"] !== null;\n        tests[\"locId_\"+locId+\"_title\"] = locData[\"RESPONSETIME\"][\"title\"] !== null;\n        tests[\"locId_\"+locId+\"_chart_data\"] = locData[\"RESPONSETIME\"][\"chart_data\"] !== null;\n    }\n}\ntests[\"chart_data\"] = responseBody.has(\"chart_data\") && responseData.data.chart_data !== null;\nif(responseBody.has(\"chart_data\"))\n{\n    for(i = 0; i< responseData.data.chart_data.length; i++)\n    {\n        tests[\"chart_data_ResponseTimeAreaChart\"] = responseData.data.chart_data[i].ResponseTimeAreaChart !== null;\n        tests[\"chart_data_LocataionResponseTimeChart\"] = responseData.data.chart_data[i].LocationResponseTimeChart !== null;\n    }\n\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nconst responseData = pm.response.json();\nconst data = responseData.data || {};\nconst locId = pm.globals.get(\"rbmLocId\");\n\n// Info section\npm.test(\"info exists\", function () {\n    pm.expect(data).to.have.property(\"info\");\n});\n\nif (data.info) {\n    pm.test(\"resource_name exists\", () => pm.expect(data.info.resource_name).to.not.be.null);\n    pm.test(\"end_time exists\", () => pm.expect(data.info.end_time).to.not.be.null);\n    pm.test(\"resource_type_name is Monitor\", () => pm.expect(data.info.resource_type_name).to.equal(\"Monitor\"));\n    pm.test(\"report_name exists\", () => pm.expect(data.info.report_name).to.not.be.null);\n    pm.test(\"period_name exists\", () => pm.expect(data.info.period_name).to.not.be.null);\n    pm.test(\"formatted_start_time exists\", () => pm.expect(data.info.formatted_start_time).to.not.be.null);\n    pm.test(\"formatted_end_time exists\", () => pm.expect(data.info.formatted_end_time).to.not.be.null);\n    pm.test(\"generated_time exists\", () => pm.expect(data.info.generated_time).to.not.be.null);\n    pm.test(\"start_time exists\", () => pm.expect(data.info.start_time).to.not.be.null);\n    pm.test(\"segment_type exists\", () => pm.expect(data.info.segment_type).to.not.be.null);\n    pm.test(\"period exists\", () => pm.expect(data.info.period).to.not.be.null);\n    pm.test(\"formatted_generated_time exists\", () => pm.expect(data.info.formatted_generated_time).to.not.be.null);\n    pm.test(\"resource_id exists\", () => pm.expect(data.info.resource_id).to.not.be.null);\n    pm.test(\"report_type exists\", () => pm.expect(data.info.report_type).to.not.be.null);\n    pm.test(\"monitor_type exists\", () => pm.expect(data.info.monitor_type).to.not.be.null);\n    pm.test(\"resource_type is 2\", () => pm.expect(data.info.resource_type).to.equal(2));\n    pm.test(\"segment_type_name exists\", () => pm.expect(data.info.segment_type_name).to.not.be.null);\n    pm.test(\"metric_aggregation_name exists\", () => pm.expect(data).to.have.property(\"metric_aggregation_name\"));\n    pm.test(\"metric_aggregation exists\", () => pm.expect(data).to.have.property(\"metric_aggregation\"));\n    \n    if (data.hasOwnProperty(\"resource_tags\")) {\n        pm.test(\"resource_tags exists\", () => pm.expect(data).to.have.property(\"resource_tags\"));\n    }\n}\n\n// Table data section\npm.test(\"table_data exists\", () => pm.expect(data).to.have.property(\"table_data\"));\n\nif (data.table_data && data.table_data[locId]) {\n    const locData = data.table_data[locId];\n    const rt = locData[\"RESPONSETIME\"];\n\n    if (rt) {\n        pm.test(`locId_${locId}_RESPONSETIME exists`, () => pm.expect(rt).to.not.be.null);\n        pm.test(`locId_${locId}_max exists`, () => pm.expect(rt.max).to.not.be.null);\n        pm.test(`locId_${locId}_min exists`, () => pm.expect(rt.min).to.not.be.null);\n        pm.test(`locId_${locId}_average exists`, () => pm.expect(rt.average).to.not.be.null);\n        pm.test(`locId_${locId}_unit exists`, () => pm.expect(rt.unit).to.not.be.null);\n        pm.test(`locId_${locId}_average_description exists`, () => pm.expect(rt.average_description).to.not.be.null);\n        pm.test(`locId_${locId}_title exists`, () => pm.expect(rt.title).to.not.be.null);\n        pm.test(`locId_${locId}_chart_data exists`, () => pm.expect(rt.chart_data).to.not.be.null);\n    }\n}\n\n// Chart data section\npm.test(\"chart_data exists\", () => pm.expect(data).to.have.property(\"chart_data\"));\n\nif (Array.isArray(data.chart_data)) {\n    data.chart_data.forEach((chart, i) => {\n        pm.test(`chart_data[${i}] ResponseTimeAreaChart exists`, () => \n            pm.expect(chart.ResponseTimeAreaChart).to.not.be.null);\n        pm.test(`chart_data[${i}] LocationResponseTimeChart exists`, () => \n            pm.expect(chart.LocationResponseTimeChart).to.not.be.null);\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setGlobalVariable(\"rbmmid\",postman.getGlobalVariable(\"getRBMMid\"));",
    "output": "pm.globals.set(\"rbmmid\", pm.globals.get(\"getRBMMid\"));"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getFileUploadMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.globals.set(\"getFileUploadMonitorlocationprofile\", nr.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n\n     tests[\"if\"] = responseCode.code === 200;\n     postman.setEnvironmentVariable(\"getFILEUPLOADprimarylocation\", response.data[i].primary_location);\n\n \n }",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar j = response.data.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    pm.test(\"if\", function () {\n        pm.expect(pm.response.code).to.equal(200);\n    });\n    pm.environment.set(\"getFILEUPLOADprimarylocation\", response.data[i].primary_location);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Info data validation\nif (responseBody.has(\"info\")) {\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"metric_aggregation_name\"] = responseBody.has(\"metric_aggregation_name\");\n    tests[\"metric_aggregation\"] = responseBody.has(\"metric_aggregation\");\n}\nelse { tests[\"info is missing\"] = responseBody.has(\"info\"); }\n\n// table_data validation\nif (responseBody.has(\"table_data\")) {\n    tests[\"table_data\"] = responseBody.has(\"table_data\") && response.data.table_data !== null;\n\n}\nelse { tests[\"table_data is missing\"] = responseBody.has(\"table_data\"); }",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\n\n// Info validation\nif (nr.hasOwnProperty(\"info\")) {\n    const info = nr.info;\n\n    pm.test(\"resource_name exists\", function () {\n        pm.expect(info.resource_name).to.not.be.undefined;\n    });\n\n    pm.test(\"end_time exists\", function () {\n        pm.expect(info.end_time).to.not.be.undefined;\n    });\n\n    pm.test(\"resource_type_name is 'Monitor'\", function () {\n        pm.expect(info.resource_type_name).to.equal(\"Monitor\");\n    });\n\n    pm.test(\"report_name exists\", function () {\n        pm.expect(info.report_name).to.not.be.undefined;\n    });\n\n    pm.test(\"period_name exists\", function () {\n        pm.expect(info.period_name).to.not.be.undefined;\n    });\n\n    pm.test(\"formatted_start_time exists\", function () {\n        pm.expect(info.formatted_start_time).to.not.be.undefined;\n    });\n\n    pm.test(\"generated_time exists\", function () {\n        pm.expect(info.generated_time).to.not.be.undefined;\n    });\n\n    pm.test(\"formatted_end_time exists\", function () {\n        pm.expect(info.formatted_end_time).to.not.be.undefined;\n    });\n\n    pm.test(\"segment_type exists\", function () {\n        pm.expect(info.segment_type).to.not.be.undefined;\n    });\n\n    pm.test(\"start_time exists\", function () {\n        pm.expect(info.start_time).to.not.be.undefined;\n    });\n\n    pm.test(\"resource_type === 2\", function () {\n        pm.expect(info.resource_type).to.equal(2);\n    });\n\n    pm.test(\"period exists\", function () {\n        pm.expect(info.period).to.not.be.undefined;\n    });\n\n    pm.test(\"formatted_generated_time exists\", function () {\n        pm.expect(info.formatted_generated_time).to.not.be.undefined;\n    });\n\n    pm.test(\"report_type exists\", function () {\n        pm.expect(info.report_type).to.not.be.undefined;\n    });\n\n    pm.test(\"segment_type_name exists\", function () {\n        pm.expect(info.segment_type_name).to.not.be.undefined;\n    });\n\n    // These two are on the root-level response, not in response.data\n    pm.test(\"metric_aggregation_name exists\", function () {\n        pm.expect(response).to.have.property(\"metric_aggregation_name\");\n    });\n\n    pm.test(\"metric_aggregation exists\", function () {\n        pm.expect(response).to.have.property(\"metric_aggregation\");\n    });\n\n    if (response.hasOwnProperty(\"resource_tags\")) {\n        pm.test(\"resource_tags exists\", function () {\n            pm.expect(response.resource_tags).to.not.be.undefined;\n        });\n    }\n\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"info\")).to.be.true; // this will fail visibly\n    });\n}\n\n// table_data validation\nif (nr.hasOwnProperty(\"table_data\")) {\n    pm.test(\"table_data exists\", function () {\n        pm.expect(nr.table_data).to.not.be.null;\n    });\n} else {\n    pm.test(\"table_data is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"table_data\")).to.be.true;\n    });\n}\n\n// chart_data validation\nif (nr.hasOwnProperty(\"chart_data\")) {\n    pm.test(\"chart_data exists\", function () {\n        pm.expect(nr.chart_data).to.not.be.null;\n    });\n\n    for (let i = 0; i < nr.chart_data.length; i++) {\n        pm.test(`chart_data[${i}].ResponseTimeAreaChart exists`, function () {\n            pm.expect(nr.chart_data[i].ResponseTimeAreaChart).to.not.be.undefined;\n        });\n\n        pm.test(`chart_data[${i}].LocationResponseTimeChart exists`, function () {\n            pm.expect(nr.chart_data[i].LocationResponseTimeChart).to.not.be.undefined;\n        });\n    }\n} else {\n    pm.test(\"chart_data is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"chart_data\")).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setGlobalVariable(\"rbmmid\",postman.getGlobalVariable(\"getRBMMid\"));",
    "output": "pm.globals.set(\"rbmmid\", pm.globals.get(\"getRBMMid\"));"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getDNSMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.globals.set(\"getDNSMonitorlocationprofile\", nr.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n     if (response.data[i].profile_id === globals.getDNSMonitorlocationprofile)\n { tests[\"if\"] = responseCode.code === 200;\n  postman.setGlobalVariable(\"getDNSMonitorprimarylocation\", response.data[i].primary_location);\n \n }\n \n }",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar j = nr.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    if (nr[i].profile_id === pm.globals.get(\"getDNSMonitorlocationprofile\")) {\n        pm.test(\"if\", function() {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.globals.set(\"getDNSMonitorprimarylocation\", nr[i].primary_location);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"metric_aggregation_name\"] = responseBody.has(\"metric_aggregation_name\");\n    tests[\"metric_aggregation\"] = responseBody.has(\"metric_aggregation\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n// table_data validation\nif(responseBody.has(\"table_data\"))\n{\n    tests[\"table_data\"] = responseBody.has(\"table_data\") && response.data.table_data !== null;\n  \n}\nelse\n{tests[\"table_data is missing\"] = responseBody.has(\"table_data\");}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nconst response = pm.response.json();\nconst nr = response.data || {};\n\n// Info data validation\nif (response.hasOwnProperty(\"info\")) {\n    const info = nr.info;\n\n    pm.test(\"resource_name exists\", function () {\n        pm.expect(response).to.have.property(\"resource_name\");\n    });\n\n    pm.test(\"end_time exists\", function () {\n        pm.expect(response).to.have.property(\"end_time\");\n    });\n\n    pm.test(\"resource_type_name is 'Monitor'\", function () {\n        pm.expect(info.resource_type_name).to.equal(\"Monitor\");\n    });\n\n    pm.test(\"report_name exists\", function () {\n        pm.expect(response).to.have.property(\"report_name\");\n    });\n\n    pm.test(\"period_name exists\", function () {\n        pm.expect(response).to.have.property(\"period_name\");\n    });\n\n    pm.test(\"formatted_start_time exists\", function () {\n        pm.expect(response).to.have.property(\"formatted_start_time\");\n    });\n\n    pm.test(\"generated_time exists\", function () {\n        pm.expect(response).to.have.property(\"generated_time\");\n    });\n\n    pm.test(\"formatted_end_time exists\", function () {\n        pm.expect(response).to.have.property(\"formatted_end_time\");\n    });\n\n    pm.test(\"segment_type exists\", function () {\n        pm.expect(response).to.have.property(\"segment_type\");\n    });\n\n    pm.test(\"start_time exists\", function () {\n        pm.expect(response).to.have.property(\"start_time\");\n    });\n\n    pm.test(\"resource_type is 2\", function () {\n        pm.expect(info.resource_type).to.equal(2);\n    });\n\n    pm.test(\"period exists\", function () {\n        pm.expect(response).to.have.property(\"period\");\n    });\n\n    pm.test(\"formatted_generated_time exists\", function () {\n        pm.expect(response).to.have.property(\"formatted_generated_time\");\n    });\n\n    pm.test(\"report_type exists\", function () {\n        pm.expect(response).to.have.property(\"report_type\");\n    });\n\n    pm.test(\"segment_type_name exists\", function () {\n        pm.expect(response).to.have.property(\"segment_type_name\");\n    });\n\n    pm.test(\"metric_aggregation_name exists\", function () {\n        pm.expect(response).to.have.property(\"metric_aggregation_name\");\n    });\n\n    pm.test(\"metric_aggregation exists\", function () {\n        pm.expect(response).to.have.property(\"metric_aggregation\");\n    });\n\n    if (response.hasOwnProperty(\"resource_tags\")) {\n        pm.test(\"resource_tags exists\", function () {\n            pm.expect(response).to.have.property(\"resource_tags\");\n        });\n    }\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect(response).to.have.property(\"info\");\n    });\n}\n\n// table_data validation\nif (response.hasOwnProperty(\"table_data\")) {\n    pm.test(\"table_data exists and is not null\", function () {\n        pm.expect(nr.table_data).to.not.be.null;\n    });\n} else {\n    pm.test(\"table_data is missing\", function () {\n        pm.expect(response).to.have.property(\"table_data\");\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getHOMEPAGEMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\npm.globals.set(\"getHOMEPAGEMonitorlocationprofile\", response.data.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n     if (response.data[i].profile_id === globals.getHOMEPAGEMonitorlocationprofile)\n {  tests[\"if\"] = responseCode.code === 200;\n  postman.setGlobalVariable(\"getHOMEPAGEMonitorprimarylocation\", response.data[i].primary_location);\n \n }\n \n }",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar j = nr.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    if (nr[i].profile_id === pm.globals.get(\"getHOMEPAGEMonitorlocationprofile\")) {\n        pm.test(\"if\", function () {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.globals.set(\"getHOMEPAGEMonitorprimarylocation\", nr[i].primary_location);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"metric_aggregation_name\"] = responseBody.has(\"metric_aggregation_name\");\n    tests[\"metric_aggregation\"] = responseBody.has(\"metric_aggregation\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n// table_data validation\nif(responseBody.has(\"table_data\"))\n{\n    tests[\"table_data\"] = responseBody.has(\"table_data\") && response.data.table_data !== null;\n  \n}\nelse\n{tests[\"table_data is missing\"] = responseBody.has(\"table_data\");}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Info data validation\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function() {\n        pm.expect(response.hasOwnProperty(\"resource_name\")).to.be.true;\n    });\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"resource_type_name\", function() {\n        pm.expect(nr.info.resource_type_name).to.equal('Monitor');\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(response.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(response.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"segment_type\", function() {\n        pm.expect(response.hasOwnProperty(\"segment_type\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"resource type\", function() {\n        pm.expect(nr.info.resource_type).to.equal(2);\n    });\n    pm.test(\"period\", function() {\n        pm.expect(response.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(response.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n    pm.test(\"segment_type_name\", function() {\n        pm.expect(response.hasOwnProperty(\"segment_type_name\")).to.be.true;\n    });\n    pm.test(\"metric_aggregation_name\", function() {\n        pm.expect(response.hasOwnProperty(\"metric_aggregation_name\")).to.be.true;\n    });\n    pm.test(\"metric_aggregation\", function() {\n        pm.expect(response.hasOwnProperty(\"metric_aggregation\")).to.be.true;\n    });\n    if (response.hasOwnProperty(\"resource_tags\")) {\n        pm.test(\"resource_tags\", function() {\n            pm.expect(response.hasOwnProperty(\"resource_tags\")).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"info is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.false;\n    });\n}\n\n// table_data validation\nif (response.hasOwnProperty(\"table_data\")) {\n    pm.test(\"table_data\", function() {\n        pm.expect(response.hasOwnProperty(\"table_data\") && nr.table_data !== null).to.be.true;\n    });\n} else {\n    pm.test(\"table_data is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"table_data\")).to.be.false;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getPORTMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.globals.set(\"getPORTMonitorlocationprofile\", nr.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n     if (response.data[i].profile_id === globals.getPORTMonitorlocationprofile)\n {  tests[\"if\"] = responseCode.code === 200;\n  postman.setGlobalVariable(\"getPORTMonitorprimarylocation\", response.data[i].primary_location);\n \n }\n \n }",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar j = nr.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    if (nr[i].profile_id === globals.getPORTMonitorlocationprofile) {\n        pm.test(\"if\", function() {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.globals.set(\"getPORTMonitorprimarylocation\", nr[i].primary_location);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"metric_aggregation_name\"] = responseBody.has(\"metric_aggregation_name\");\n    tests[\"metric_aggregation\"] = responseBody.has(\"metric_aggregation\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n// table_data validation\nif(responseBody.has(\"table_data\"))\n{\n    tests[\"table_data\"] = responseBody.has(\"table_data\") && response.data.table_data !== null;\n    tests[\"table_data response\"] =  responseBody.has('RESPONSETIME\":{') && response.data.table_data[globals.getPORTMonitorprimarylocation].RESPONSETIME !== null ;\n    tests[\"table_data max\"] = responseBody.has('max') && response.data.table_data[globals.getPORTMonitorprimarylocation].RESPONSETIME.max !== null ;\n    tests[\"table_data min\"] = responseBody.has('min') && response.data.table_data[globals.getPORTMonitorprimarylocation].RESPONSETIME.min !== null ;\n    tests[\"table_data average\"] = responseBody.has('average') && response.data.table_data[globals.getPORTMonitorprimarylocation].RESPONSETIME.average !== null ;\n    tests[\"table_data unit\"] = responseBody.has('unit') && response.data.table_data[globals.getPORTMonitorprimarylocation].RESPONSETIME.unit !== null ;\n    tests[\"table_data average_description\"] = responseBody.has('average_description') && response.data.table_data[globals.getPORTMonitorprimarylocation].RESPONSETIME.average_description !== null ;\n    tests[\"table_data title\"] = responseBody.has('title') && response.data.table_data[globals.getPORTMonitorprimarylocation].RESPONSETIME.title !== null ;\n    tests[\"table_data chart_data\"] = responseBody.has('chart_data\":[') && response.data.table_data[globals.getPORTMonitorprimarylocation].RESPONSETIME.chart_data !== null ;\n\n}\nelse\n{tests[\"table_data is missing\"] = responseBody.has(\"table_data\");}\n\n\n// chart_data validation\nif(responseBody.has(\"chart_data\"))\n{\n    tests[\"chart_data\"] = responseBody.has(\"chart_data\") && response.data.chart_data !== null;\n    tests[\"chart_data ResponseTimeChart\"] = responseBody.has('ResponseTimeChart\":[') && response.data.chart_data[0].ResponseTimeChart !== null ;\n    tests[\"chart_data ResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[0].ResponseTimeChart[0][globals.getPORTMonitorprimarylocation].max !== null ;\n    tests[\"chart_data ResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPORTMonitorprimarylocation].min !== null ;\n    tests[\"chart_data ResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPORTMonitorprimarylocation].label !== null ;\n    tests[\"chart_data ResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPORTMonitorprimarylocation].average !== null ;\n    // tests[\"chart_data ResponseTimeChart 95_percentile\"] = response.data.chart_data[0].ResponseTimeChart[0][getPORTMonitorprimarylocation].95_percentile !== null ;\n    tests[\"chart_data ResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPORTMonitorprimarylocation].chart_data !== null ;\n    \n    // Location Response time charts\n    tests[\"chart_data LocationResponseTimeChart\"] = responseBody.has('LocationResponseTimeChart\":[') && response.data.chart_data[1].LocationResponseTimeChart !== null ;\n    //tests[\"chart_data LocationResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[1].LocationResponseTimeChart[1][globals.getPORTMonitorprimarylocation].max !== null ;\n    //tests[\"chart_data LocationResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getPORTMonitorprimarylocation].min !== null ;\n   // tests[\"chart_data LocationResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getPORTMonitorprimarylocation].label !== null ;\n   // tests[\"chart_data LocationResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getPORTMonitorprimarylocation].average !== null ;\n   //tests[\"chart_data ResponseTimeChart 95_percentile\"] = response.data.chart_data[0].ResponseTimeChart[0][globals.getPORTMonitorprimarylocation].95_percentile !== null ;\n   // tests[\"chart_data LocationResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getPORTMonitorprimarylocation].chart_data !== null ;\n    \n    \n}\nelse\n{tests[\"chart_data is missing\"] = responseBody.has(\"chart_data\");}",
    "output": "pm.test(\"Status code is 200\", function() {\\n    pm.expect(pm.response.code).to.equal(200);\\n});\\n\\nlet r = pm.response.json(), nr = r.data || {}, loc = globals.getPORTMonitorprimarylocation;\\nlet assertHas = (obj, key) => pm.test(`${key} exists`, function () {\\n    pm.expect(obj && obj.hasOwnProperty(key) && obj[key] !== null).to.be.true;\\n});\\n\\nif (nr.info) {\\n    [\"resource_name\",\"end_time\",\"report_name\",\"period_name\",\"formatted_start_time\",\"generated_time\",\"formatted_end_time\",\"segment_type\",\"start_time\",\"period\",\"formatted_generated_time\",\"report_type\",\"segment_type_name\",\"metric_aggregation_name\",\"metric_aggregation\"].forEach(k => assertHas(r, k));\\n    pm.test(\"resource_type_name\", function () {\\n        pm.expect(nr.info.resource_type_name).to.equal(\"Monitor\");\\n    });\\n    pm.test(\"resource type\", function () {\\n        pm.expect(nr.info.resource_type).to.equal(2);\\n    });\\n    if (r.hasOwnProperty(\"resource_tags\")) assertHas(r, \"resource_tags\");\\n} else {\\n    pm.test(\"info is missing\", function () {\\n        pm.expect(r.hasOwnProperty(\"info\")).to.be.false;\\n    });\\n}\\n\\nif (r.hasOwnProperty(\"table_data\")) {\\n    assertHas(r, \"table_data\");\\n    [\"RESPONSETIME\"].forEach(k => {\\n        let d = nr.table_data?.[loc]?.[k];\\n        [\"max\",\"min\",\"average\",\"unit\",\"average_description\",\"title\",\"chart_data\"].forEach(m => assertHas(d, m));\\n    });\\n} else {\\n    pm.test(\"table_data is missing\", function () {\\n        pm.expect(r.hasOwnProperty(\"table_data\")).to.be.false;\\n    });\\n}\\n\\nif (r.hasOwnProperty(\"chart_data\")) {\\n    assertHas(r, \"chart_data\");\\n    let c0 = nr.chart_data?.[0]?.ResponseTimeChart?.[0]?.[loc];\\n    let c1 = nr.chart_data?.[1]?.LocationResponseTimeChart?.[1]?.[loc];\\n    [\"max\",\"min\",\"label\",\"average\",\"chart_data\",\"95_percentile\"].forEach(k => assertHas(c0, k));\\n    [\"max\",\"min\",\"label\",\"average\",\"chart_data\"].forEach(k => assertHas(c1, k));\\n} else {\\n    pm.test(\"chart_data is missing\", function () {\\n        pm.expect(r.hasOwnProperty(\"chart_data\")).to.be.false;\\n    });\\n}"},
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getUDPMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.globals.set(\"getUDPMonitorlocationprofile\", nr.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n     if (response.data[i].profile_id === globals.getUDPMonitorlocationprofile)\n {  tests[\"if\"] = responseCode.code === 200;\n  postman.setGlobalVariable(\"getUDPMonitorprimarylocation\", response.data[i].primary_location);\n \n }\n \n }",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar j = nr.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    if (nr[i].profile_id === pm.globals.get(\"getUDPMonitorlocationprofile\")) {\n        pm.test(\"if\", function () {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.globals.set(\"getUDPMonitorprimarylocation\", nr[i].primary_location);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"metric_aggregation_name\"] = responseBody.has(\"metric_aggregation_name\");\n    tests[\"metric_aggregation\"] = responseBody.has(\"metric_aggregation\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n// table_data validation\nif(responseBody.has(\"table_data\"))\n{\n    tests[\"table_data\"] = responseBody.has(\"table_data\") && response.data.table_data !== null;\n    tests[\"table_data response\"] =  responseBody.has('RESPONSETIME\":{') && response.data.table_data[globals.getUDPMonitorprimarylocation].RESPONSETIME !== null ;\n    tests[\"table_data max\"] = responseBody.has('max') && response.data.table_data[globals.getUDPMonitorprimarylocation].RESPONSETIME.max !== null ;\n    tests[\"table_data min\"] = responseBody.has('min') && response.data.table_data[globals.getUDPMonitorprimarylocation].RESPONSETIME.min !== null ;\n    tests[\"table_data average\"] = responseBody.has('average') && response.data.table_data[globals.getUDPMonitorprimarylocation].RESPONSETIME.average !== null ;\n    tests[\"table_data unit\"] = responseBody.has('unit') && response.data.table_data[globals.getUDPMonitorprimarylocation].RESPONSETIME.unit !== null ;\n    tests[\"table_data average_description\"] = responseBody.has('average_description') && response.data.table_data[globals.getUDPMonitorprimarylocation].RESPONSETIME.average_description !== null ;\n    tests[\"table_data title\"] = responseBody.has('title') && response.data.table_data[globals.getUDPMonitorprimarylocation].RESPONSETIME.title !== null ;\n    tests[\"table_data chart_data\"] = responseBody.has('chart_data\":[') && response.data.table_data[globals.getUDPMonitorprimarylocation].RESPONSETIME.chart_data !== null ;\n\n}\nelse\n{tests[\"table_data is missing\"] = responseBody.has(\"table_data\");}\n\n\n// chart_data validation\nif(responseBody.has(\"chart_data\"))\n{\n    tests[\"chart_data\"] = responseBody.has(\"chart_data\") && response.data.chart_data !== null;\n    tests[\"chart_data ResponseTimeChart\"] = responseBody.has('ResponseTimeChart\":[') && response.data.chart_data[0].ResponseTimeChart !== null ;\n    tests[\"chart_data ResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[0].ResponseTimeChart[0][globals.getUDPMonitorprimarylocation].max !== null ;\n    tests[\"chart_data ResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getUDPMonitorprimarylocation].min !== null ;\n    tests[\"chart_data ResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getUDPMonitorprimarylocation].label !== null ;\n    tests[\"chart_data ResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getUDPMonitorprimarylocation].average !== null ;\n    // tests[\"chart_data ResponseTimeChart 95_percentile\"] = response.data.chart_data[0].ResponseTimeChart[0][getUDPMonitorprimarylocation].95_percentile !== null ;\n    tests[\"chart_data ResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getUDPMonitorprimarylocation].chart_data !== null ;\n    \n    // Location Response time charts\n    tests[\"chart_data LocationResponseTimeChart\"] = responseBody.has('LocationResponseTimeChart\":[') && response.data.chart_data[1].LocationResponseTimeChart !== null ;\n    //tests[\"chart_data LocationResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[1].LocationResponseTimeChart[1][globals.getUDPMonitorprimarylocation].max !== null ;\n    //tests[\"chart_data LocationResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getUDPMonitorprimarylocation].min !== null ;\n   // tests[\"chart_data LocationResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getUDPMonitorprimarylocation].label !== null ;\n   // tests[\"chart_data LocationResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getUDPMonitorprimarylocation].average !== null ;\n   //tests[\"chart_data ResponseTimeChart 95_percentile\"] = response.data.chart_data[0].ResponseTimeChart[0][globals.getUDPMonitorprimarylocation].95_percentile !== null ;\n   // tests[\"chart_data LocationResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[1].LocationResponseTimeChart[1][globals.getUDPMonitorprimarylocation].chart_data !== null ;\n    \n    \n}\nelse\n{tests[\"chart_data is missing\"] = responseBody.has(\"chart_data\");}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nconst response = pm.response.json();\nconst nr = response.data || {};\nconst locId = pm.globals.get(\"UDPMonitorprimarylocation\");\n\n// Validate chart_data\nif (nr.hasOwnProperty(\"chart_data\") && nr.chart_data) {\n    const chart = nr.chart_data;\n\n    pm.test(\"chart_data exists\", function () {\n        pm.expect(chart).to.not.be.null;\n    });\n\n    const rtChart = chart[0]?.ResponseTimeChart?.[0]?.[locId];\n    const locChart = chart[1]?.LocationResponseTimeChart?.[1]?.[locId];\n\n    if (rtChart) {\n        pm.test(\"ResponseTimeChart - 95_percentile exists\", function () {\n            pm.expect(rtChart[\"95_percentile\"]).to.not.be.null;\n        });\n        pm.test(\"ResponseTimeChart - max exists\", function () {\n            pm.expect(rtChart.max).to.not.be.null;\n        });\n        pm.test(\"ResponseTimeChart - min exists\", function () {\n            pm.expect(rtChart.min).to.not.be.null;\n        });\n        pm.test(\"ResponseTimeChart - label exists\", function () {\n            pm.expect(rtChart.label).to.not.be.null;\n        });\n        pm.test(\"ResponseTimeChart - average exists\", function () {\n            pm.expect(rtChart.average).to.not.be.null;\n        });\n        pm.test(\"ResponseTimeChart - chart_data exists\", function () {\n            pm.expect(rtChart.chart_data).to.not.be.null;\n        });\n    }\n\n    if (locChart) {\n        pm.test(\"LocationResponseTimeChart - max exists\", function () {\n            pm.expect(locChart.max).to.not.be.null;\n        });\n        pm.test(\"LocationResponseTimeChart - min exists\", function () {\n            pm.expect(locChart.min).to.not.be.null;\n        });\n        pm.test(\"LocationResponseTimeChart - label exists\", function () {\n            pm.expect(locChart.label).to.not.be.null;\n        });\n        pm.test(\"LocationResponseTimeChart - average exists\", function () {\n            pm.expect(locChart.average).to.not.be.null;\n        });\n        pm.test(\"LocationResponseTimeChart - chart_data exists\", function () {\n            pm.expect(locChart.chart_data).to.not.be.null;\n        });\n    }\n} else {\n    pm.test(\"chart_data is missing\", function () {\n        pm.expect(response).to.have.property(\"chart_data\");\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getGRPCMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\npm.globals.set(\"getGRPCMonitorlocationprofile\", response.data.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n     if (response.data[i].profile_id === globals.getGRPCMonitorlocationprofile)\n {  tests[\"if\"] = responseCode.code === 200;\n  postman.setGlobalVariable(\"getGRPCMonitorprimarylocation\", response.data[i].primary_location);\n \n }\n \n }",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar j = nr.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    if (nr[i].profile_id === pm.globals.get(\"getGRPCMonitorlocationprofile\")) {\n        pm.test(\"if\", function () {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.globals.set(\"getGRPCMonitorprimarylocation\", nr[i].primary_location);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = response.data.info.resource_name!==undefined;\n    tests[\"end_time\"] =response.data.info.end_time!==undefined;\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = response.data.info.report_name!==undefined;;\n    tests[\"period_name\"] = response.data.info.period_name!==undefined;\n    tests[\"formatted_start_time\"] = response.data.info.formatted_start_time!==undefined;\n    tests[\"generated_time\"] = response.data.info.generated_time!==undefined;\n    tests[\"formatted_end_time\"] = response.data.info.formatted_end_time!==undefined;\n    tests[\"segment_type\"] = response.data.info.segment_type!==undefined;\n    tests[\"start_time\"] = response.data.info.start_time!==undefined;\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = response.data.info.period!==undefined;\n    tests[\"formatted_generated_time\"] = response.data.info.formatted_generated_time!==undefined;\n    tests[\"report_type\"] = response.data.info.report_type!==undefined;\n    tests[\"segment_type_name\"] = response.data.info.segment_type_name!==undefined;\n    tests[\"metric_aggregation_name\"] = response.data.info.metric_aggregation_name!==undefined;\n    tests[\"metric_aggregation\"] = response.data.info.metric_aggregation!==undefined;\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = response.data.info.resource_tags!==undefined;\n    }\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n// table_data validation\nif(responseBody.has(\"table_data\"))\n{\n    tests[\"table_data\"] = responseBody.has(\"table_data\") && response.data.table_data !== undefined;\n    tests[\"table_data response\"] =  responseBody.has('RESPONSETIME\":{') && response.data.table_data[globals.getGRPCMonitorprimarylocation].RESPONSETIME !== undefined ;\n    tests[\"table_data max\"] = responseBody.has('max') && response.data.table_data[globals.getGRPCMonitorprimarylocation].RESPONSETIME.max !== undefined ;\n    tests[\"table_data min\"] = responseBody.has('min') && response.data.table_data[globals.getGRPCMonitorprimarylocation].RESPONSETIME.min !== undefined ;\n    tests[\"table_data average\"] = responseBody.has('average') && response.data.table_data[globals.getGRPCMonitorprimarylocation].RESPONSETIME.average !== undefined ;\n    tests[\"table_data unit\"] = responseBody.has('unit') && response.data.table_data[globals.getGRPCMonitorprimarylocation].RESPONSETIME.unit !== undefined ;\n    tests[\"table_data average_description\"] = responseBody.has('average_description') && response.data.table_data[globals.getGRPCMonitorprimarylocation].RESPONSETIME.average_description !== undefined ;\n    tests[\"table_data title\"] = responseBody.has('title') && response.data.table_data[globals.getGRPCMonitorprimarylocation].RESPONSETIME.title !== undefined ;\n    tests[\"table_data chart_data\"] = responseBody.has('chart_data\":[') && response.data.table_data[globals.getGRPCMonitorprimarylocation].RESPONSETIME.chart_data !== undefined ;\n\n}\nelse\n{tests[\"table_data is missing\"] = responseBody.has(\"table_data\");}\n\n// chart_data validation\nif(responseBody.has(\"chart_data\"))\n{\n    tests[\"chart_data\"] = responseBody.has(\"chart_data\") && response.data.chart_data !== undefined;\n    tests[\"chart_data length\"] = response.data.chart_data.length===3;\n//ResponseTimeReportChart\n    tests[\"chart_data ResponseTimeReportChart\"] =  response.data.chart_data[0].ResponseTimeReportChart !== undefined ;\n    tests[\"chart_data ResponseTimeReportChart max\"] =  response.data.chart_data[0].ResponseTimeReportChart[0][globals.getGRPCMonitorprimarylocation].max !== undefined ;\n    tests[\"chart_data ResponseTimeReportChart min\"] = response.data.chart_data[0].ResponseTimeReportChart[0][globals.getGRPCMonitorprimarylocation].min !== undefined ;\n    tests[\"chart_data ResponseTimeReportChart label\"] = response.data.chart_data[0].ResponseTimeReportChart[0][globals.getGRPCMonitorprimarylocation].label !== undefined ;\n    tests[\"chart_data ResponseTimeReportChart average\"] =   response.data.chart_data[0].ResponseTimeReportChart[0][globals.getGRPCMonitorprimarylocation].average !== undefined ;\n    tests[\"chart_data ResponseTimeReportChart 95_percentile\"] = response.data.chart_data[0].ResponseTimeReportChart[0][globals.getGRPCMonitorprimarylocation][\"95_percentile\"] !== undefined ;\n    tests[\"chart_data ResponseTimeReportChart chart_data\"] = response.data.chart_data[0].ResponseTimeReportChart[0][globals.getGRPCMonitorprimarylocation].chart_data !== undefined ;\n\n\n//RPCTimeChart\n    tests[\"chart_data RPCTimeChart\"] = response.data.chart_data[1].RPCTimeChart !== undefined ;\n    tests[\"chart_data RPCTimeChart max\"] = response.data.chart_data[1].RPCTimeChart[0][globals.getGRPCMonitorprimarylocation].max !== undefined ;\n    tests[\"chart_data RPCTimeChart min\"] =  response.data.chart_data[1].RPCTimeChart[0][globals.getGRPCMonitorprimarylocation].min !== undefined ;\n    tests[\"chart_data RPCTimeChart label\"] =  response.data.chart_data[1].RPCTimeChart[0][globals.getGRPCMonitorprimarylocation].label !== undefined ;\n    tests[\"chart_data RPCTimeChart average\"] =  response.data.chart_data[1].RPCTimeChart[0][globals.getGRPCMonitorprimarylocation].average !== undefined ;\n    tests[\"chart_data RPCTimeChart 95_percentile\"] = response.data.chart_data[1].RPCTimeChart[0][globals.getGRPCMonitorprimarylocation][\"95_percentile\"] !== undefined ;\n    tests[\"chart_data RPCTimeChart chart_data\"] = response.data.chart_data[1].RPCTimeChart[0][globals.getGRPCMonitorprimarylocation].chart_data !== undefined ;\n\n\n    \n    // LocationRPCTimeChart\n     tests[\"chart_data LocationRPCTimeChart\"] = response.data.chart_data[2].LocationRPCTimeChart !== undefined ;\n    tests[\"chart_data RPCTimeChart max\"] =  response.data.chart_data[2].LocationRPCTimeChart[0][globals.getGRPCMonitorprimarylocation].max !== undefined ;\n    tests[\"chart_data RPCTimeChart min\"] = response.data.chart_data[2].LocationRPCTimeChart[0][globals.getGRPCMonitorprimarylocation].min !== undefined ;\n    tests[\"chart_data RPCTimeChart label\"] =  response.data.chart_data[2].LocationRPCTimeChart[0][globals.getGRPCMonitorprimarylocation].label !== undefined ;\n    tests[\"chart_data RPCTimeChart average\"] =  response.data.chart_data[2].LocationRPCTimeChart[0][globals.getGRPCMonitorprimarylocation].average !== undefined ;\n    tests[\"chart_data RPCTimeChart 95_percentile\"] = response.data.chart_data[2].LocationRPCTimeChart[0][globals.getGRPCMonitorprimarylocation][\"95_percentile\"] !== undefined ;\n    tests[\"chart_data RPCTimeChart chart_data\"] =   response.data.chart_data[2].LocationRPCTimeChart[0][globals.getGRPCMonitorprimarylocation].chart_data !== undefined ;\n    \n}\nelse\ntests[\"chart_data is missing\"] = response.data.chart_data!==undefined",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar location = pm.globals.get(\"getGRPCMonitorprimarylocation\");\n\n// Info data validation\nif (nr.hasOwnProperty(\"info\")) {\n    [\n        \"resource_name\", \"end_time\", \"report_name\", \"period_name\", \"formatted_start_time\",\n        \"generated_time\", \"formatted_end_time\", \"segment_type\", \"start_time\", \"period\",\n        \"formatted_generated_time\", \"report_type\", \"segment_type_name\", \"metric_aggregation_name\",\n        \"metric_aggregation\"\n    ].forEach(function (key) {\n        pm.test(key, function () {\n            pm.expect(nr.info[key]).to.not.be.undefined;\n        });\n    });\n\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info.resource_type_name).to.equal(\"Monitor\");\n    });\n\n    pm.test(\"resource type\", function () {\n        pm.expect(nr.info.resource_type).to.equal(2);\n    });\n\n    if (nr.info.hasOwnProperty(\"resource_tags\")) {\n        pm.test(\"resource_tags\", function () {\n            pm.expect(nr.info.resource_tags).to.not.be.undefined;\n        });\n    }\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\n// table_data validation\nif (nr.hasOwnProperty(\"table_data\")) {\n    var td = nr.table_data[location]?.RESPONSETIME || {};\n    [\"max\", \"min\", \"average\", \"unit\", \"average_description\", \"title\", \"chart_data\"].forEach(function (key) {\n        pm.test(\"table_data \" + key, function () {\n            pm.expect(td[key]).to.not.be.undefined;\n        });\n    });\n} else {\n    pm.test(\"table_data is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"table_data\")).to.be.true;\n    });\n}\n\n// chart_data validation\nif (nr.hasOwnProperty(\"chart_data\")) {\n    pm.test(\"chart_data length\", function () {\n        pm.expect(nr.chart_data.length).to.equal(3);\n    });\n\n    const chartKeys = [\"ResponseTimeReportChart\", \"RPCTimeChart\", \"LocationRPCTimeChart\"];\n\n    chartKeys.forEach((chartKey, index) => {\n        let chartData = nr.chart_data[index][chartKey]?.[0]?.[location] || {};\n\n        pm.test(chartKey, function () {\n            pm.expect(nr.chart_data[index][chartKey]).to.not.be.undefined;\n        });\n\n        [\"max\", \"min\", \"label\", \"average\", \"95_percentile\", \"chart_data\"].forEach((key) => {\n            pm.test(`${chartKey} ${key}`, function () {\n                pm.expect(chartData[key]).to.not.be.undefined;\n            });\n        });\n    });\n} else {\n    pm.test(\"chart_data is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"chart_data\")).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getPOPMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.globals.set(\"getPOPMonitorlocationprofile\", nr.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n     if (response.data[i].profile_id === globals.getPOPMonitorlocationprofile)\n {  tests[\"if\"] = responseCode.code === 200;\n  postman.setGlobalVariable(\"getPOPMonitorprimarylocation\", response.data[i].primary_location);\n \n }\n \n }",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar j = nr.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    if (nr[i].profile_id === globals.getPOPMonitorlocationprofile) {\n        pm.test(\"if\", function() {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.globals.set(\"getPOPMonitorprimarylocation\", nr[i].primary_location);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Info data validation\nif(responseBody.has(\"info\"))\n{  tests[\"Info node\"] = responseCode.code === 200;\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"metric_aggregation_name\"] = responseBody.has(\"metric_aggregation_name\");\n    tests[\"metric_aggregation\"] = responseBody.has(\"metric_aggregation\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n// table_data validation\nif(responseBody.has(\"table_data\"))\n{   tests[\"table_data\"] = responseCode.code === 200;\n    tests[\"table_data\"] = responseBody.has(\"table_data\") && response.data.table_data !== null;\n    tests[\"table_data response\"] = responseBody.has('RESPONSETIME\":{') && response.data.table_data[globals.getPOPMonitorprimarylocation].RESPONSETIME !== null ;\n    tests[\"table_data max\"] = responseBody.has('max') && response.data.table_data[globals.getPOPMonitorprimarylocation].RESPONSETIME['max'] !== null ;\n    tests[\"table_data min\"] = responseBody.has('min') && response.data.table_data[globals.getPOPMonitorprimarylocation].RESPONSETIME['min'] !== null ;\n    tests[\"table_data average\"] = responseBody.has('average') && response.data.table_data[globals.getPOPMonitorprimarylocation].RESPONSETIME['average'] !== null ;\n    tests[\"table_data unit\"] = responseBody.has('unit') && response.data.table_data[globals.getPOPMonitorprimarylocation].RESPONSETIME['unit'] !== null ;\n    tests[\"table_data average_description\"] = responseBody.has('average_description') && response.data.table_data[globals.getPOPMonitorprimarylocation].RESPONSETIME['average_description'] !== null ;\n    tests[\"table_data title\"] = responseBody.has('title') && response.data.table_data[globals.getPOPMonitorprimarylocation].RESPONSETIME !== null ;\n    tests[\"table_data chart_data\"] = responseBody.has('chart_data\":[') && response.data.table_data[globals.getPOPMonitorprimarylocation].RESPONSETIME['chart_data'] !== null ;\n\n}\nelse\n{tests[\"table_data is missing\"] = responseBody.has(\"table_data\");}\n\n// chart_data validation\nif(responseBody.has(\"chart_data\"))\n{   tests[\"chart_data\"] = responseCode.code === 200;\n    tests[\"chart_data\"] = responseBody.has(\"chart_data\") && response.data.chart_data !== null;\n    tests[\"chart_data ResponseTimeChart\"] = responseBody.has('ResponseTimeChart\":[') && response.data.chart_data[0].ResponseTimeChart !== null ;\n    console.log(\"response.data.chart_data[0].ResponseTimeChart[0][globals.getPOPMonitorprimarylocation]['max'] : \"+response.data.chart_data[0].ResponseTimeChart[0][globals.getPOPMonitorprimarylocation]['max']);\n    tests[\"chart_data ResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[0].ResponseTimeChart[0][globals.getPOPMonitorprimarylocation]['max'] !== null ;\n    tests[\"chart_data ResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPOPMonitorprimarylocation]['min'] !== null ;\n    tests[\"chart_data ResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPOPMonitorprimarylocation]['label'] !== null ;\n    tests[\"chart_data ResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPOPMonitorprimarylocation]['average'] !== null ;\n   tests[\"chart_data ResponseTimeChart 95_percentile\"] = response.data.chart_data[0].ResponseTimeChart[0][globals.getPOPMonitorprimarylocation][\"95_percentile\"] !== null ;\n    tests[\"chart_data ResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPOPMonitorprimarylocation]['chart_data'] !== null ;\n    // Location Response time charts\n    var j=response.data.chart_data[1].LocationResponseTimeChart.length-1;\n    \n    //var getPOPMonitorprimarylocationplace;\n    for (i=0 ;  i<= j ; i++ )\n     {\n     if (response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPOPMonitorprimarylocation] !== null)\n        {  tests[\"if\"] = responseCode.code === 200;\n           postman.setGlobalVariable(\"getPOPMonitorprimarylocationplace\", i);\n           //postman.setEnvironmentVariable(\"getPOPMonitorprimarylocationplace\", i);\n           break;\n        }\n     }\n    tests[\"chart_data LocationResponseTimeChart\"] = responseBody.has('LocationResponseTimeChart\":[') && response.data.chart_data[1].LocationResponseTimeChart !== null ;\n    console.log(\"response.data.chart_data[1].LocationResponseTimeChart[globals.getPOPMonitorprimarylocationplace][globals.getPOPMonitorprimarylocation] : \"+response.data.chart_data[1].LocationResponseTimeChart[globals.getPOPMonitorprimarylocationplace][globals.getPOPMonitorprimarylocation]);\n    for(i=0; i<response.data.chart_data[1].LocationResponseTimeChart;i++){\n        if(Object.keys(response.data.chart_data[1].LocationResponseTimeChart[i])[0] === globals.getPOPMonitorprimarylocationplace){\n            tests[\"chart_data LocationResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPOPMonitorprimarylocation]['max'] !== null ;\n            tests[\"chart_data LocationResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPOPMonitorprimarylocation]['min'] !== null ;\n            tests[\"chart_data LocationResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPOPMonitorprimarylocation]['label'] !== null ;\n            tests[\"chart_data LocationResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPOPMonitorprimarylocation]['average'] !== null ;\n            tests[\"chart_data LocationResponseTimeChart 95_percentile\"] = response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPOPMonitorprimarylocation][\"95_percentile\"] !== null ;\n            tests[\"chart_data LocationResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPOPMonitorprimarylocation]['chart_data'] !== null ;     \n        }\n    }\n    \n}\nelse\n{tests[\"chart_data is missing\"] = responseBody.has(\"chart_data\");}",
    "output": "pm.test(\"Status code is 200\", () => {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nconst response = pm.response.json();\nconst data = response.data || {};\nconst info = data.info || {};\nconst tableData = data.table_data || {};\nconst chartData = data.chart_data || [];\nconst location = pm.globals.get(\"POPMonitorprimarylocation\");\n\n// ----------- INFO VALIDATION -----------\npm.test(\"Info block exists\", () => pm.expect(info).to.be.an(\"object\"));\n\nconst requiredInfoFields = [\n    \"resource_name\", \"end_time\", \"report_name\", \"period_name\",\n    \"formatted_start_time\", \"generated_time\", \"formatted_end_time\",\n    \"segment_type\", \"start_time\", \"period\", \"formatted_generated_time\",\n    \"report_type\", \"segment_type_name\", \"metric_aggregation_name\",\n    \"metric_aggregation\"\n];\n\nrequiredInfoFields.forEach(field => {\n    pm.test(`info.${field} is defined`, () => {\n        pm.expect(info[field]).to.not.be.undefined;\n    });\n});\n\npm.test(\"info.resource_type_name is 'Monitor'\", () => {\n    pm.expect(info.resource_type_name).to.equal(\"Monitor\");\n});\n\npm.test(\"info.resource_type is 2\", () => {\n    pm.expect(info.resource_type).to.equal(2);\n});\n\nif (info.resource_tags !== undefined) {\n    pm.test(\"info.resource_tags is defined\", () => {\n        pm.expect(info.resource_tags).to.not.be.undefined;\n    });\n}\n\n// ----------- TABLE DATA VALIDATION -----------\npm.test(\"table_data exists\", () => {\n    pm.expect(tableData).to.be.an(\"object\");\n    pm.expect(tableData[location]).to.not.be.undefined;\n});\n\nconst respTime = tableData[location]?.RESPONSETIME;\n\nif (respTime) {\n    [\"max\", \"min\", \"average\", \"unit\", \"average_description\", \"title\", \"chart_data\"].forEach(field => {\n        pm.test(`RESPONSETIME.${field} is defined`, () => {\n            pm.expect(respTime[field]).to.not.be.undefined;\n        });\n    });\n} else {\n    pm.test(\"RESPONSETIME missing for location\", () => {\n        pm.expect(respTime).to.not.be.undefined;\n    });\n}\n\n// ----------- CHART DATA VALIDATION -----------\npm.test(\"chart_data has 2+ entries\", () => {\n    pm.expect(chartData.length).to.be.at.least(2);\n});\n\n// -- Chart 0: ResponseTimeChart --\nconst rtc = chartData[0]?.ResponseTimeChart?.[0]?.[location];\nif (rtc) {\n    [\"max\", \"min\", \"label\", \"average\", \"95_percentile\", \"chart_data\"].forEach(field => {\n        pm.test(`ResponseTimeChart.${field} is defined`, () => {\n            pm.expect(rtc[field]).to.not.be.undefined;\n        });\n    });\n}\n\n// -- Chart 1: LocationResponseTimeChart --\nconst locRTCArray = chartData[1]?.LocationResponseTimeChart || [];\nlet validEntry = locRTCArray.find(entry => entry[location]);\n\nif (validEntry) {\n    const locRTC = validEntry[location];\n    [\"max\", \"min\", \"label\", \"average\", \"95_percentile\", \"chart_data\"].forEach(field => {\n        pm.test(`LocationResponseTimeChart.${field} is defined`, () => {\n            pm.expect(locRTC[field]).to.not.be.undefined;\n        });\n    });\n} else {\n    pm.test(\"No valid entry found in LocationResponseTimeChart\", () => {\n        pm.expect(validEntry).to.not.be.undefined;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getPINGMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.globals.set(\"getPINGMonitorlocationprofile\", nr.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n     if (response.data[i].profile_id === globals.getPINGMonitorlocationprofile)\n { tests[\"if\"] = responseCode.code === 200;\n  postman.setGlobalVariable(\"getPINGMonitorprimarylocation\", response.data[i].primary_location);\n \n }\n \n }",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\nvar j = nr.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    if (nr[i].profile_id === pm.globals.get(\"getPINGMonitorlocationprofile\")) {\n        pm.test(\"if\", function() {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.globals.set(\"getPINGMonitorprimarylocation\", nr[i].primary_location);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Info data validation\nif(responseBody.has(\"info\"))\n{  tests[\"Info node\"] = responseCode.code === 200;\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"metric_aggregation_name\"] = responseBody.has(\"metric_aggregation_name\");\n    tests[\"metric_aggregation\"] = responseBody.has(\"metric_aggregation\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n// table_data validation\nif(responseBody.has(\"table_data\"))\n{   tests[\"table_data\"] = responseCode.code === 200;\n    tests[\"table_data\"] = responseBody.has(\"table_data\") && response.data.table_data !== null;\n    tests[\"table_data response\"] = responseBody.has('RESPONSETIME\":{') && response.data.table_data[globals.getPINGMonitorprimarylocation].RESPONSETIME !== null ;\n    tests[\"table_data max\"] = responseBody.has('max') && response.data.table_data[globals.getPINGMonitorprimarylocation].RESPONSETIME.max !== null ;\n    tests[\"table_data min\"] = responseBody.has('min') && response.data.table_data[globals.getPINGMonitorprimarylocation].RESPONSETIME.min !== null ;\n    tests[\"table_data average\"] = responseBody.has('average') && response.data.table_data[globals.getPINGMonitorprimarylocation].RESPONSETIME.average !== null ;\n    tests[\"table_data unit\"] = responseBody.has('unit') && response.data.table_data[globals.getPINGMonitorprimarylocation].RESPONSETIME.unit !== null ;\n    tests[\"table_data average_description\"] = responseBody.has('average_description') && response.data.table_data[globals.getPINGMonitorprimarylocation].RESPONSETIME.average_description !== null ;\n    tests[\"table_data title\"] = responseBody.has('title') && response.data.table_data[globals.getPINGMonitorprimarylocation].RESPONSETIME !== null ;\n    tests[\"table_data chart_data\"] = responseBody.has('chart_data\":[') && response.data.table_data[globals.getPINGMonitorprimarylocation].RESPONSETIME.chart_data !== null ;\n\n}\nelse\n{tests[\"table_data is missing\"] = responseBody.has(\"table_data\");}\n\n// chart_data validation\nif(responseBody.has(\"chart_data\"))\n{   tests[\"chart_data\"] = responseCode.code === 200;\n    tests[\"chart_data\"] = responseBody.has(\"chart_data\") && response.data.chart_data !== null;\n    tests[\"chart_data ResponseTimeChart\"] = responseBody.has('ResponseTimeChart\":[') && response.data.chart_data[0].ResponseTimeChart !== null ;\n    tests[\"chart_data ResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[0].ResponseTimeChart[0][globals.getPINGMonitorprimarylocation].max !== null ;\n    tests[\"chart_data ResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPINGMonitorprimarylocation].min !== null ;\n    tests[\"chart_data ResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPINGMonitorprimarylocation].label !== null ;\n    tests[\"chart_data ResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPINGMonitorprimarylocation].average !== null ;\n   tests[\"chart_data ResponseTimeChart 95_percentile\"] = response.data.chart_data[0].ResponseTimeChart[0][globals.getPINGMonitorprimarylocation][\"95_percentile\"] !== null ;\n    tests[\"chart_data ResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPINGMonitorprimarylocation].chart_data !== null ;\n    // Location Response time charts\n    tests[\"chart_data LocationResponseTimeChart\"] = responseBody.has('LocationResponseTimeChart\":[') && response.data.chart_data[1].LocationResponseTimeChart !== null ;\n    tests[\"chart_data LocationResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[1].LocationResponseTimeChart[0][globals.getPINGMonitorprimarylocation].max !== null ;\n    tests[\"chart_data LocationResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[1].LocationResponseTimeChart[0][globals.getPINGMonitorprimarylocation].min !== null ;\n    tests[\"chart_data LocationResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[1].LocationResponseTimeChart[0][globals.getPINGMonitorprimarylocation].label !== null ;\n    tests[\"chart_data LocationResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[1].LocationResponseTimeChart[0][globals.getPINGMonitorprimarylocation].average !== null ;\n  tests[\"chart_data LocationResponseTimeChart 95_percentile\"] = response.data.chart_data[1].LocationResponseTimeChart[0][globals.getPINGMonitorprimarylocation][\"95_percentile\"] !== null ;\n    tests[\"chart_data LocationResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[1].LocationResponseTimeChart[0][globals.getPINGMonitorprimarylocation].chart_data !== null ;\n    \n    \n}\nelse\n{tests[\"chart_data is missing\"] = responseBody.has(\"chart_data\");}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Info data validation\nif (response.hasOwnProperty('info')) {\n    pm.test(\"Info node\", function() {\n        pm.expect(pm.response.code).to.equal(200);\n    });\n    pm.test(\"resource_name\", function() {\n        pm.expect(response.info.hasOwnProperty('resource_name')).to.be.true;\n    });\n    pm.test(\"end_time\", function() {\n        pm.expect(response.info.hasOwnProperty('end_time')).to.be.true;\n    });\n    pm.test('resource_type_name', function() {\n        pm.expect(nr.info.resource_type_name).to.equal('Monitor');\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(response.info.hasOwnProperty('report_name')).to.be.true;\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(response.info.hasOwnProperty('period_name')).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.info.hasOwnProperty('formatted_start_time')).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.info.hasOwnProperty('generated_time')).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.info.hasOwnProperty('formatted_end_time')).to.be.true;\n    });\n    pm.test(\"segment_type\", function() {\n        pm.expect(response.info.hasOwnProperty('segment_type')).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(response.info.hasOwnProperty('start_time')).to.be.true;\n    });\n    pm.test('resource type', function() {\n        pm.expect(nr.info.resource_type).to.equal(2);\n    });\n    pm.test(\"period\", function() {\n        pm.expect(response.info.hasOwnProperty('period')).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.info.hasOwnProperty('formatted_generated_time')).to.be.true;\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(response.info.hasOwnProperty('report_type')).to.be.true;\n    });\n    pm.test(\"segment_type_name\", function() {\n        pm.expect(response.info.hasOwnProperty('segment_type_name')).to.be.true;\n    });\n    pm.test(\"metric_aggregation_name\", function() {\n        pm.expect(response.info.hasOwnProperty('metric_aggregation_name')).to.be.true;\n    });\n    pm.test(\"metric_aggregation\", function() {\n        pm.expect(response.info.hasOwnProperty('metric_aggregation')).to.be.true;\n    });\n    if (response.info.hasOwnProperty('resource_tags')) {\n        pm.test(\"resource_tags\", function() {\n            pm.expect(response.info.hasOwnProperty('resource_tags')).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"info is missing\", function() {\n        pm.expect(response.hasOwnProperty('info')).to.be.true;\n    });\n}\n\n// table_data validation\nif (response.hasOwnProperty('table_data')) {\n    pm.test(\"table_data\", function() {\n        pm.expect(pm.response.code).to.equal(200);\n    });\n    pm.test(\"table_data exists\", function() {\n        pm.expect(response.hasOwnProperty('table_data') && nr.table_data !== null).to.be.true;\n    });\n    pm.test(\"table_data response\", function() {\n        pm.expect(response.table_data.hasOwnProperty(pm.globals.get(\"PINGMonitorprimarylocation\")) && nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME !== null).to.be.true;\n    });\n    pm.test(\"table_data max\", function() {\n        pm.expect(nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.hasOwnProperty('max') && nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.max !== null).to.be.true;\n    });\n    pm.test(\"table_data min\", function() {\n        pm.expect(nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.hasOwnProperty('min') && nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.min !== null).to.be.true;\n    });\n    pm.test(\"table_data average\", function() {\n        pm.expect(nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.hasOwnProperty('average') && nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.average !== null).to.be.true;\n    });\n    pm.test(\"table_data unit\", function() {\n        pm.expect(nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.hasOwnProperty('unit') && nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.unit !== null).to.be.true;\n    });\n    pm.test(\"table_data average_description\", function() {\n        pm.expect(nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.hasOwnProperty('average_description') && nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.average_description !== null).to.be.true;\n    });\n    pm.test(\"table_data title\", function() {\n        pm.expect(nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.hasOwnProperty('title') && nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME !== null).to.be.true;\n    });\n    pm.test(\"table_data chart_data\", function() {\n        pm.expect(nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.hasOwnProperty('chart_data') && nr.table_data[pm.globals.get(\"PINGMonitorprimarylocation\")].RESPONSETIME.chart_data !== null).to.be.true;\n    });\n} else {\n    pm.test(\"table_data is missing\", function() {\n        pm.expect(response.hasOwnProperty('table_data')).to.be.true;\n    });\n}\n\n// chart_data validation\nif (response.hasOwnProperty('chart_data')) {\n    pm.test(\"chart_data\", function() {\n        pm.expect(pm.response.code).to.equal(200);\n    });\n    pm.test(\"chart_data exists\", function() {\n        pm.expect(response.hasOwnProperty('chart_data') && nr.chart_data !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart\", function() {\n        pm.expect(nr.chart_data[0].hasOwnProperty('ResponseTimeChart') && nr.chart_data[0].ResponseTimeChart !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart max\", function() {\n        pm.expect(nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].hasOwnProperty('max') && nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].max !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart min\", function() {\n        pm.expect(nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].hasOwnProperty('min') && nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].min !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart label\", function() {\n        pm.expect(nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].hasOwnProperty('label') && nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].label !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart average\", function() {\n        pm.expect(nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].hasOwnProperty('average') && nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].average !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart 95_percentile\", function() {\n        pm.expect(nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].hasOwnProperty(\"95_percentile\") && nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")][\"95_percentile\"] !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart chart_data\", function() {\n        pm.expect(nr.chart_data[0].ResponseTimeChart[0].hasOwnProperty('chart_data') && nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].chart_data !== null).to.be.true;\n    });\n\n    // Location Response time charts\n    pm.test(\"chart_data LocationResponseTimeChart\", function() {\n        pm.expect(nr.chart_data[1].hasOwnProperty('LocationResponseTimeChart') && nr.chart_data[1].LocationResponseTimeChart !== null).to.be.true;\n    });\n    pm.test(\"chart_data LocationResponseTimeChart max\", function() {\n        pm.expect(nr.chart_data[1].LocationResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].hasOwnProperty('max') && nr.chart_data[1].LocationResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].max !== null).to.be.true;\n    });\n    pm.test(\"chart_data LocationResponseTimeChart min\", function() {\n        pm.expect(nr.chart_data[1].LocationResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].hasOwnProperty('min') && nr.chart_data[1].LocationResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].min !== null).to.be.true;\n    });\n    pm.test(\"chart_data LocationResponseTimeChart label\", function() {\n        pm.expect(nr.chart_data[1].LocationResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].hasOwnProperty('label') && nr.chart_data[1].LocationResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].label !== null).to.be.true;\n    });\n    pm.test(\"chart_data LocationResponseTimeChart average\", function() {\n        pm.expect(nr.chart_data[1].LocationResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].hasOwnProperty('average') && nr.chart_data[1].LocationResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].average !== null).to.be.true;\n    });\n    pm.test(\"chart_data LocationResponseTimeChart 95_percentile\", function() {\n        pm.expect(nr.chart_data[1].LocationResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].hasOwnProperty(\"95_percentile\") && nr.chart_data[1].LocationResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")][\"95_percentile\"] !== null).to.be.true;\n    });\n    pm.test(\"chart_data LocationResponseTimeChart chart_data\", function() {\n        pm.expect(nr.chart_data[1].LocationResponseTimeChart[0].hasOwnProperty('chart_data') && nr.chart_data[1].LocationResponseTimeChart[0][pm.globals.get(\"PINGMonitorprimarylocation\")].chart_data !== null).to.be.true;\n    });\n} else {\n    pm.test(\"chart_data is missing\", function() {\n        pm.expect(response.hasOwnProperty('chart_data')).to.be.false;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\npostman.setGlobalVariable(\"getPORT_SMTPMonitorlocationprofile\", response.data.location_profile_id);",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.globals.set(\"getPORT_SMTPMonitorlocationprofile\", nr.location_profile_id);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n var response = JSON.parse(responseBody);\nvar j = response.data.length - 1;\n\n for (i=0 ;  i<= j ; i++ )\n {\n     if (response.data[i].profile_id === globals.getPORT_SMTPMonitorlocationprofile)\n { tests[\"if\"] = responseCode.code === 200;\n  postman.setGlobalVariable(\"getPORT_SMTPMonitorprimarylocation\", response.data[i].primary_location);\n \n }\n \n }",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar j = nr.length - 1;\n\nfor (var i = 0; i <= j; i++) {\n    if (nr[i].profile_id === pm.globals.get(\"PORT_SMTPMonitorlocationprofile\")) {\n        pm.test(\"if\", function() {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.globals.set(\"getPORT_SMTPMonitorprimarylocation\", nr[i].primary_location);\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Info data validation\nif(responseBody.has(\"info\"))\n\n\n{  \n   \n    tests[\"Info node\"] = responseCode.code === 200;\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"metric_aggregation_name\"] = responseBody.has(\"metric_aggregation_name\");\n    tests[\"metric_aggregation\"] = responseBody.has(\"metric_aggregation\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n// table_data validation\nif(responseBody.has(\"table_data\"))\n{ \n    tests[\"table_data\"] = responseCode.code === 200;\n    tests[\"table_data not null\"] = responseBody.has(\"table_data\") && response.data.table_data !== null;\n    tests[\"table_data response\"] = responseBody.has('RESPONSETIME\":{') && response.data.table_data[globals.getPORT_SMTPMonitorprimarylocation].RESPONSETIME !== null ;\n    \n   tests[\"table_data max\"] = responseBody.has('max') && response.data.table_data[globals.getPORT_SMTPMonitorprimarylocation].RESPONSETIME.max !== null ;\n    console.log(\"Priya\",response.data.table_data[globals.getPORT_SMTPMonitorprimarylocation].RESPONSETIME);\n   \n    \n    tests[\"table_data min\"] = responseBody.has('min') && response.data.table_data[globals.getPORT_SMTPMonitorprimarylocation].RESPONSETIME.min !== null ;\n    tests[\"table_data average\"] = responseBody.has('average') && response.data.table_data[globals.getPORT_SMTPMonitorprimarylocation].RESPONSETIME.average !== null ;\n    tests[\"table_data unit\"] = responseBody.has('unit') && response.data.table_data[globals.getPORT_SMTPMonitorprimarylocation].RESPONSETIME.unit !== null ;\n    tests[\"table_data average_description\"] = responseBody.has('average_description') && response.data.table_data[globals.getPORT_SMTPMonitorprimarylocation].RESPONSETIME.average_description !== null ;\n    tests[\"table_data title\"] = responseBody.has('title') && response.data.table_data[globals.getPORT_SMTPMonitorprimarylocation].RESPONSETIME !== null ;\n    tests[\"table_data chart_data\"] = responseBody.has('chart_data\":[') && response.data.table_data[globals.getPORT_SMTPMonitorprimarylocation].RESPONSETIME.chart_data !== null ;\n\n}\nelse\n{tests[\"table_data is missing\"] = responseBody.has(\"table_data\");}\n\n// chart_data validation\nif(responseBody.has(\"chart_data\"))\n{   tests[\"chart_data\"] = responseCode.code === 200;\n    tests[\"chart_data\"] = responseBody.has(\"chart_data\") && response.data.chart_data !== null;\n    tests[\"chart_data ResponseTimeChart\"] = responseBody.has('ResponseTimeChart\":[') && response.data.chart_data[0].ResponseTimeChart !== null ;\n    tests[\"chart_data ResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[0].ResponseTimeChart[0][globals.getPORT_SMTPMonitorprimarylocation].max !== null ;\n    tests[\"chart_data ResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPORT_SMTPMonitorprimarylocation].min !== null ;\n    tests[\"chart_data ResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPORT_SMTPMonitorprimarylocation].label !== null ;\n    tests[\"chart_data ResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPORT_SMTPMonitorprimarylocation].average !== null ;\n   tests[\"chart_data ResponseTimeChart 95_percentile\"] = response.data.chart_data[0].ResponseTimeChart[0][globals.getPORT_SMTPMonitorprimarylocation][\"95_percentile\"] !== null ;\n    tests[\"chart_data ResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[0].ResponseTimeChart[0][globals.getPORT_SMTPMonitorprimarylocation].chart_data !== null ;\n\n    \n    \n    // Location Response time charts\n    var j=response.data.chart_data[1].LocationResponseTimeChart.length-1;\n    \n    //var getPORT_SMTPMonitorprimarylocationplace;\n    for (i=0 ;  i<= j ; i++ )\n     {\n     if (response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPORT_SMTPMonitorprimarylocation] !== null)\n        {  \n           postman.setGlobalVariable(\"getPORT_SMTPMonitorprimarylocationplace\", i);\n           \n           break;\n        }\n     }\n    tests[\"chart_data LocationResponseTimeChart\"] = responseBody.has('LocationResponseTimeChart\":[') && response.data.chart_data[1].LocationResponseTimeChart !== null ;\n    \n    for(i=0; i<response.data.chart_data[1].LocationResponseTimeChart;i++){\n        if(Object.keys(response.data.chart_data[1].LocationResponseTimeChart[i])[0] === globals.getPORT_SMTPMonitorprimarylocation){\n            tests[\"chart_data LocationResponseTimeChart max\"] = responseBody.has('max') && response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPORT_SMTPMonitorprimarylocation]['max'] !== null ;\n            tests[\"chart_data LocationResponseTimeChart min\"] = responseBody.has('min') &&  response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPORT_SMTPMonitorprimarylocation]['min'] !== null ;\n            tests[\"chart_data LocationResponseTimeChart label\"] = responseBody.has('label') &&  response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPORT_SMTPMonitorprimarylocation]['label'] !== null ;\n            tests[\"chart_data LocationResponseTimeChart average\"] = responseBody.has('average') &&  response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPORT_SMTPMonitorprimarylocation]['average'] !== null ;\n            tests[\"chart_data LocationResponseTimeChart 95_percentile\"] = response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPORT_SMTPMonitorprimarylocation][\"95_percentile\"] !== null ;\n            tests[\"chart_data LocationResponseTimeChart chart_data\"] = responseBody.has('chart_data') &&  response.data.chart_data[1].LocationResponseTimeChart[i][globals.getPORT_SMTPMonitorprimarylocation]['chart_data'] !== null ;     \n        }\n    }\n    \n    \n    \n    \n}\nelse\n{tests[\"chart_data is missing\"] = responseBody.has(\"chart_data\");}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\nif (nr.hasOwnProperty(\"info\")) {\n    pm.test(\"Info node\", function() {\n        pm.expect(pm.response.code).to.eql(200);\n    });\n    pm.test(\"resource_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"resource_name\")).to.be.true;\n    });\n    pm.test(\"end_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"resource_type_name\", function() {\n        pm.expect(nr.info.resource_type_name).to.eql('Monitor');\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"segment_type\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"segment_type\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"resource type\", function() {\n        pm.expect(nr.info.resource_type).to.eql(2);\n    });\n    pm.test(\"period\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n    pm.test(\"segment_type_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"segment_type_name\")).to.be.true;\n    });\n    pm.test(\"metric_aggregation_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"metric_aggregation_name\")).to.be.true;\n    });\n    pm.test(\"metric_aggregation\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"metric_aggregation\")).to.be.true;\n    });\n    if (nr.info.hasOwnProperty(\"resource_tags\")) {\n        pm.test(\"resource_tags\", function() {\n            pm.expect(nr.info.hasOwnProperty(\"resource_tags\")).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"info is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\nif (nr.hasOwnProperty(\"table_data\")) {\n    pm.test(\"table_data\", function() {\n        pm.expect(pm.response.code).to.eql(200);\n    });\n    pm.test(\"table_data not null\", function() {\n        pm.expect(nr.hasOwnProperty(\"table_data\") && nr.table_data !== null).to.be.true;\n    });\n    pm.test(\"table_data response\", function() {\n        pm.expect(nr.table_data.hasOwnProperty(\"RESPONSETIME\") && nr.table_data[pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].RESPONSETIME !== null).to.be.true;\n    });\n    pm.test(\"table_data max\", function() {\n        pm.expect(nr.table_data.hasOwnProperty('RESPONSETIME') && nr.table_data[pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].RESPONSETIME.max !== null).to.be.true;\n    });\n    console.log(\"Priya\", nr.table_data[pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].RESPONSETIME);\n    pm.test(\"table_data min\", function() {\n        pm.expect(nr.table_data.hasOwnProperty('RESPONSETIME') && nr.table_data[pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].RESPONSETIME.min !== null).to.be.true;\n    });\n    pm.test(\"table_data average\", function() {\n        pm.expect(nr.table_data.hasOwnProperty('RESPONSETIME') && nr.table_data[pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].RESPONSETIME.average !== null).to.be.true;\n    });\n    pm.test(\"table_data unit\", function() {\n        pm.expect(nr.table_data.hasOwnProperty('RESPONSETIME') && nr.table_data[pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].RESPONSETIME.unit !== null).to.be.true;\n    });\n    pm.test(\"table_data average_description\", function() {\n        pm.expect(nr.table_data.hasOwnProperty('RESPONSETIME') && nr.table_data[pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].RESPONSETIME.average_description !== null).to.be.true;\n    });\n    pm.test(\"table_data title\", function() {\n        pm.expect(nr.table_data.hasOwnProperty('RESPONSETIME') && nr.table_data[pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].RESPONSETIME !== null).to.be.true;\n    });\n    pm.test(\"table_data chart_data\", function() {\n        pm.expect(nr.table_data.hasOwnProperty('RESPONSETIME') && nr.table_data[pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].RESPONSETIME.chart_data !== null).to.be.true;\n    });\n} else {\n    pm.test(\"table_data is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"table_data\")).to.be.true;\n    });\n}\n\nif (nr.hasOwnProperty(\"chart_data\")) {\n    pm.test(\"chart_data\", function() {\n        pm.expect(pm.response.code).to.eql(200);\n    });\n    pm.test(\"chart_data not null\", function() {\n        pm.expect(nr.hasOwnProperty(\"chart_data\") && nr.chart_data !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart\", function() {\n        pm.expect(nr.chart_data.hasOwnProperty('ResponseTimeChart') && nr.chart_data[0].ResponseTimeChart !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart max\", function() {\n        pm.expect(nr.chart_data.hasOwnProperty('ResponseTimeChart') && nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].max !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart min\", function() {\n        pm.expect(nr.chart_data.hasOwnProperty('ResponseTimeChart') && nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].min !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart label\", function() {\n        pm.expect(nr.chart_data.hasOwnProperty('ResponseTimeChart') && nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].label !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart average\", function() {\n        pm.expect(nr.chart_data.hasOwnProperty('ResponseTimeChart') && nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].average !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart 95_percentile\", function() {\n        pm.expect(nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")][\"95_percentile\"] !== null).to.be.true;\n    });\n    pm.test(\"chart_data ResponseTimeChart chart_data\", function() {\n        pm.expect(nr.chart_data.hasOwnProperty('ResponseTimeChart') && nr.chart_data[0].ResponseTimeChart[0][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")].chart_data !== null).to.be.true;\n    });\n\n    var j = nr.chart_data[1].LocationResponseTimeChart.length - 1;\n    for (var i = 0; i <= j; i++) {\n        if (nr.chart_data[1].LocationResponseTimeChart[i][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")] !== null) {\n            pm.globals.set(\"getPORT_SMTPMonitorprimarylocationplace\", i);\n            break;\n        }\n    }\n    pm.test(\"chart_data LocationResponseTimeChart\", function() {\n        pm.expect(nr.chart_data.hasOwnProperty('LocationResponseTimeChart') && nr.chart_data[1].LocationResponseTimeChart !== null).to.be.true;\n    });\n\n    for (var i = 0; i < nr.chart_data[1].LocationResponseTimeChart.length; i++) {\n        if (Object.keys(nr.chart_data[1].LocationResponseTimeChart[i])[0] === pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")) {\n            pm.test(\"chart_data LocationResponseTimeChart max\", function() {\n                pm.expect(nr.chart_data.hasOwnProperty('LocationResponseTimeChart') && nr.chart_data[1].LocationResponseTimeChart[i][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")]['max'] !== null).to.be.true;\n            });\n            pm.test(\"chart_data LocationResponseTimeChart min\", function() {\n                pm.expect(nr.chart_data.hasOwnProperty('LocationResponseTimeChart') && nr.chart_data[1].LocationResponseTimeChart[i][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")]['min'] !== null).to.be.true;\n            });\n            pm.test(\"chart_data LocationResponseTimeChart label\", function() {\n                pm.expect(nr.chart_data.hasOwnProperty('LocationResponseTimeChart') && nr.chart_data[1].LocationResponseTimeChart[i][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")]['label'] !== null).to.be.true;\n            });\n            pm.test(\"chart_data LocationResponseTimeChart average\", function() {\n                pm.expect(nr.chart_data.hasOwnProperty('LocationResponseTimeChart') && nr.chart_data[1].LocationResponseTimeChart[i][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")]['average'] !== null).to.be.true;\n            });\n            pm.test(\"chart_data LocationResponseTimeChart 95_percentile\", function() {\n                pm.expect(nr.chart_data[1].LocationResponseTimeChart[i][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")][\"95_percentile\"] !== null).to.be.true;\n            });\n            pm.test(\"chart_data LocationResponseTimeChart chart_data\", function() {\n                pm.expect(nr.chart_data.hasOwnProperty('LocationResponseTimeChart') && nr.chart_data[1].LocationResponseTimeChart[i][pm.globals.get(\"getPORT_SMTPMonitorprimarylocation\")]['chart_data'] !== null).to.be.true;\n            });\n        }\n    }\n} else {\n    pm.test(\"chart_data is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"chart_data\")).to.be.true;\n    });\n}\nif (nr.hasOwnProperty(\"availability_details\")) {\n    pm.test(\"availability_details\", function() {\n        pm.expect(pm.response.code).to.eql(200);\n    });\n    pm.test(\"availability_details not null\", function() {\n        pm.expect(nr.hasOwnProperty(\"availability_details\") && nr.availability_details !== null).to.be.true;\n    });\n} else {\n    pm.test(\"availability_details is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"availability_details\")).to.be.true;\n    });\n}\n\nif (nr.hasOwnProperty(\"outage_details\")) {\n    pm.test(\"outage_details\", function() {\n        pm.expect(pm.response.code).to.eql(200);\n    });\n    pm.test(\"outage_details not null\", function() {\n        pm.expect(nr.hasOwnProperty(\"outage_details\") && nr.outage_details !== null).to.be.true;\n    });\n} else {\n    pm.test(\"outage_details is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"outage_details\")).to.be.true;\n    });\n}\n\nif (nr.hasOwnProperty(\"profile_details\")) {\n    pm.test(\"profile_details\", function() {\n        pm.expect(pm.response.code).to.eql(200);\n    });\n    pm.test(\"profile_details not null\", function() {\n        pm.expect(nr.hasOwnProperty(\"profile_details\") && nr.profile_details !== null).to.be.true;\n    });\n} else {\n    pm.test(\"profile_details is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"profile_details\")).to.be.true;\n    });\n}\nif (nr.hasOwnProperty(\"summary_details\")) {\n    pm.test(\"summary_details\", function() {\n        pm.expect(pm.response.code).to.eql(200);\n    });\n    pm.test(\"summary_details not null\", function() {\n        pm.expect(nr.hasOwnProperty(\"summary_details\") && nr.summary_details !== null).to.be.true;\n    });\n    pm.test(\"down_count\", function() {\n        pm.expect(nr.summary_details.down_count !== null).to.be.true;\n    });\n    pm.test(\"downtime_duration\", function() {\n        pm.expect(nr.summary_details.downtime_duration !== null).to.be.true;\n    });\n} else {\n    pm.test(\"summary_details is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"summary_details\")).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"response code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nif(responseData.data.length > 0)\n{\n    var pluginData = responseData.data[0];\n    var templateId = pluginData.servers[0].id;\n    var pluginId = pluginData.servers[0].id;\n    var pluginAttribute = pluginData.attribute_list[0].id;\n\n    postman.setGlobalVariable(\"template_id\", templateId);\n    postman.setGlobalVariable(\"plugin_id\",  pluginId);\n    postman.setGlobalVariable(\"plugin_attribute\", pluginAttribute);\n}",
    "output": "pm.test(\"response code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\nif (Array.isArray(nr) && nr.length > 0) {\n    var pluginData = nr[0];\n    var templateId = pluginData.servers[0].id;\n    var pluginId = pluginData.servers[0].id;\n    var pluginAttribute = pluginData.attribute_list[0].id;\n\n    pm.globals.set(\"template_id\", templateId);\n    pm.globals.set(\"plugin_id\", pluginId);\n    pm.globals.set(\"plugin_attribute\", pluginAttribute);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody); \nif (jsonData.code===0)\n{\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"message : success\"] = jsonData.message === \"success\";\n    var data = JSON.parse(responseBody)['data'];\n    var dataSchema = {\n        \"properties\": {\n            \"type\": \"object\",\n            \"chart_data\" : { \n                                \"type\": \"array\",\n                                \"minItems\":0\n                            },\n            \"chart_info\": { \"type\": \"object\"},\n            \"info\" : {\n                        \"type\" : \"object\",\n                        \"period\": {\"type\":\"integer\"},\n                        \"resource_type\": {\"type\":\"integer\"},\n                        \"end_time\": {\"type\":\"string\"},\n                        \"segment_type_name\": {\"type\":\"string\"},\n                        \"period_name\": {\"type\":\"string\"},\n                        \"formatted_start_time\": {\"type\":\"string\"},\n                        \"metric_aggregation_name\": {\"type\":\"string\"},\n                        \"report_type\": {\"type\":\"integer\"},\n                        \"formatted_generated_time\":{\"type\":\"string\"},\n                        \"formatted_end_time\": {\"type\":\"string\"},\n                        \"generated_time\": {\"type\":\"string\"},\n                        \"start_time\": {\"type\":\"string\"},\n                        \"metric_aggregation\": {\"type\":\"integer\"},\n                        \"resource_id\": {\"type\":\"string\"},\n                        \"segment_type\": {\"type\":\"integer\"},\n                        \"resource_name\": {\"type\":\"string\"},\n                        \"report_name\": {\"type\":\"string\"},\n                        \"monitor_type\": {\"type\":\"string\"},\n                    },\n            \n        },\n        \"required\": [ \"chart_data\", \"chart_info\", \"info\"]\n    };\n    tests['Template Valid '] = tv4.validate(data, dataSchema);\n}",
    "output": "var response = pm.response.json();\nif (response.code === 0) {\n    pm.test(\"Status code is 200\", function () {\n        pm.expect(pm.response.code).to.equal(200);\n    });\n\n    pm.test(\"message : success\", function () {\n        pm.expect(response.message).to.equal(\"success\");\n    });\n\n    var nr = response.data || {};\n    var dataSchema = {\n        \"properties\": {\n            \"type\": \"object\",\n            \"chart_data\": {\n                \"type\": \"array\",\n                \"minItems\": 0\n            },\n            \"chart_info\": {\"type\": \"object\"},\n            \"info\": {\n                \"type\": \"object\",\n                \"period\": {\"type\": \"integer\"},\n                \"resource_type\": {\"type\": \"integer\"},\n                \"end_time\": {\"type\": \"string\"},\n                \"segment_type_name\": {\"type\": \"string\"},\n                \"period_name\": {\"type\": \"string\"},\n                \"formatted_start_time\": {\"type\": \"string\"},\n                \"metric_aggregation_name\": {\"type\": \"string\"},\n                \"report_type\": {\"type\": \"integer\"},\n                \"formatted_generated_time\": {\"type\": \"string\"},\n                \"formatted_end_time\": {\"type\": \"string\"},\n                \"generated_time\": {\"type\": \"string\"},\n                \"start_time\": {\"type\": \"string\"},\n                \"metric_aggregation\": {\"type\": \"integer\"},\n                \"resource_id\": {\"type\": \"string\"},\n                \"segment_type\": {\"type\": \"integer\"},\n                \"resource_name\": {\"type\": \"string\"},\n                \"report_name\": {\"type\": \"string\"},\n                \"monitor_type\": {\"type\": \"string\"}\n            }\n        },\n        \"required\": [\"chart_data\", \"chart_info\", \"info\"]\n    };\n\n    pm.test('Template Valid', function () {\n        pm.expect(tv4.validate(nr, dataSchema)).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nif (jsonData.error_code===1100)\n{\n    tests[\"error_code\"] = jsonData.error_code === 1100;\n    tests[\"message \"] = jsonData.message ===\"You are not authorized to perform this operation.\";\n    }\nelse\n{\n    tests[\"App availability authorization failed\"] = jsonData.code === 1100;\n}",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"error_code\", function() {\n    if (response.error_code === 1100) {\n        pm.expect(response.error_code).to.eql(1100);\n    }\n});\n\npm.test(\"message\", function() {\n    if (response.error_code === 1100) {\n        pm.expect(response.message).to.eql(\"You are not authorized to perform this operation.\");\n    }\n});\n\npm.test(\"App availability authorization failed\", function() {\n    if (response.error_code !== 1100) {\n        pm.expect(response.code).to.eql(1100);\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nvar monitorList = responseData.data.monitors;\npostman.clearGlobalVariable(\"getRBMMonitor\");\nfor(var i in monitorList)\n{\n    var monitor = monitorList[i];\n    if(monitor.monitor_type === 'REALBROWSER' && monitor.status === 1)\n    {\n        var monitorId = postman.getGlobalVariable(\"getRBMMonitor\");\n        if( monitorId !== undefined)\n        { \n            var arr = [];\n            arr[0] = monitorId;\n            arr[1] = monitor.monitor_id;\n            postman.setGlobalVariable(\"getRBMMonitor\", arr);\n            break;\n        }\n        else\n        {\n            var arr = [];\n            arr[0] = monitor.monitor_id\n            postman.setGlobalVariable(\"getRBMMonitor\", monitor.monitor_id);\n        }\n    }\n}\ntests[postman.getGlobalVariable(\"getRBMMonitor\")] = responseCode.code === 200;",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar monitorList = nr.monitors;\n\npm.globals.unset(\"getRBMMonitor\");\n\nfor (var i in monitorList) {\n    var monitor = monitorList[i];\n    if (monitor.monitor_type === 'REALBROWSER' && monitor.status === 1) {\n        var monitorId = pm.globals.get(\"getRBMMonitor\");\n        if (monitorId !== undefined) {\n            var arr = [];\n            arr[0] = monitorId;\n            arr[1] = monitor.monitor_id;\n            pm.globals.set(\"getRBMMonitor\", arr);\n            break;\n        } else {\n            pm.globals.set(\"getRBMMonitor\", monitor.monitor_id);\n        }\n    }\n}\n\npm.test(pm.globals.get(\"getRBMMonitor\"), function () {\n    pm.expect(pm.response.code).to.equal(200);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nvar reportdetails = responseData.data.report_details\n\npm.globals.set(\"ge\", reportdetails.length);\nfor (i=0; i<reportdetails.length; i++)\n{\n   tests[\"report_details\"] = responseBody.has(\"report_details\") && responseData.data.report_details !== null;\n        tests[\"step_summary_details\"] = responseBody.has(\"step_summary_details\") && responseData.data.report_details[i].step_summary_details !== null;\n            var report = JSON.stringify(responseData.data.report_details[i].step_summary_details);\n        if (report.has(\"steps\"))\n        {\n            tests[\"steps \"+i+\" response_time\"] = report.has(\"response_time\") && report[i].response_time !== null;\n            tests[\"steps \"+i+\" name\"] = report.has(\"name\") && report[i].name !== null;\n            tests[\"steps \"+i+\" availability\"] = report.has(\"availability\") && report[i].availability !== null;\n        }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"info\", function() {\n    pm.expect(response.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n});\n\nvar reportdetails = nr.report_details || [];\npm.globals.set(\"ge\", reportdetails.length);\n\nfor (var i = 0; i < reportdetails.length; i++) {\n    pm.test(\"report_details\", function() {\n        pm.expect(response.hasOwnProperty(\"report_details\") && nr.report_details !== null).to.be.true;\n    });\n\n    pm.test(\"step_summary_details\", function() {\n        pm.expect(response.hasOwnProperty(\"step_summary_details\") && reportdetails[i].step_summary_details !== null).to.be.true;\n    });\n\n    var report = reportdetails[i].step_summary_details || {};\n\n    if (report.hasOwnProperty(\"steps\")) {\n        pm.test(\"steps \" + i + \" response_time\", function() {\n            pm.expect(report.hasOwnProperty(\"response_time\") && report.response_time !== null).to.be.true;\n        });\n\n        pm.test(\"steps \" + i + \" name\", function() {\n            pm.expect(report.hasOwnProperty(\"name\") && report.name !== null).to.be.true;\n        });\n\n        pm.test(\"steps \" + i + \" availability\", function() {\n            pm.expect(report.hasOwnProperty(\"availability\") && report.availability !== null).to.be.true;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var mid = postman.getGlobalVariable(\"getRBMMonitor\");\nif(mid.has(\",\"))\n{\n    postman.setGlobalVariable(\"rbmmid\",mid.substring(0,mid.indexOf(\",\")));\n}\nelse\n{\n    postman.setGlobalVariable(\"rbmmid\",mid);\n}",
    "output": "var mid = pm.globals.get(\"getRBMMonitor\");\nif(mid.includes(\",\"))\n{\n    pm.globals.set(\"rbmmid\", mid.substring(0, mid.indexOf(\",\")));\n}\nelse\n{\n    pm.globals.set(\"rbmmid\", mid);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nvar reportdetails = responseData.data.report_details\n\npm.globals.set(\"qge\", reportdetails.length);\nfor (i=0; i<reportdetails.length; i++)\n{\n   tests[\"report_details\"] = responseBody.has(\"report_details\") && responseData.data.report_details !== null;\n    for (j=0; j<reportdetails[i].steps.length; j++)\n    {\n            var report = JSON.stringify(reportdetails[i].steps);\n         tests[\"steps.response_time\"] = report.has(\"response_time\") && report[j].response_time !== null;\n          tests[\"steps.name\"] = report.has(\"name\") && report[j].name !== null;\n            tests[\"steps.availability\"] = report.has(\"availability\") && report[j].availability !== null;\n        }\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"info\", function () {\n    pm.expect(nr).to.have.property(\"info\").that.is.not.null;\n});\n\nvar reportdetails = nr.report_details || [];\n\npm.globals.set(\"qge\", reportdetails.length);\n\nfor (var i = 0; i < reportdetails.length; i++) {\n    pm.test(\"report_details\", function () {\n        pm.expect(nr).to.have.property(\"report_details\").that.is.not.null;\n    });\n\n    for (var j = 0; j < reportdetails[i].steps.length; j++) {\n        var report = reportdetails[i].steps[j];\n\n        pm.test(\"steps.response_time\", function () {\n            pm.expect(report).to.have.property(\"response_time\").that.is.not.null;\n        });\n\n        pm.test(\"steps.name\", function () {\n            pm.expect(report).to.have.property(\"name\").that.is.not.null;\n        });\n\n        pm.test(\"steps.availability\", function () {\n            pm.expect(report).to.have.property(\"availability\").that.is.not.null;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var mid = postman.getGlobalVariable(\"getRBMMonitor\");\nif(mid.has(\",\"))\n{\n    postman.setGlobalVariable(\"rbmmid\",mid.substring(0,mid.indexOf(\",\")));\n}\nelse\n{\n    postman.setGlobalVariable(\"rbmmid\",mid);\n}",
    "output": "var mid = pm.globals.get(\"getRBMMonitor\");\nif(mid.includes(\",\")) {\n    pm.globals.set(\"rbmmid\", mid.substring(0, mid.indexOf(\",\")));\n} else {\n    pm.globals.set(\"rbmmid\", mid);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var mid = postman.getGlobalVariable(\"getRBMMonitor\");\nif(mid.has(\",\"))\n{\n    postman.setGlobalVariable(\"rbmmid\",mid.substring(0,mid.indexOf(\",\")));\n}\nelse\n{\n    postman.setGlobalVariable(\"rbmmid\",mid);\n}",
    "output": "var mid = pm.globals.get(\"getRBMMonitor\");\nif(mid.includes(\",\")) {\n    pm.globals.set(\"rbmmid\", mid.substring(0, mid.indexOf(\",\")));\n} else {\n    pm.globals.set(\"rbmmid\", mid);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "if (responseBody.has('data'))\n{tests[\"response code is 201\"] = responseCode.code === 201;\nvar response = JSON.parse(responseBody);\n//postman.setEnvironmentVariable(\"group\", response.data.group_id );\npostman.setGlobalVariable(\"group\", response.data.group_id );\n}\nelse\n{\n    tests[\"Unable to create monitor group\"] = responseCode.code === 200;\n}",
    "output": "if (pm.response.json().hasOwnProperty('data')) {\n    pm.test(\"response code is 201\", function() {\n        pm.expect(pm.response.code).to.equal(201);\n    });\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.globals.set(\"group\", nr.group_id);\n} else {\n    pm.test(\"Unable to create monitor group\", function() {\n        pm.expect(pm.response.code).to.equal(200);\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nvar reportdetails = responseData.data.report_details\n\npm.globals.set(\"ge\", reportdetails.length);\nfor (i=0; i<reportdetails.length; i++)\n{\n   tests[\"report_details\"] = responseBody.has(\"report_details\") && responseData.data.report_details !== null;\n        tests[\"step_summary_details\"] = responseBody.has(\"step_summary_details\") && responseData.data.report_details[i].step_summary_details !== null;\n            var report = JSON.stringify(responseData.data.report_details[i].step_summary_details);\n        if (report.has(\"steps\"))\n        {\n            tests[\"steps \"+i+\" response_time\"] = report.has(\"response_time\") && report[i].response_time !== null;\n            tests[\"steps \"+i+\" name\"] = report.has(\"name\") && report[i].name !== null;\n            tests[\"steps \"+i+\" availability\"] = report.has(\"availability\") && report[i].availability !== null;\n        }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\npm.test(\"info\", function() {\n    pm.expect(response).to.have.property(\"info\");\n    pm.expect(response.info).to.not.be.null; // Changed to response.info\n});\n\nif (response.data && response.data.report_details) { // Added check for response.data\n    var reportdetails = response.data.report_details;\n    pm.globals.set(\"ge\", reportdetails.length);\n\n    for (var i = 0; i < reportdetails.length; i++) {\n        pm.test(\"report_details\", function() {\n            pm.expect(response).to.have.property(\"report_details\");\n            pm.expect(reportdetails).to.not.be.null; // Changed to reportdetails\n        });\n\n        pm.test(\"step_summary_details\", function() {\n            pm.expect(reportdetails[i]).to.have.property(\"step_summary_details\"); // Changed to reportdetails\n            pm.expect(reportdetails[i].step_summary_details).to.not.be.null; // Changed to reportdetails\n        });\n\n        var report = reportdetails[i].step_summary_details; // Changed to reportdetails\n\n        if (report.hasOwnProperty(\"steps\")) {\n            pm.test(\"steps \" + i + \" response_time\", function() {\n                pm.expect(report.steps).to.have.property(\"response_time\");\n                pm.expect(report.steps.response_time).to.not.be.null;\n            });\n\n            pm.test(\"steps \" + i + \" name\", function() {\n                pm.expect(report.steps).to.have.property(\"name\");\n                pm.expect(report.steps.name).to.not.be.null;\n            });\n\n            pm.test(\"steps \" + i + \" availability\", function() {\n                pm.expect(report.steps).to.have.property(\"availability\");\n                pm.expect(report.steps.availability).to.not.be.null;\n            });\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nvar reportdetails = responseData.data.report_details\n\npm.globals.set(\"ge\", reportdetails.length);\nfor (i=0; i<reportdetails.length; i++)\n{\n   tests[\"report_details\"] = responseBody.has(\"report_details\") && responseData.data.report_details !== null;\n        tests[\"step_summary_details\"] = responseBody.has(\"step_summary_details\") && responseData.data.report_details[i].step_summary_details !== null;\n            var report = JSON.stringify(responseData.data.report_details[i].step_summary_details);\n        if (report.has(\"steps\"))\n        {\n            tests[\"steps \"+i+\" response_time\"] = report.has(\"response_time\") && report[i].response_time !== null;\n            tests[\"steps \"+i+\" name\"] = report.has(\"name\") && report[i].name !== null;\n            tests[\"steps \"+i+\" availability\"] = report.has(\"availability\") && report[i].availability !== null;\n        }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"info\", function() {\n    pm.expect(response.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n});\n\nvar reportdetails = nr.report_details || [];\npm.globals.set(\"ge\", reportdetails.length);\n\nfor (var i = 0; i < reportdetails.length; i++) {\n    pm.test(\"report_details\", function() {\n        pm.expect(response.hasOwnProperty(\"report_details\") && nr.report_details !== null).to.be.true;\n    });\n    pm.test(\"step_summary_details\", function() {\n        pm.expect(response.hasOwnProperty(\"step_summary_details\") && reportdetails[i].step_summary_details !== null).to.be.true;\n    });\n\n    var report = reportdetails[i].step_summary_details || {};\n    if (report.hasOwnProperty(\"steps\")) {\n        pm.test(\"steps \" + i + \" response_time\", function() {\n            pm.expect(report.hasOwnProperty(\"response_time\") && report.response_time !== null).to.be.true;\n        });\n        pm.test(\"steps \" + i + \" name\", function() {\n            pm.expect(report.hasOwnProperty(\"name\") && report.name !== null).to.be.true;\n        });\n        pm.test(\"steps \" + i + \" availability\", function() {\n            pm.expect(report.hasOwnProperty(\"availability\") && report.availability !== null).to.be.true;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Delete group response code is \"+responseCode.code] = responseCode.code === 200;\nif(responseCode.code === 200){\n    var groupData = JSON.parse(responseBody).data;\n    if(groupData.resource_name){\n        tests[\"Successfully deleted the group : \"+groupData.resource_name] = true;\n    }\n    else{\n        tests[\"Delete Group API response did not contain the name of the resource deleted\"] = false;\n    }\n}",
    "output": "pm.test(\"Delete group response code is \" + pm.response.code, function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nif (pm.response.code === 200) {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.hasOwnProperty('resource_name')) {\n        pm.test(\"Successfully deleted the group : \" + nr.resource_name, function() {\n            pm.expect(true).to.be.true;\n        });\n    } else {\n        pm.test(\"Delete Group API response did not contain the name of the resource deleted\", function() {\n            pm.expect(false).to.be.true;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nvar reportdetails = responseData.data.report_details\n\npm.globals.set(\"qge\", reportdetails.length);\nfor (i=0; i<reportdetails.length; i++)\n{\n   tests[\"report_details\"] = responseBody.has(\"report_details\") && responseData.data.report_details !== null;\n    for (j=0; j<reportdetails[i].steps.length; j++)\n    {\n            var report = JSON.stringify(reportdetails[i].steps);\n         tests[\"steps.response_time\"] = report.has(\"response_time\") && report[j].response_time !== null;\n          tests[\"steps.name\"] = report.has(\"name\") && report[j].name !== null;\n            tests[\"steps.availability\"] = report.has(\"availability\") && report[j].availability !== null;\n        }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"info\", function() {\n    pm.expect(response.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n});\n\nvar reportdetails = nr.report_details || [];\n\npm.globals.set(\"qge\", reportdetails.length);\n\nfor (var i = 0; i < reportdetails.length; i++) {\n    pm.test(\"report_details\", function() {\n        pm.expect(response.hasOwnProperty(\"report_details\") && nr.report_details !== null).to.be.true;\n    });\n\n    for (var j = 0; j < reportdetails[i].steps.length; j++) {\n        var report = reportdetails[i].steps[j];\n\n        pm.test(\"steps.response_time\", function() {\n            pm.expect(report.hasOwnProperty(\"response_time\") && report.response_time !== null).to.be.true;\n        });\n\n        pm.test(\"steps.name\", function() {\n            pm.expect(report.hasOwnProperty(\"name\") && report.name !== null).to.be.true;\n        });\n\n        pm.test(\"steps.availability\", function() {\n            pm.expect(report.hasOwnProperty(\"availability\") && report.availability !== null).to.be.true;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var mid = postman.getGlobalVariable(\"getRBMMonitor\");\nif(mid.has(\",\"))\n{\n    postman.setGlobalVariable(\"rbmmid\",mid.substring(0,mid.indexOf(\",\")));\n}\nelse\n{\n    postman.setGlobalVariable(\"rbmmid\",mid);\n}",
    "output": "var mid = pm.globals.get(\"getRBMMonitor\");\nif (mid.includes(\",\")) {\n    pm.globals.set(\"rbmmid\", mid.substring(0, mid.indexOf(\",\")));\n} else {\n    pm.globals.set(\"rbmmid\", mid);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var mid = postman.getGlobalVariable(\"getRBMMonitor\");\nif(mid.has(\",\"))\n{\n    postman.setGlobalVariable(\"rbmmid\",mid.substring(0,mid.indexOf(\",\")));\n}\nelse\n{\n    postman.setGlobalVariable(\"rbmmid\",mid);\n}",
    "output": "var mid = pm.globals.get(\"getRBMMonitor\");\nif(mid.includes(\",\")) {\n    pm.globals.set(\"rbmmid\", mid.substring(0, mid.indexOf(\",\")));\n} else {\n    pm.globals.set(\"rbmmid\", mid);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nvar reportdetails = responseData.data.report_details\n\npm.globals.set(\"qge\", reportdetails.length);\nfor (i=0; i<reportdetails.length; i++)\n{\n   tests[\"report_details\"] = responseBody.has(\"report_details\") && responseData.data.report_details !== null;\n    for (j=0; j<reportdetails[i].steps.length; j++)\n    {\n            var report = JSON.stringify(reportdetails[i].steps);\n         tests[\"steps.response_time\"] = report.has(\"response_time\") && report[j].response_time !== null;\n          tests[\"steps.name\"] = report.has(\"name\") && report[j].name !== null;\n            tests[\"steps.availability\"] = report.has(\"availability\") && report[j].availability !== null;\n        }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"info\", function() {\n    pm.expect(nr.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n});\n\nvar reportdetails = nr.report_details || [];\npm.globals.set(\"qge\", reportdetails.length);\n\nfor (var i = 0; i < reportdetails.length; i++) {\n    pm.test(\"report_details\", function() {\n        pm.expect(nr.hasOwnProperty(\"report_details\") && nr.report_details !== null).to.be.true;\n    });\n\n    for (var j = 0; j < reportdetails[i].steps.length; j++) {\n        var report = reportdetails[i].steps[j];\n\n        pm.test(\"steps.response_time\", function() {\n            pm.expect(report.hasOwnProperty(\"response_time\") && report.response_time !== null).to.be.true;\n        });\n\n        pm.test(\"steps.name\", function() {\n            pm.expect(report.hasOwnProperty(\"name\") && report.name !== null).to.be.true;\n        });\n\n        pm.test(\"steps.availability\", function() {\n            pm.expect(report.hasOwnProperty(\"availability\") && report.availability !== null).to.be.true;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var mid = postman.getGlobalVariable(\"getRBMMonitor\");\nif(mid.has(\",\"))\n{\n    postman.setGlobalVariable(\"rbmmid\",mid.substring(0,mid.indexOf(\",\")));\n}\nelse\n{\n    postman.setGlobalVariable(\"rbmmid\",mid);\n}",
    "output": "var mid = pm.globals.get(\"getRBMMonitor\");\nif(mid.includes(\",\")) {\n    pm.globals.set(\"rbmmid\", mid.substring(0, mid.indexOf(\",\")));\n} else {\n    pm.globals.set(\"rbmmid\", mid);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nvar reportdetails = responseData.data.report_details\n\npm.globals.set(\"qge\", reportdetails.length);\nfor (i=0; i<reportdetails.length; i++)\n{\n   tests[\"report_details\"] = responseBody.has(\"report_details\") && responseData.data.report_details !== null;\n    for (j=0; j<reportdetails[i].steps.length; j++)\n    {\n            var report = JSON.stringify(reportdetails[i].steps);\n         tests[\"steps.response_time\"] = report.has(\"response_time\") && report[j].response_time !== null;\n          tests[\"steps.name\"] = report.has(\"name\") && report[j].name !== null;\n            tests[\"steps.availability\"] = report.has(\"availability\") && report[j].availability !== null;\n        }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"info\", function() {\n    pm.expect(response.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n});\n\nvar reportdetails = nr.report_details || [];\n\npm.globals.set(\"qge\", reportdetails.length);\n\nfor (var i = 0; i < reportdetails.length; i++) {\n    pm.test(\"report_details\", function() {\n        pm.expect(response.hasOwnProperty(\"report_details\") && nr.report_details !== null).to.be.true;\n    });\n\n    var steps = reportdetails[i].steps || [];\n\n    for (var j = 0; j < steps.length; j++) {\n        pm.test(\"steps.response_time\", function() {\n            pm.expect(steps[j].hasOwnProperty(\"response_time\") && steps[j].response_time !== null).to.be.true;\n        });\n\n        pm.test(\"steps.name\", function() {\n            pm.expect(steps[j].hasOwnProperty(\"name\") && steps[j].name !== null).to.be.true;\n        });\n\n        pm.test(\"steps.availability\", function() {\n            pm.expect(steps[j].hasOwnProperty(\"availability\") && steps[j].availability !== null).to.be.true;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var mid = postman.getGlobalVariable(\"getRBMMonitor\");\nif(mid.has(\",\"))\n{\n    postman.setGlobalVariable(\"rbmmid\",mid.substring(0,mid.indexOf(\",\")));\n}\nelse\n{\n    postman.setGlobalVariable(\"rbmmid\",mid);\n}",
    "output": "var mid = pm.globals.get(\"getRBMMonitor\");\nif (mid.includes(\",\")) {\n    pm.globals.set(\"rbmmid\", mid.substring(0, mid.indexOf(\",\")));\n} else {\n    pm.globals.set(\"rbmmid\", mid);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nvar reportdetails = responseData.data.report_details\n\npm.globals.set(\"qge\", reportdetails.length);\nfor (i=0; i<reportdetails.length; i++)\n{\n   tests[\"report_details\"] = responseBody.has(\"report_details\") && responseData.data.report_details !== null;\n    for (j=0; j<reportdetails[i].steps.length; j++)\n    {\n            var report = JSON.stringify(reportdetails[i].steps);\n         tests[\"steps.response_time\"] = report.has(\"response_time\") && report[j].response_time !== null;\n          tests[\"steps.name\"] = report.has(\"name\") && report[j].name !== null;\n            tests[\"steps.availability\"] = report.has(\"availability\") && report[j].availability !== null;\n        }\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"info\", function () {\n    pm.expect(response.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n});\n\nvar reportdetails = nr.report_details || [];\npm.globals.set(\"qge\", reportdetails.length);\n\nfor (var i = 0; i < reportdetails.length; i++) {\n    pm.test(\"report_details\", function () {\n        pm.expect(response.hasOwnProperty(\"report_details\") && nr.report_details !== null).to.be.true;\n    });\n    \n    var steps = reportdetails[i].steps || [];\n    for (var j = 0; j < steps.length; j++) {\n        pm.test(\"steps.response_time\", function () {\n            pm.expect(steps[j].hasOwnProperty(\"response_time\") && steps[j].response_time !== null).to.be.true;\n        });\n        \n        pm.test(\"steps.name\", function () {\n            pm.expect(steps[j].hasOwnProperty(\"name\") && steps[j].name !== null).to.be.true;\n        });\n        \n        pm.test(\"steps.availability\", function () {\n            pm.expect(steps[j].hasOwnProperty(\"availability\") && steps[j].availability !== null).to.be.true;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var mid = postman.getGlobalVariable(\"getRBMMonitor\");\nif(mid.has(\",\"))\n{\n    postman.setGlobalVariable(\"rbmmid\",mid.substring(0,mid.indexOf(\",\")));\n}\nelse\n{\n    postman.setGlobalVariable(\"rbmmid\",mid);\n}",
    "output": "var mid = pm.globals.get(\"getRBMMonitor\");\nif (mid.includes(\",\")) {\n    pm.globals.set(\"rbmmid\", mid.substring(0, mid.indexOf(\",\")));\n} else {\n    pm.globals.set(\"rbmmid\", mid);\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nvar reportdetails = responseData.data.report_details\n\npm.globals.set(\"qge\", reportdetails.length);\nfor (i=0; i<reportdetails.length; i++)\n{\n   tests[\"report_details\"] = responseBody.has(\"report_details\") && responseData.data.report_details !== null;\n    for (j=0; j<reportdetails[i].steps.length; j++)\n    {\n            var report = JSON.stringify(reportdetails[i].steps);\n         tests[\"steps.response_time\"] = report.has(\"response_time\") && report[j].response_time !== null;\n          tests[\"steps.name\"] = report.has(\"name\") && report[j].name !== null;\n            tests[\"steps.availability\"] = report.has(\"availability\") && report[j].availability !== null;\n        }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"info\", function() {\n    pm.expect(nr).to.have.property(\"info\").and.not.to.be.null;\n});\n\nvar reportdetails = nr.report_details || [];\n\npm.globals.set(\"qge\", reportdetails.length);\n\nfor (var i = 0; i < reportdetails.length; i++) {\n    pm.test(\"report_details\", function() {\n        pm.expect(nr).to.have.property(\"report_details\").and.not.to.be.null;\n    });\n\n    for (var j = 0; j < reportdetails[i].steps.length; j++) {\n        var report = reportdetails[i].steps[j];\n        \n        pm.test(\"steps.response_time\", function() {\n            pm.expect(report).to.have.property(\"response_time\").and.not.to.be.null;\n        });\n        \n        pm.test(\"steps.name\", function() {\n            pm.expect(report).to.have.property(\"name\").and.not.to.be.null;\n        });\n        \n        pm.test(\"steps.availability\", function() {\n            pm.expect(report).to.have.property(\"availability\").and.not.to.be.null;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var mid = postman.getGlobalVariable(\"getRBMMonitor\");\nif(mid.has(\",\"))\n{\n    postman.setGlobalVariable(\"rbmmid\",mid.substring(0,mid.indexOf(\",\")));\n}\nelse\n{\n    postman.setGlobalVariable(\"rbmmid\",mid);\n}",
    "output": "pm.test(\"Get RBM Monitor ID\", function () {\n    var mid = pm.globals.get(\"getRBMMonitor\");\n    if(mid.includes(\",\")) {\n        pm.globals.set(\"rbmmid\", mid.substring(0, mid.indexOf(\",\")));\n    } else {\n        pm.globals.set(\"rbmmid\", mid);\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nvar monitorList = responseData.data.monitors;\npostman.clearGlobalVariable(\"getWebClusterMonitorId\");\nfor(var i in monitorList)\n{\n    var monitor = monitorList[i];\n    if(monitor.monitor_type === 'WEB_CLUSTER' && monitor.status === 1)\n    {\n        const dateString = monitor.last_polled_time;\n        const lastPolledTime = new Date(dateString).getTime();\n        postman.setGlobalVariable(\"getWebClusterMonitorId\", monitor.monitor_id);\n    }\n}\ntests[postman.getGlobalVariable(\"getWebClusterMonitorId\")] = responseCode.code === 200;",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar monitorList = nr.monitors;\n\npm.globals.unset(\"getWebClusterMonitorId\");\n\nfor (var i in monitorList) {\n    var monitor = monitorList[i];\n    if (monitor.monitor_type === 'WEB_CLUSTER' && monitor.status === 1) {\n        const dateString = monitor.last_polled_time;\n        const lastPolledTime = new Date(dateString).getTime();\n        pm.globals.set(\"getWebClusterMonitorId\", monitor.monitor_id);\n    }\n}\n\npm.test(pm.globals.get(\"getWebClusterMonitorId\"), function() {\n    pm.expect(pm.response.code).to.equal(200);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\n\n// Check if the response code is 0 (success)\nif (jsonData.code === 0) {\n    if (jsonData.error === undefined) {\n        // Basic response validations\n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"Response code is 0\"] = jsonData.code === 0;\n        tests[\"Response message is success\"] = jsonData.message === \"success\";\n\n        // Validate the data object\n        if (jsonData.data) {\n            var data = jsonData.data;\n\n            // Validate info object\n            if (data.info) {\n                var info = data.info;\n\n                tests[\"Info period is not null\"] = info.period !== null;\n                tests[\"Info resource_type_name is not null\"] = info.resource_type_name !== null;\n                tests[\"Info resource_type is not null\"] = info.resource_type !== null;\n                tests[\"Info end_time is not null\"] = info.end_time !== null;\n                tests[\"Info period_name is not null\"] = info.period_name !== null;\n                tests[\"Info formatted_start_time is not null\"] = info.formatted_start_time !== null;\n                tests[\"Info report_type is not null\"] = info.report_type !== null;\n                tests[\"Info formatted_generated_time is not null\"] = info.formatted_generated_time !== null;\n                tests[\"Info formatted_end_time is not null\"] = info.formatted_end_time !== null;\n                tests[\"Info generated_time is not null\"] = info.generated_time !== null;\n                tests[\"Info start_time is not null\"] = info.start_time !== null;\n                tests[\"Info resource_id is not null\"] = info.resource_id !== null;\n                tests[\"Info resource_name is not null\"] = info.resource_name !== null;\n                tests[\"Info monitor_type is not null\"] = info.monitor_type !== null;\n            } else {\n                tests[\"Info object is missing\"] = false;\n            }\n\n            // Validate report_details array\n            if (data.report_details && data.report_details.length > 0) {\n                tests[\"Report details array is not empty\"] = data.report_details.length > 0;\n\n                // Iterate through report_details and validate each report\n                data.report_details.forEach(function (report, index) {\n                    tests[`Report ${index + 1} monitor_id is not null`] = report.monitor_id !== null;\n                    tests[`Report ${index + 1} display_name is not null`] = report.display_name !== null;\n\n                    // Validate sequence_location_data array\n                    if (report.sequence_location_data && report.sequence_location_data.length > 0) {\n                        tests[`Report ${index + 1} sequence_location_data is not empty`] = report.sequence_location_data.length > 0;\n\n                        report.sequence_location_data.forEach(function (location, locIndex) {\n                            tests[`Report ${index + 1} Location ${locIndex + 1} id is not null`] = location.id !== null;\n                            tests[`Report ${index + 1} Location ${locIndex + 1} label is not null`] = location.label !== null;\n\n                            // Validate values array\n                            if (location.values && location.values.length > 0) {\n                                tests[`Report ${index + 1} Location ${locIndex + 1} values array is not empty`] = location.values.length > 0;\n\n                                location.values.forEach(function (value, valueIndex) {\n                                    tests[`Report ${index + 1} Location ${locIndex + 1} Value ${valueIndex + 1} is not null`] = value !== null;\n                                });\n                            } else {\n                                tests[`Report ${index + 1} Location ${locIndex + 1} values array is empty`] = false;\n                            }\n                        });\n                    } else {\n                        tests[`Report ${index + 1} sequence_location_data is empty`] = false;\n                    }\n\n                    // Validate step_names object\n                    if (report.step_names) {\n                        Object.keys(report.step_names).forEach(function (stepId) {\n                            tests[`Report ${index + 1} Step name for ID ${stepId} is not null`] = report.step_names[stepId] !== null;\n                        });\n                    } else {\n                        tests[`Report ${index + 1} step_names object is missing`] = false;\n                    }\n                });\n            } else {\n                tests[\"Report details array is empty\"] = false;\n            }\n        } else {\n            tests[\"Data object is missing\"] = false;\n        }\n    }\n} else {\n    // If the response code is not 0, mark the test as failed\n    tests[\"Response code is not 0\"] = false;\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\nconst response = pm.response.json();\nconst nr = response.data || {};\n\npm.test(\"Response code is 0\", function () {\n    pm.expect(response.code).to.equal(0);\n});\n\npm.test(\"Response message is success\", function () {\n    pm.expect(response.message).to.equal(\"success\");\n});\n\nif (nr) {\n    if (nr.info) {\n        const info = nr.info;\n\n        pm.test(\"Info period is not null\", function () {\n            pm.expect(info.period).to.not.be.null;\n        });\n        pm.test(\"Info resource_type_name is not null\", function () {\n            pm.expect(info.resource_type_name).to.not.be.null;\n        });\n        pm.test(\"Info resource_type is not null\", function () {\n            pm.expect(info.resource_type).to.not.be.null;\n        });\n        pm.test(\"Info end_time is not null\", function () {\n            pm.expect(info.end_time).to.not.be.null;\n        });\n        pm.test(\"Info period_name is not null\", function () {\n            pm.expect(info.period_name).to.not.be.null;\n        });\n        pm.test(\"Info formatted_start_time is not null\", function () {\n            pm.expect(info.formatted_start_time).to.not.be.null;\n        });\n        pm.test(\"Info report_type is not null\", function () {\n            pm.expect(info.report_type).to.not.be.null;\n        });\n        pm.test(\"Info formatted_generated_time is not null\", function () {\n            pm.expect(info.formatted_generated_time).to.not.be.null;\n        });\n        pm.test(\"Info formatted_end_time is not null\", function () {\n            pm.expect(info.formatted_end_time).to.not.be.null;\n        });\n        pm.test(\"Info generated_time is not null\", function () {\n            pm.expect(info.generated_time).to.not.be.null;\n        });\n        pm.test(\"Info start_time is not null\", function () {\n            pm.expect(info.start_time).to.not.be.null;\n        });\n        pm.test(\"Info resource_id is not null\", function () {\n            pm.expect(info.resource_id).to.not.be.null;\n        });\n        pm.test(\"Info resource_name is not null\", function () {\n            pm.expect(info.resource_name).to.not.be.null;\n        });\n        pm.test(\"Info monitor_type is not null\", function () {\n            pm.expect(info.monitor_type).to.not.be.null;\n        });\n    } else {\n        pm.test(\"Info object is missing\", function () {\n            pm.expect(false).to.be.true;\n        });\n    }\n\n    if (nr.report_details && nr.report_details.length > 0) {\n        pm.test(\"Report details array is not empty\", function () {\n            pm.expect(nr.report_details.length).to.be.greaterThan(0);\n        });\n\n        nr.report_details.forEach(function (report, index) {\n            pm.test(`Report ${index + 1} monitor_id is not null`, function () {\n                pm.expect(report.monitor_id).to.not.be.null;\n            });\n            pm.test(`Report ${index + 1} display_name is not null`, function () {\n                pm.expect(report.display_name).to.not.be.null;\n            });\n\n            if (report.sequence_location_data && report.sequence_location_data.length > 0) {\n                pm.test(`Report ${index + 1} sequence_location_data is not empty`, function () {\n                    pm.expect(report.sequence_location_data.length).to.be.greaterThan(0);\n                });\n\n                report.sequence_location_data.forEach(function (location, locIndex) {\n                    pm.test(`Report ${index + 1} Location ${locIndex + 1} id is not null`, function () {\n                        pm.expect(location.id).to.not.be.null;\n                    });\n                    pm.test(`Report ${index + 1} Location ${locIndex + 1} label is not null`, function () {\n                        pm.expect(location.label).to.not.be.null;\n                    });\n\n                    if (location.values && location.values.length > 0) {\n                        pm.test(`Report ${index + 1} Location ${locIndex + 1} values array is not empty`, function () {\n                            pm.expect(location.values.length).to.be.greaterThan(0);\n                        });\n\n                        location.values.forEach(function (value, valueIndex) {\n                            pm.test(`Report ${index + 1} Location ${locIndex + 1} Value ${valueIndex + 1} is not null`, function () {\n                                pm.expect(value).to.not.be.null;\n                            });\n                        });\n                    } else {\n                        pm.test(`Report ${index + 1} Location ${locIndex + 1} values array is empty`, function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                });\n            } else {\n                pm.test(`Report ${index + 1} sequence_location_data is empty`, function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (report.step_names) {\n                Object.keys(report.step_names).forEach(function (stepId) {\n                    pm.test(`Report ${index + 1} Step name for ID ${stepId} is not null`, function () {\n                        pm.expect(report.step_names[stepId]).to.not.be.null;\n                    });\n                });\n            } else {\n                pm.test(`Report ${index + 1} step_names object is missing`, function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        });\n    } else {\n        pm.test(\"Report details array is empty\", function () {\n            pm.expect(false).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"Data object is missing\", function () {\n        pm.expect(false).to.be.true;\n    });\n}\n\nif (response.code !== 0) {\n    pm.test(\"Response code is not 0\", function () {\n        pm.expect(false).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "// Parse the response JSON\nvar jsonData = JSON.parse(responseBody);\n\n// Validate the response status code\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n// Validate the response structure\npm.test(\"Response contains required fields\", function () {\n    pm.expect(jsonData).to.have.property(\"code\", 0);\n    pm.expect(jsonData).to.have.property(\"message\", \"success\");\n    pm.expect(jsonData).to.have.property(\"data\");\n});\n\n// Validate the headers in the data object\npm.test(\"Headers contain expected keys\", function () {\n    var headers = jsonData.data.headers;\n    pm.expect(headers).to.have.property(\"collection_time\");\n    pm.expect(headers).to.have.property(\"location_id\");\n    pm.expect(headers).to.have.property(\"availability\");\n    pm.expect(headers).to.have.property(\"response_time\");\n    pm.expect(headers).to.have.property(\"reason\");\n});\n\n// Validate the report array\npm.test(\"Report array contains valid entries\", function () {\n    var report = jsonData.data.report;\n    pm.expect(report).to.be.an(\"array\").that.is.not.empty;\n    postman.setGlobalVariable(\"lastPolledTimeClusterMonitor\", report[0].ct);\n});\n\n// Validate the static_col array\npm.test(\"Static columns contain expected values\", function () {\n    var staticCol = jsonData.data.static_col;\n    pm.expect(staticCol).to.be.an(\"array\").that.includes(\"collection_time\", \"availability\", \"location_id\");\n});\n\n// Extract the first 'ct' value and set it as a global variable\nif (jsonData.data.report && jsonData.data.report.length > 0) {\n    let firstCtValue = jsonData.data.report[0].ct;\n    pm.globals.set(\"firstCtValue\", firstCtValue);\n    console.log(\"First 'ct' value set as global variable:\", firstCtValue);\n} else {\n    console.error(\"The 'report' array is missing or empty in the response.\");\n}",
    "output": "// Parse the response JSON\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Validate the response status code\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n// Validate the response structure\npm.test(\"Response contains required fields\", function () {\n    pm.expect(response).to.have.property(\"code\", 0);\n    pm.expect(response).to.have.property(\"message\", \"success\");\n    pm.expect(response).to.have.property(\"data\");\n});\n\n// Validate the headers in the data object\npm.test(\"Headers contain expected keys\", function () {\n    var headers = nr.headers;\n    pm.expect(headers).to.have.property(\"collection_time\");\n    pm.expect(headers).to.have.property(\"location_id\");\n    pm.expect(headers).to.have.property(\"availability\");\n    pm.expect(headers).to.have.property(\"response_time\");\n    pm.expect(headers).to.have.property(\"reason\");\n});\n\n// Validate the report array\npm.test(\"Report array contains valid entries\", function () {\n    var report = nr.report;\n    pm.expect(report).to.be.an(\"array\").that.is.not.empty;\n    pm.globals.set(\"lastPolledTimeClusterMonitor\", report[0].ct);\n});\n\n// Validate the static_col array\npm.test(\"Static columns contain expected values\", function () {\n    var staticCol = nr.static_col;\n    pm.expect(staticCol).to.be.an(\"array\").that.includes(\"collection_time\", \"availability\", \"location_id\");\n});\n\n// Extract the first 'ct' value and set it as a global variable\nif (nr.report && nr.report.length > 0) {\n    let firstCtValue = nr.report[0].ct;\n    pm.globals.set(\"firstCtValue\", firstCtValue);\n    console.log(\"First 'ct' value set as global variable:\", firstCtValue);\n} else {\n    console.error(\"The 'report' array is missing or empty in the response.\");\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "// // Parse the response JSON\n// var jsonData = pm.response.json();\n\n// // Validate the response status code\n// pm.test(\"Status code is 200\", function () {\n//     pm.response.to.have.status(200);\n// });\n\n// // Validate the top-level response structure\n// pm.test(\"Response contains required fields\", function () {\n//     pm.expect(jsonData).to.have.property(\"code\").that.is.a(\"number\");\n//     pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\n//     pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\n// });\n\n// // Validate the 'data' object\n// if (jsonData.data) {\n//     var data = jsonData.data;\n\n//     pm.test(\"Data contains required attributes\", function () {\n//         pm.expect(data).to.have.property(\"reason\").that.is.a(\"string\");\n//         pm.expect(data).to.have.property(\"location_name\").that.is.a(\"string\");\n//         pm.expect(data).to.have.property(\"monitor_id\").that.is.a(\"string\");\n//         pm.expect(data).to.have.property(\"totalClusters\").that.is.a(\"number\");\n//         pm.expect(data).to.have.property(\"successClusters\").that.is.a(\"number\");\n//         pm.expect(data).to.have.property(\"collection_time\").that.is.a(\"string\");\n//         pm.expect(data).to.have.property(\"status\").that.is.a(\"number\");\n//         pm.expect(data).to.have.property(\"cluster_details\").that.is.an(\"array\").that.is.not.empty;\n//     });\n\n//     // Validate the 'cluster_details' array\n//     data.cluster_details.forEach(function (cluster, index) {\n//         pm.test(`Cluster ${index + 1} contains required attributes`, function () {\n//             pm.expect(cluster).to.have.property(\"cluster_name\").that.is.a(\"string\");\n//             pm.expect(cluster).to.have.property(\"cluster_id\").that.is.a(\"string\");\n//             pm.expect(cluster).to.have.property(\"status\").that.is.a(\"number\");\n//             pm.expect(cluster).to.have.property(\"url_details\").that.is.an(\"array\").that.is.not.empty;\n//         });\n\n//         // Validate the 'url_details' array inside each cluster\n//         cluster.url_details.forEach(function (urlDetail, urlIndex) {\n//             pm.test(`Cluster ${index + 1} URL Detail ${urlIndex + 1} contains required attributes`, function () {\n//                 pm.expect(urlDetail).to.have.property(\"response_header\").that.is.a(\"string\");\n//                 pm.expect(urlDetail).to.have.property(\"resolved_ip\").that.is.a(\"string\");\n//                 pm.expect(urlDetail).to.have.property(\"url_name\").that.is.a(\"string\");\n//                 pm.expect(urlDetail).to.have.property(\"request_header\").that.is.a(\"string\");\n//                 pm.expect(urlDetail).to.have.property(\"is_pre_rca\").that.is.a(\"boolean\");\n//                 pm.expect(urlDetail).to.have.property(\"response_time\").that.is.a(\"number\");\n//                 pm.expect(urlDetail).to.have.property(\"url_id\").that.is.a(\"string\");\n//                 pm.expect(urlDetail).to.have.property(\"is_html_rca\").that.is.a(\"boolean\");\n//                 pm.expect(urlDetail).to.have.property(\"url\").that.is.a(\"string\");\n//                 pm.expect(urlDetail).to.have.property(\"status\").that.is.a(\"number\");\n//             });\n//         });\n//     });\n// }",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\npm.test(\"Response contains required fields\", function () {\n    pm.expect(response).to.have.property(\"code\").that.is.a(\"number\");\n    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\n    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");\n});\n\nif (nr && Array.isArray(nr.cluster_details)) {\n    pm.test(\"Data contains required attributes\", function () {\n        pm.expect(nr).to.have.property(\"reason\").that.is.a(\"string\");\n        pm.expect(nr).to.have.property(\"location_name\").that.is.a(\"string\");\n        pm.expect(nr).to.have.property(\"monitor_id\").that.is.a(\"string\");\n        pm.expect(nr).to.have.property(\"totalClusters\").that.is.a(\"number\");\n        pm.expect(nr).to.have.property(\"successClusters\").that.is.a(\"number\");\n        pm.expect(nr).to.have.property(\"collection_time\").that.is.a(\"string\");\n        pm.expect(nr).to.have.property(\"status\").that.is.a(\"number\");\n        pm.expect(nr).to.have.property(\"cluster_details\").that.is.an(\"array\").that.is.not.empty;\n    });\n\n    nr.cluster_details.forEach(function (cluster, index) {\n        pm.test(`Cluster ${index + 1} contains required attributes`, function () {\n            pm.expect(cluster).to.have.property(\"cluster_name\").that.is.a(\"string\");\n            pm.expect(cluster).to.have.property(\"cluster_id\").that.is.a(\"string\");\n            pm.expect(cluster).to.have.property(\"status\").that.is.a(\"number\");\n            pm.expect(cluster).to.have.property(\"url_details\").that.is.an(\"array\").that.is.not.empty;\n        });\n\n        cluster.url_details.forEach(function (urlDetail, urlIndex) {\n            pm.test(`Cluster ${index + 1} URL Detail ${urlIndex + 1} contains required attributes`, function () {\n                pm.expect(urlDetail).to.have.property(\"response_header\").that.is.a(\"string\");\n                pm.expect(urlDetail).to.have.property(\"resolved_ip\").that.is.a(\"string\");\n                pm.expect(urlDetail).to.have.property(\"url_name\").that.is.a(\"string\");\n                pm.expect(urlDetail).to.have.property(\"request_header\").that.is.a(\"string\");\n                pm.expect(urlDetail).to.have.property(\"is_pre_rca\").that.is.a(\"boolean\");\n                pm.expect(urlDetail).to.have.property(\"response_time\").that.is.a(\"number\");\n                pm.expect(urlDetail).to.have.property(\"url_id\").that.is.a(\"string\");\n                pm.expect(urlDetail).to.have.property(\"is_html_rca\").that.is.a(\"boolean\");\n                pm.expect(urlDetail).to.have.property(\"url\").that.is.a(\"string\");\n                pm.expect(urlDetail).to.have.property(\"status\").that.is.a(\"number\");\n            });\n        });\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "const jsonData = JSON.parse(responseBody);\n\npm.test(\"tags list API response code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\nif (jsonData.code === 0) {\n    if (jsonData.data.length > 0) {\n        var tagId;\n        for (var i = 0; i < jsonData.data.length; i++) {\n            if (jsonData.data[i].type == 1 && jsonData.data[i].name == \"Automation-Don't Delete\") { // Fetch the user-defined tag\n                tagId = jsonData.data[i].id;\n                break;\n            }\n        }\n        if (tagId) {\n            pm.globals.set(\"tag_for_report\", tagId);\n        } else {\n            pm.test(\"Unable to fetch user-defined tag ID\", function () {\n                throw new Error(\"Unable to fetch user-defined tag ID\");\n            });\n        }\n    } else {\n        pm.test(\"No tags are present\", function () {\n            throw new Error(\"No tags are present\");\n        });\n    }\n}",
    "output": "const response = pm.response.json();\nconst nr = response.data || {};\n\npm.test(\"tags list API response code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\nif (response.code === 0) {\n    if (nr.hasOwnProperty('length') && nr.length > 0) {\n        var tagId;\n        for (var i = 0; i < nr.length; i++) {\n            if (nr[i].type === 1 && nr[i].name === \"Automation-Don't Delete\") {\n                tagId = nr[i].id;\n                break;\n            }\n        }\n        if (tagId) {\n            pm.globals.set(\"tag_for_report\", tagId);\n        } else {\n            pm.test(\"Unable to fetch user-defined tag ID\", function () {\n                throw new Error(\"Unable to fetch user-defined tag ID\");\n            });\n        }\n    } else {\n        pm.test(\"No tags are present\", function () {\n            throw new Error(\"No tags are present\");\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var myDate = new Date();  \nvar year = myDate.getFullYear(); \nvar month = myDate.getMonth()+1; \nvar day= myDate.getDate(); \nvar currentDate=null; \nif(day <= 9)\n{     day = '0'+day; } \nif(month<=9)\n{ month = '0'+month; } \nvar currentDate =year + \"-\" + month + \"-\" + day;\npostman.setGlobalVariable('date',currentDate);\n\nvar myDate = new Date();  \nvar year = myDate.getFullYear(); \nvar month = myDate.getMonth()+1; \nvar day= myDate.getDate()-5; \nvar currentDate=null; \nif(day <= 9 && day >0)\n{     day = '0'+day; } \nif (day < 0)\n{ day = '01';}\nif(month<=9)\n{ month = '0'+month; } \nvar currentDate =year + \"-\" + month + \"-\" + day;\npostman.setGlobalVariable('startdate',currentDate);",
    "output": "var myDate = new Date();\nvar year = myDate.getFullYear();\nvar month = myDate.getMonth() + 1;\nvar day = myDate.getDate();\nvar currentDate = null;\nif (day <= 9) {\n    day = '0' + day;\n}\nif (month <= 9) {\n    month = '0' + month;\n}\ncurrentDate = year + \"-\" + month + \"-\" + day;\npm.globals.set('date', currentDate);\n\nvar myDate = new Date();\nvar year = myDate.getFullYear();\nvar month = myDate.getMonth() + 1;\nvar day = myDate.getDate() - 5;\nvar currentDate = null;\nif (day <= 9 && day > 0) {\n    day = '0' + day;\n}\nif (day < 0) {\n    day = '01';\n}\nif (month <= 9) {\n    month = '0' + month;\n}\ncurrentDate = year + \"-\" + month + \"-\" + day;\npm.globals.set('startdate', currentDate);"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"availability_details\"] = responseBody.has(\"availability_details\") && (responseBody.availability_details !== null);\n\nvar jsonData = JSON.parse(responseBody);\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\") && (Object.keys(jsonData.data.summary_details)).length > 0)\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n//Chart data validation\nif(responseBody.has(\"charts\") && (Object.keys(jsonData.data.charts)).length > 0)\n{   \n    tests[\"name\"] = responseBody.has(\"name\");\n    tests[\"key\"] = responseBody.has(\"key\");\n    if((Object.keys(jsonData.data.charts[0].data)).length > 0){\n        \n         tests[\"data\"] = responseBody.has('data\":[[');\n         tests[\"charts\"] = responseBody.has(\"charts\");\n    }\n   \n}\nelse\n{tests[\"charts node is missing\"] = responseBody.has(\"charts\");}\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = jsonData.data.info.resource_type_name == 'Tag';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (jsonData.data.info.resource_type==3);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\nif((Object.keys(jsonData.data.outage_details)).length > 0)\n{\n    tests[\"display_name\"] = responseBody.has(\"display_name\");\n    tests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\");\n         tests[\"end_time\"] = responseBody.has(\"end_time\");\n         tests[\"type\"] = responseBody.has(\"type\");\n         tests[\"start_time\"] = responseBody.has(\"start_time\");\n         tests[\"duration\"] = responseBody.has(\"duration\");\n        }\n    else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// availability_details check\npm.test(\"availability_details\", function () {\n    pm.expect(nr.hasOwnProperty(\"availability_details\") && nr.availability_details !== null).to.be.true;\n});\n\n// Summary details validation\nif (nr.hasOwnProperty(\"summary_details\") && Object.keys(nr.summary_details).length > 0) {\n    pm.test(\"down_count\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"down_count\") && nr.summary_details.down_count !== null).to.be.true;\n    });\n    pm.test(\"downtime_duration\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"downtime_duration\") && nr.summary_details.downtime_duration !== null).to.be.true;\n    });\n    pm.test(\"availability_percentage\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"availability_percentage\") && nr.summary_details.availability_percentage !== null).to.be.true;\n    });\n    pm.test(\"mtbf\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"mtbf\") && nr.summary_details.mtbf !== null).to.be.true;\n    });\n    pm.test(\"unmanaged_duration\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"unmanaged_duration\") && nr.summary_details.unmanaged_duration !== null).to.be.true;\n    });\n    pm.test(\"alarm_count\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"alarm_count\") && nr.summary_details.alarm_count !== null).to.be.true;\n    });\n    pm.test(\"mttr\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"mttr\") && nr.summary_details.mttr !== null).to.be.true;\n    });\n    pm.test(\"maintenance_percentage\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"maintenance_percentage\") && nr.summary_details.maintenance_percentage !== null).to.be.true;\n    });\n    pm.test(\"maintenance_duration\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"maintenance_duration\") && nr.summary_details.maintenance_duration !== null).to.be.true;\n    });\n    pm.test(\"availability_duration\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"availability_duration\") && nr.summary_details.availability_duration !== null).to.be.true;\n    });\n    pm.test(\"unmanaged_percentage\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"unmanaged_percentage\") && nr.summary_details.unmanaged_percentage !== null).to.be.true;\n    });\n    pm.test(\"downtime_percentage\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"downtime_percentage\") && nr.summary_details.downtime_percentage !== null).to.be.true;\n    });\n} else {\n    pm.test(\"summary_details is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"summary_details\")).to.be.true;\n    });\n}\n\n// Chart data validation\nif (nr.hasOwnProperty(\"charts\") && nr.charts.length > 0) {\n    pm.test(\"name\", function () {\n        pm.expect(nr.charts[0].hasOwnProperty(\"name\")).to.be.true;\n    });\n    pm.test(\"key\", function () {\n        pm.expect(nr.charts[0].hasOwnProperty(\"key\")).to.be.true;\n    });\n    if (nr.charts[0].data && Object.keys(nr.charts[0].data).length > 0) {\n        pm.test(\"data\", function () {\n            pm.expect(nr.charts[0].hasOwnProperty(\"data\")).to.be.true;\n        });\n        pm.test(\"charts node is present\", function () {\n            pm.expect(nr.hasOwnProperty(\"charts\")).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"charts node is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"charts\")).to.be.true;\n    });\n}\n\n// Info data validation\nif (nr.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info.resource_type_name).to.eql(\"Tag\");\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"segment_type\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"segment_type\")).to.be.true;\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"resource type\", function () {\n        pm.expect(nr.info.resource_type).to.eql(3);\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n    pm.test(\"segment_type_name\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"segment_type_name\")).to.be.true;\n    });\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\n// Outage data validation\nif (nr.hasOwnProperty(\"outage_details\") && nr.outage_details.length > 0) {\n    pm.test(\"display_name\", function () {\n        pm.expect(nr.outage_details[0].hasOwnProperty(\"display_name\")).to.be.true;\n    });\n    pm.test(\"outages\", function () {\n        pm.expect(nr.outage_details[0].hasOwnProperty(\"outages\")).to.be.true;\n    });\n    pm.test(\"monitor_id\", function () {\n        pm.expect(nr.outage_details[0].hasOwnProperty(\"monitor_id\")).to.be.true;\n    });\n\n    // Check inside outages array\n    if (Array.isArray(nr.outage_details[0].outages) && nr.outage_details[0].outages.length > 0) {\n        for (var i = 0; i < nr.outage_details[0].outages.length; i++) {\n            pm.test(\"outage_id\", function () {\n                pm.expect(nr.outage_details[0].outages[i].hasOwnProperty(\"outage_id\")).to.be.true;\n            });\n            pm.test(\"end_time\", function () {\n                pm.expect(nr.outage_details[0].outages[i].hasOwnProperty(\"end_time\")).to.be.true;\n            });\n            pm.test(\"type\", function () {\n                pm.expect(nr.outage_details[0].outages[i].hasOwnProperty(\"type\")).to.be.true;\n            });\n            pm.test(\"start_time\", function () {\n                pm.expect(nr.outage_details[0].outages[i].hasOwnProperty(\"start_time\")).to.be.true;\n            });\n            pm.test(\"duration\", function () {\n                pm.expect(nr.outage_details[0].outages[i].hasOwnProperty(\"duration\")).to.be.true;\n            });\n        }\n    } else {\n        pm.test(\"outages node is missing\", function () {\n            pm.expect(nr.outage_details[0].hasOwnProperty(\"outages\")).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"outage_details node is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"outage_details\")).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n//Info node validation\nif(responseBody.has(\"info\"))\n{\ntests[\"end_time\"] = responseBody.has(\"end_time\");\ntests['resource_type_name'] = jsonData.data.info.resource_type_name == 'Tag';\ntests[\"report_name\"] = responseBody.has(\"report_name\");\ntests[\"period_name\"] = responseBody.has(\"period_name\");\ntests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\ntests[\"generated_time\"] = responseBody.has(\"generated_time\");\ntests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\ntests[\"start_time\"] = responseBody.has(\"start_time\");\ntests['resource type'] = (jsonData.data.info.resource_type===3);\ntests[\"period\"] = responseBody.has(\"period\");\ntests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\ntests[\"report_type\"] = responseBody.has(\"report_type\");\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") && (responseBody.info !== null);}\n\n// Group data validation\nif(responseBody.has(\"group_data\") && (Object.keys(jsonData.data.group_data)).length > 0)\n{\n    tests[\"name\"] = responseBody.has(\"name\") && (responseBody.name !== null)\n    tests[\"attribute_data\"] = responseBody.has(\"attribute_data\") && (responseBody.attribute_data !== null)\n    tests[\"availability\"] = responseBody.has(\"availability\") && (responseBody.availability !== null)\n    tests[\"tags\"] = responseBody.has(\"tags\");\n    \n}\nelse\n{tests[\"group_data node is missing\"] = responseBody.has(\"group_data\") && (responseBody.group_data !== null);}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Info node validation\nif (nr.hasOwnProperty(\"info\") && nr.info !== null) {\n    pm.test(\"end_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"resource_type_name\", function() {\n        pm.expect(nr.info.resource_type_name).to.equal(\"Tag\");\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"resource type\", function() {\n        pm.expect(nr.info.resource_type).to.equal(3);\n    });\n    pm.test(\"period\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n    });\n}\n\n// Group data validation\nif (nr.hasOwnProperty(\"group_data\") && Object.keys(nr.group_data || {}).length > 0) {\n    pm.test(\"name\", function() {\n        pm.expect(nr.group_data.hasOwnProperty(\"name\") && nr.group_data.name !== null).to.be.true;\n    });\n    pm.test(\"attribute_data\", function() {\n        pm.expect(nr.group_data.hasOwnProperty(\"attribute_data\") && nr.group_data.attribute_data !== null).to.be.true;\n    });\n    pm.test(\"availability\", function() {\n        pm.expect(nr.group_data.hasOwnProperty(\"availability\") && nr.group_data.availability !== null).to.be.true;\n    });\n    pm.test(\"tags\", function() {\n        pm.expect(nr.group_data.hasOwnProperty(\"tags\")).to.be.true;\n    });\n} else {\n    pm.test(\"group_data node is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"group_data\") && nr.group_data !== null).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"availability_details\"] = responseBody.has(\"availability_details\") && (responseBody.availability_details !== null);\nvar jsonData = JSON.parse(responseBody);\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\") && (Object.keys(jsonData.data.summary_details)).length > 0)\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n//Chart data validation\nif(responseBody.has(\"charts\") && (Object.keys(jsonData.data.charts)).length > 0)\n{   \n    tests[\"name\"] = responseBody.has(\"name\");\n    tests[\"key\"] = responseBody.has(\"key\");\n    if((Object.keys(jsonData.data.charts[0].data)).length > 0){\n        \n         tests[\"data\"] = responseBody.has('data\":[[');\n         tests[\"charts\"] = responseBody.has(\"charts\");\n    }\n   \n}\nelse\n{tests[\"charts node is missing\"] = responseBody.has(\"charts\");}\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = jsonData.data.info.resource_type_name == 'Tag';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (jsonData.data.info.resource_type===3);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\nif((Object.keys(jsonData.data.outage_details)).length > 0)\n{\n    tests[\"display_name\"] = responseBody.has(\"display_name\");\n    tests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\");\n         tests[\"end_time\"] = responseBody.has(\"end_time\");\n         tests[\"type\"] = responseBody.has(\"type\");\n         tests[\"start_time\"] = responseBody.has(\"start_time\");\n         tests[\"duration\"] = responseBody.has(\"duration\");\n        }\n    else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\n\n// availability_details check\npm.test(\"availability_details\", function() {\n    pm.expect(nr.hasOwnProperty(\"availability_details\") && nr.availability_details !== null).to.be.true;\n});\n\n// Summary details validation\nif (nr.hasOwnProperty(\"summary_details\") && Object.keys(nr.summary_details).length > 0) {\n    pm.test(\"down_count\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"down_count\") && nr.summary_details.down_count !== null).to.be.true;\n    });\n    pm.test(\"downtime_duration\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"downtime_duration\") && nr.summary_details.downtime_duration !== null).to.be.true;\n    });\n    pm.test(\"availability_percentage\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"availability_percentage\") && nr.summary_details.availability_percentage !== null).to.be.true;\n    });\n    pm.test(\"mtbf\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"mtbf\") && nr.summary_details.mtbf !== null).to.be.true;\n    });\n    pm.test(\"unmanaged_duration\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"unmanaged_duration\") && nr.summary_details.unmanaged_duration !== null).to.be.true;\n    });\n    pm.test(\"alarm_count\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"alarm_count\") && nr.summary_details.alarm_count !== null).to.be.true;\n    });\n    pm.test(\"mttr\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"mttr\") && nr.summary_details.mttr !== null).to.be.true;\n    });\n    pm.test(\"maintenance_percentage\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"maintenance_percentage\") && nr.summary_details.maintenance_percentage !== null).to.be.true;\n    });\n    pm.test(\"maintenance_duration\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"maintenance_duration\") && nr.summary_details.maintenance_duration !== null).to.be.true;\n    });\n    pm.test(\"availability_duration\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"availability_duration\") && nr.summary_details.availability_duration !== null).to.be.true;\n    });\n    pm.test(\"unmanaged_percentage\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"unmanaged_percentage\") && nr.summary_details.unmanaged_percentage !== null).to.be.true;\n    });\n    pm.test(\"downtime_percentage\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"downtime_percentage\") && nr.summary_details.downtime_percentage !== null).to.be.true;\n    });\n} else {\n    pm.test(\"summary_details is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"summary_details\")).to.be.true;\n    });\n}\n\n// Chart data validation\nif (nr.hasOwnProperty(\"charts\") && nr.charts.length > 0) {\n    pm.test(\"name\", function() {\n        pm.expect(nr.charts[0].hasOwnProperty(\"name\")).to.be.true;\n    });\n    pm.test(\"key\", function() {\n        pm.expect(nr.charts[0].hasOwnProperty(\"key\")).to.be.true;\n    });\n    if (nr.charts[0].data && nr.charts[0].data.length > 0) {\n        pm.test(\"data\", function() {\n            pm.expect(nr.charts[0].hasOwnProperty(\"data\")).to.be.true;\n        });\n        pm.test(\"charts node is present\", function() {\n            pm.expect(nr.hasOwnProperty(\"charts\")).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"charts node is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"charts\")).to.be.true;\n    });\n}\n\n// Info data validation\nif (nr.hasOwnProperty(\"info\") && nr.info !== null) {\n    pm.test(\"end_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test('resource_type_name', function() {\n        pm.expect(nr.info.resource_type_name).to.equal('Tag');\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"segment_type\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"segment_type\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test('resource type', function() {\n        pm.expect(nr.info.resource_type).to.equal(3);\n    });\n    pm.test(\"period\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n    pm.test(\"segment_type_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"segment_type_name\")).to.be.true;\n    });\n} else {\n    pm.test(\"info is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n    });\n}\n\n// Outage data validation\nif (nr.hasOwnProperty(\"outage_details\") && Array.isArray(nr.outage_details) && nr.outage_details.length > 0) {\n    const firstOutage = nr.outage_details[0];\n    pm.test(\"display_name\", function() {\n        pm.expect(firstOutage.hasOwnProperty(\"display_name\")).to.be.true;\n    });\n    pm.test(\"outages\", function() {\n        pm.expect(firstOutage.hasOwnProperty(\"outages\")).to.be.true;\n    });\n    pm.test(\"monitor_id\", function() {\n        pm.expect(firstOutage.hasOwnProperty(\"monitor_id\")).to.be.true;\n    });\n\n    if (Array.isArray(firstOutage.outages) && firstOutage.outages.length > 0) {\n        const o = firstOutage.outages[0];\n        pm.test(\"outage_id\", function() {\n            pm.expect(o.hasOwnProperty(\"outage_id\")).to.be.true;\n        });\n        pm.test(\"end_time\", function() {\n            pm.expect(o.hasOwnProperty(\"end_time\")).to.be.true;\n        });\n        pm.test(\"type\", function() {\n            pm.expect(o.hasOwnProperty(\"type\")).to.be.true;\n        });\n        pm.test(\"start_time\", function() {\n            pm.expect(o.hasOwnProperty(\"start_time\")).to.be.true;\n        });\n        pm.test(\"duration\", function() {\n            pm.expect(o.hasOwnProperty(\"duration\")).to.be.true;\n        });\n    } else {\n        pm.test(\"outages node is missing\", function() {\n            pm.expect(firstOutage.hasOwnProperty(\"outages\")).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"outage_details node is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"outage_details\")).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Get Trend Report- Tags Response Code is 200\"] = responseCode.code === 200;\nif(responseCode.code === 200){\n    var reportData = JSON.parse(responseBody).data;\n    if(reportData.trend){\n        var trends = reportData.trend;\n        if(trends.length>0){\n            var flag = {availability_percentage : true, year : true, alarm_count : true, down_count : true, month : true};\n            for(var i=0; i<trends.length; i++){\n                var trend = trends[i];\n                if(!trend.availability_percentage && trend.availability_percentage!=0){\n                    tests[\"trend.availability_percentage is missing at index \"+i] = false;\n                    flag.availability_percentage = false;\n                }\n                if(!trend.year && trend.year!=0){\n                    tests[\"trend.year is missing at index \"+i] = false;\n                    flag.year = false;\n                }\n                if(!trend.alarm_count && trend.alarm_count!=0){\n                    tests[\"trend.alarm_count is missing at index \"+i] = false;\n                    flag.alarm_count = false;\n                }\n                if(!trend.down_count && trend.down_count!=0){\n                    tests[\"trend.down_count is missing at index \"+i] = false;\n                    flag.down_count = false;\n                }\n                if(!trend.month && trend.month!=0){\n                    tests[\"trend.month is missing at index \"+i] = false;\n                    flag.month = false;\n                }\n            }\n            if(flag.availability_percentage){\n                tests[\"availability_percentage is present for all the trends\"] = true;\n            }\n            if(flag.year){\n                tests[\"year is present for all the trends\"] = true;\n            }\n            if(flag.alarm_count){\n                tests[\"alarm_count is present for all the trends\"] = true;\n            }\n            if(flag.down_count){\n                tests[\"down_count is present for all the trends\"] = true;\n            }\n            if(flag.month){\n                tests[\"month is present for all the trends\"] = true;\n            }\n        }else{\n            tests[\"No trends to check\"] = true;\n        }\n    }else{\n        tests[\"Trend is not returned in the response\"] = false;\n    }\n    if(reportData.info){\n        if(reportData.trend.length>0){\n            if(reportData.info.resource_name){\n                tests[\"resource_name is present in the info\"] = true;\n            }else{\n                tests[\"resource_name is not present in the info\"] = false;\n            }   \n        }\n        if(reportData.info.end_time){\n            tests[\"end_time is present in the info\"] = true;\n        }else{\n            tests[\"end_time is not present in the info\"] = false;\n        }\n        if(reportData.info.resource_type_name){\n            tests[\"resource_type_name is present in the info\"] = true;\n        }else{\n            tests[\"resource_type_name is not present in the info\"] = false;\n        }\n        if(reportData.info.report_name){\n            tests[\"report_name is present in the info\"] = true;\n        }else{\n            tests[\"report_name is not present in the info\"] = false;\n        }\n        if(reportData.info.period_name){\n            tests[\"period_name is present in the info\"] = true;\n        }else{\n            tests[\"period_name is not present in the info\"] = false;\n        }\n        if(reportData.info.formatted_start_time){\n            tests[\"formatted_start_time is present in the info\"] = true;\n        }else{\n            tests[\"formatted_start_time is not present in the info\"] = false;\n        }\n        if(reportData.info.formatted_end_time){\n            tests[\"formatted_end_time is present in the info\"] = true;\n        }else{\n            tests[\"formatted_end_time is not present in the info\"] = false;\n        }\n        if(reportData.info.generated_time){\n            tests[\"generated_time is present in the info\"] = true;\n        }else{\n            tests[\"generated_time is not present in the info\"] = false;\n        }\n        if(reportData.info.start_time){\n            tests[\"start_time is present in the info\"] = true;\n        }else{\n            tests[\"start_time is not present in the info\"] = false;\n        }\n        if(reportData.info.resource_type){\n            tests[\"resource_type is present in the info\"] = true;\n        }else{\n            tests[\"resource_type is not present in the info\"] = false;\n        }\n        if(reportData.info.period){\n            tests[\"period is present in the info\"] = true;\n        }else{\n            tests[\"period is not present in the info\"] = false;\n        }\n        if(reportData.info.formatted_generated_time){\n            tests[\"formatted_generated_time is present in the info\"] = true;\n        }else{\n            tests[\"formatted_generated_time is not present in the info\"] = false;\n        }\n        if(reportData.info.resource_id){\n            tests[\"resource_id is present in the info\"] = true;\n        }else{\n            tests[\"resource_id is not present in the info\"] = false;\n        }\n        if(reportData.info.monitor_type){\n            tests[\"monitor_type is present in the info\"] = true;\n        }else{\n            tests[\"monitor_type is not present in the info\"] = false;\n        }\n        if(reportData.info.report_type){\n            tests[\"report_type is present in the info\"] = true;\n        }else{\n            tests[\"report_type is not present in the info\"] = false;\n        }\n    }else{\n        tests[\"Info id not returned in the response\"] = false;\n    }\n}\npostman.clearGlobalVariable(\"tagIdForFilter\");",
    "output": "pm.test(\"Get Trend Report- Tags Response Code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nif (pm.response.code === 200) {\n    let response = pm.response.json();\n    let nr = response.data || {};\n    \n    if (nr.trend) {\n        let trends = nr.trend;\n        if (trends.length > 0) {\n            let flag = {availability_percentage: true, year: true, alarm_count: true, down_count: true, month: true};\n            for (let i = 0; i < trends.length; i++) {\n                let trend = trends[i];\n                if (!trend.hasOwnProperty('availability_percentage')) {\n                    pm.test(\"trend.availability_percentage is missing at index \" + i, function() {\n                        pm.expect(false).to.be.true;\n                    });\n                    flag.availability_percentage = false;\n                }\n                if (!trend.hasOwnProperty('year')) {\n                    pm.test(\"trend.year is missing at index \" + i, function() {\n                        pm.expect(false).to.be.true;\n                    });\n                    flag.year = false;\n                }\n                if (!trend.hasOwnProperty('alarm_count')) {\n                    pm.test(\"trend.alarm_count is missing at index \" + i, function() {\n                        pm.expect(false).to.be.true;\n                    });\n                    flag.alarm_count = false;\n                }\n                if (!trend.hasOwnProperty('down_count')) {\n                    pm.test(\"trend.down_count is missing at index \" + i, function() {\n                        pm.expect(false).to.be.true;\n                    });\n                    flag.down_count = false;\n                }\n                if (!trend.hasOwnProperty('month')) {\n                    pm.test(\"trend.month is missing at index \" + i, function() {\n                        pm.expect(false).to.be.true;\n                    });\n                    flag.month = false;\n                }\n            }\n            if (flag.availability_percentage) {\n                pm.test(\"availability_percentage is present for all the trends\", function() {\n                    pm.expect(true).to.be.true;\n                });\n            }\n            if (flag.year) {\n                pm.test(\"year is present for all the trends\", function() {\n                    pm.expect(true).to.be.true;\n                });\n            }\n            if (flag.alarm_count) {\n                pm.test(\"alarm_count is present for all the trends\", function() {\n                    pm.expect(true).to.be.true;\n                });\n            }\n            if (flag.down_count) {\n                pm.test(\"down_count is present for all the trends\", function() {\n                    pm.expect(true).to.be.true;\n                });\n            }\n            if (flag.month) {\n                pm.test(\"month is present for all the trends\", function() {\n                    pm.expect(true).to.be.true;\n                });\n            }\n        } else {\n            pm.test(\"No trends to check\", function() {\n                pm.expect(true).to.be.true;\n            });\n        }\n    } else {\n        pm.test(\"Trend is not returned in the response\", function() {\n            pm.expect(false).to.be.true;\n        });\n    }\n    \n    if (nr.info) {\n        if (nr.trend.length > 0) {\n            if (nr.info.hasOwnProperty('resource_name')) {\n                pm.test(\"resource_name is present in the info\", function() {\n                    pm.expect(true).to.be.true;\n                });\n            } else {\n                pm.test(\"resource_name is not present in the info\", function() {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        }\n        if (nr.info.hasOwnProperty('end_time')) {\n            pm.test(\"end_time is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"end_time is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('resource_type_name')) {\n            pm.test(\"resource_type_name is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"resource_type_name is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('report_name')) {\n            pm.test(\"report_name is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"report_name is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('period_name')) {\n            pm.test(\"period_name is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"period_name is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('formatted_start_time')) {\n            pm.test(\"formatted_start_time is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"formatted_start_time is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('formatted_end_time')) {\n            pm.test(\"formatted_end_time is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"formatted_end_time is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('generated_time')) {\n            pm.test(\"generated_time is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"generated_time is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('start_time')) {\n            pm.test(\"start_time is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"start_time is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('resource_type')) {\n            pm.test(\"resource_type is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"resource_type is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('period')) {\n            pm.test(\"period is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"period is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('formatted_generated_time')) {\n            pm.test(\"formatted_generated_time is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"formatted_generated_time is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('resource_id')) {\n            pm.test(\"resource_id is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"resource_id is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('monitor_type')) {\n            pm.test(\"monitor_type is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"monitor_type is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n        if (nr.info.hasOwnProperty('report_type')) {\n            pm.test(\"report_type is present in the info\", function() {\n                pm.expect(true).to.be.true;\n            });\n        } else {\n            pm.test(\"report_type is not present in the info\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n    } else {\n        pm.test(\"Info is not returned in the response\", function() {\n            pm.expect(false).to.be.true;\n        });\n    }\n}\n\npm.globals.unset(\"tagIdForFilter\");"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n//Info node validation\nif(responseBody.has(\"info\"))\n{\ntests[\"end_time\"] = responseBody.has(\"end_time\");\ntests['resource_type_name'] = jsonData.data.info.resource_type_name == 'Tag';\ntests[\"report_name\"] = responseBody.has(\"report_name\");\ntests[\"period_name\"] = responseBody.has(\"period_name\");\ntests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\ntests[\"generated_time\"] = responseBody.has(\"generated_time\");\ntests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\ntests[\"start_time\"] = responseBody.has(\"start_time\");\ntests['resource type'] = (jsonData.data.info.resource_type===3);\ntests[\"period\"] = responseBody.has(\"period\");\ntests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\ntests[\"report_type\"] = responseBody.has(\"report_type\");\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") && (responseBody.info !== null);}\n\n// Group data validation\nif(responseBody.has(\"group_data\") && (Object.keys(jsonData.data.group_data)).length > 0)\n{\n    tests[\"name\"] = responseBody.has(\"name\") && (responseBody.name !== null)\n    tests[\"attribute_data\"] = responseBody.has(\"attribute_data\") && (responseBody.attribute_data !== null)\n    tests[\"availability\"] = responseBody.has(\"availability\") && (responseBody.availability !== null)\n    tests[\"tags\"] = responseBody.has(\"tags\");\n\n}\nelse\n{tests[\"group_data node is missing\"] = responseBody.has(\"group_data\") && (responseBody.group_data !== null);}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Info node validation\nif (nr.hasOwnProperty(\"info\") && nr.info !== null) {\n    pm.test(\"end_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"resource_type_name\", function() {\n        pm.expect(nr.info.resource_type_name).to.equal(\"Tag\");\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"resource type\", function() {\n        pm.expect(nr.info.resource_type).to.equal(3);\n    });\n    pm.test(\"period\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n    });\n}\n\n// Group data validation\nif (nr.hasOwnProperty(\"group_data\") && nr.group_data !== null && Object.keys(nr.group_data).length > 0) {\n    const groupKey = Object.keys(nr.group_data)[0]; // typically \"HOMEPAGE\"\n    const groupObj = nr.group_data[groupKey];\n\n    pm.test(\"name\", function() {\n        pm.expect(groupObj.hasOwnProperty(\"name\") && groupObj.name !== null).to.be.true;\n    });\n    pm.test(\"attribute_data\", function() {\n        pm.expect(groupObj.hasOwnProperty(\"attribute_data\") && groupObj.attribute_data !== null).to.be.true;\n    });\n    pm.test(\"availability\", function() {\n        pm.expect(groupObj.hasOwnProperty(\"availability\") && groupObj.availability !== null).to.be.true;\n    });\n    pm.test(\"tags\", function() {\n        pm.expect(groupObj.hasOwnProperty(\"tags\") && groupObj.tags !== null).to.be.true;\n    });\n} else {\n    pm.test(\"group_data node is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"group_data\") && nr.group_data !== null).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setGlobalVariable(\"summaryreportdetailsford\", function summaryreportdetailsford()\n{\n    var jsonData = JSON.parse(responseBody);\n    var resourcetype=(jsonData.data.info.resource_type);\nif (jsonData.code===0)\n{\n   if(jsonData.error === undefined)\n   {\n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        tests['summary_details is present'] = jsonData.data.summary_details;\n        \n        if(jsonData.data.info){\n            if (resourcetype===2)\n            {\n                var infolength=17;\n                var resourcetypename=\"Monitor\";\n            }\n            if (resourcetype===1)\n            {\n                var infolength=16;\n                var resourcetypename=\"Group\";\n            }         \n            if (resourcetype===4)\n            {\n                var infolength=16;\n                var resourcetypename=\"Monitor Type\";\n            }\n            if (resourcetype===0)\n            {\n                var infolength=14;\n                var resourcetypename=\"All Monitors\";\n            }\n            if(responseBody.has(\"resource_tags\"))\n                {\n                    infolength=infolength+1;\n                    tests['resource_tags'] = jsonData.data.info.resource_tags;\n                }\n            if((Object.keys(jsonData.data.info)).length == infolength){\n                    \n                tests['info111111'] = true;\n                tests['resource type'] = (jsonData.data.info.resource_type===resourcetype);\n                tests['report_type'] = jsonData.data.info.report_type;\n                tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                tests['period'] = jsonData.data.info.period;\n                tests['start_time'] = jsonData.data.info.start_time;\n                tests['generated_time'] = jsonData.data.info.generated_time;\n                tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                tests['period_name'] = jsonData.data.info.period_name;\n                tests['report_name'] = jsonData.data.info.report_name;\n                tests['resource_type_name'] = jsonData.data.info.resource_type_name == resourcetypename;\n                tests['end_time'] = jsonData.data.info.end_time;\n                tests['segment_type_name'] = jsonData.data.info.segment_type_name;\n                tests['segment_type'] = jsonData.data.info.segment_type;\n                if (resourcetype===4)\n                {\n                tests['monitor_type'] = jsonData.data.info.monitor_type;\n                }\n                if (resourcetype==1 | resourcetype==2)\n                {\n                tests['resource_id'] = jsonData.data.info.resource_id;\n                tests['resource_name'] = jsonData.data.info.resource_name;                \n                }\n            \n            }else{\n\n                if((Object.keys(jsonData.data.info)).length > infolength){\n                \n                    tests['new attribute added to info'] = false;\n                    \n                }else{\n                    \n                    tests['attribute removed from info'] = false;\n                }\n                \n            }\n            \n        }else{\n            \n            tests['info'] = false;\n        }\n        \n        //Summary deatails validation\n        if (responseBody.has(\"summary_details\")){\n            \n            if(Object.keys(jsonData.data.summary_details).length==12){\n                \n                tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                tests[\"alarm_count\"] = (jsonData.data.summary_details.alarm_count !== null);\n                tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                \n            }else{\n                \n                if(Object.keys(jsonData.data.summary_details).length>12){\n                \n                     tests[\"new attribute added to port monitor summary_details \"] =false;\n                \n                }else{\n                 \n                     tests[\"attribute removed port monitor summary_details \"] =false;   \n                }\n            }\n        \n        }else{\n        \n            tests[\"summary_details is missing\"] = false;\n        }\n       // if (responseBody.has(\"report_details\") && jsonData.data.report_details.length>0){\n        if (responseBody.has(\"report_details\")){\n            if (resourcetype==2){\n                var reportData = jsonData.data.report_details;\n                }\n            else {\n                var reportData = jsonData.data.report_details[0];\n                }\n            tests[\"attributes\"] = (reportData.attributes !== null);\n            tests[\"name\"] = (reportData.name !== null);\n            tests[\"monitors\"] = (reportData.monitors !== null);\n            tests[\"type\"] = (reportData.type !== null);\n            if (resourcetype!=2)\n            {\n                if(reportData.monitors.length>0){\n                tests[\"downtime_duration\"] = (reportData.monitors[0].downtime_duration);\n                tests[\"name\"] = (reportData.monitors[0].name);\n                tests[\"down_count\"] = (reportData.monitors[0].down_count>=0);\n                tests[\"id\"] = (reportData.monitors[0].id);\n                tests[\"tags\"] = (reportData.monitors[0].tags);\n                tests[\"availability\"] =  (reportData.monitors[0].availability>=0 || reportData.monitors[0].availability == '-');\n            }\n            }\n        }\n        if (responseBody.has(\"plugin_report_details\") && jsonData.data.plugin_report_details.length>0){\n         \n            var reportData = jsonData.data.plugin_report_details[0];\n            tests[\"attributes\"] = (reportData.attributes !== null);\n            tests[\"name\"] = (reportData.name !== null);\n            tests[\"monitors\"] = (reportData.monitors !== null);\n            tests[\"type\"] = (reportData.type !== null);\n            if(reportData.monitors.length>0){\n                \n                tests[\"downtime_duration\"] = (reportData.monitors[0].downtime_duration);\n                tests[\"name\"] = (reportData.monitors[0].name);\n                tests[\"down_count\"] = (reportData.monitors[0].down_count>=0);\n                tests[\"availability\"] = (reportData.monitors[0].availability>=0 || reportData.monitors[0].availability == '-');\n                tests[\"id\"] = (reportData.monitors[0].id);\n                \n            }\n        }\n        if (responseBody.has(\"customapi_report_details\") && jsonData.data.customapi_report_details.length>0){\n         \n            var reportData = jsonData.data.customapi_report_details[0];\n            tests[\"attributes\"] = (reportData.attributes !== null);\n            tests[\"name\"] = (reportData.name !== null);\n            tests[\"monitors\"] = (reportData.monitors !== null);\n            tests[\"type\"] = (reportData.type !== null);\n            if(reportData.monitors.length>0){\n                \n                tests[\"downtime_duration\"] = (reportData.monitors[0].downtime_duration);\n                tests[\"name\"] = (reportData.monitors[0].name);\n                tests[\"down_count\"] = (reportData.monitors[0].down_count>=0);\n                tests[\"availability\"] = (reportData.monitors[0].availability>=0 || reportData.monitors[0].availability == '-');\n                tests[\"id\"] = (reportData.monitors[0].id);\n                \n            }\n        }\n   }else{\n       \n       tests[\"error\"]=false;\n   }\n}\n}+ ' summaryreportdetailsford()');",
    "output": "pm.globals.set(\"summaryreportdetailsford\", function summaryreportdetailsford() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    var resourcetype = (nr.info.resource_type);\n\n    if (response.code === 0) {\n        if (response.error === undefined) {\n            pm.test(\"Status code is 200\", function () {\n                pm.expect(pm.response.code).to.equal(200);\n            });\n            pm.test(\"code\", function () {\n                pm.expect(response.code).to.equal(0);\n            });\n            pm.test(\"message\", function () {\n                pm.expect(response.message).to.equal(\"success\");\n            });\n            pm.test('summary_details is present', function () {\n                pm.expect(nr.summary_details).to.exist;\n            });\n\n            if (nr.info) {\n                var infolength, resourcetypename;\n                if (resourcetype === 2) {\n                    infolength = 17;\n                    resourcetypename = \"Monitor\";\n                }\n                if (resourcetype === 1) {\n                    infolength = 16;\n                    resourcetypename = \"Group\";\n                }\n                if (resourcetype === 4) {\n                    infolength = 16;\n                    resourcetypename = \"Monitor Type\";\n                }\n                if (resourcetype === 0) {\n                    infolength = 14;\n                    resourcetypename = \"All Monitors\";\n                }\n                if (nr.info.hasOwnProperty(\"resource_tags\")) {\n                    infolength = infolength + 1;\n                    pm.test('resource_tags', function () {\n                        pm.expect(nr.info.resource_tags).to.exist;\n                    });\n                }\n                if ((Object.keys(nr.info)).length === infolength) {\n                    pm.test('info111111', function () {\n                        pm.expect(true).to.be.true;\n                    });\n                    pm.test('resource type', function () {\n                        pm.expect(nr.info.resource_type).to.equal(resourcetype);\n                    });\n                    pm.test('report_type', function () {\n                        pm.expect(nr.info.report_type).to.exist;\n                    });\n                    pm.test('formatted_generated_time', function () {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n                    pm.test('period', function () {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n                    pm.test('start_time', function () {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n                    pm.test('generated_time', function () {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n                    pm.test('formatted_end_time', function () {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n                    pm.test('formatted_start_time', function () {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n                    pm.test('period_name', function () {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n                    pm.test('report_name', function () {\n                        pm.expect(nr.info.report_name).to.exist;\n                    });\n                    pm.test('resource_type_name', function () {\n                        pm.expect(nr.info.resource_type_name).to.equal(resourcetypename);\n                    });\n                    pm.test('end_time', function () {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n                    pm.test('segment_type_name', function () {\n                        pm.expect(nr.info.segment_type_name).to.exist;\n                    });\n                    pm.test('segment_type', function () {\n                        pm.expect(nr.info.segment_type).to.exist;\n                    });\n                    if (resourcetype === 4) {\n                        pm.test('monitor_type', function () {\n                            pm.expect(nr.info.monitor_type).to.exist;\n                        });\n                    }\n                    if (resourcetype == 1 || resourcetype == 2) {\n                        pm.test('resource_id', function () {\n                            pm.expect(nr.info.resource_id).to.exist;\n                        });\n                        pm.test('resource_name', function () {\n                            pm.expect(nr.info.resource_name).to.exist;\n                        });\n                    }\n                } else {\n                    if ((Object.keys(nr.info)).length > infolength) {\n                        pm.test('new attribute added to info', function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test('attribute removed from info', function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test('info', function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (nr.hasOwnProperty(\"summary_details\")) {\n                if (Object.keys(nr.summary_details).length == 12) {\n                    pm.test(\"down_count\", function () {\n                        pm.expect(nr.summary_details.down_count).to.not.be.null;\n                    });\n                    pm.test(\"downtime_duration\", function () {\n                        pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n                    });\n                    pm.test(\"availability_percentage\", function () {\n                        pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n                    });\n                    pm.test(\"mtbf\", function () {\n                        pm.expect(nr.summary_details.mtbf).to.not.be.null;\n                    });\n                    pm.test(\"unmanaged_duration\", function () {\n                        pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n                    });\n                    pm.test(\"alarm_count\", function () {\n                        pm.expect(nr.summary_details.alarm_count).to.not.be.null;\n                    });\n                    pm.test(\"mttr\", function () {\n                        pm.expect(nr.summary_details.mttr).to.not.be.null;\n                    });\n                    pm.test(\"maintenance_percentage\", function () {\n                        pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n                    });\n                    pm.test(\"maintenance_duration\", function () {\n                        pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n                    });\n                    pm.test(\"availability_duration\", function () {\n                        pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n                    });\n                    pm.test(\"unmanaged_percentage\", function () {\n                        pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n                    });\n                    pm.test(\"downtime_percentage\", function () {\n                        pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n                    });\n                } else {\n                    if (Object.keys(nr.summary_details).length > 12) {\n                        pm.test(\"new attribute added to port monitor summary_details\", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"attribute removed port monitor summary_details\", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"summary_details is missing\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (nr.hasOwnProperty(\"report_details\")) {\n                var reportData = resourcetype == 2 ? nr.report_details : nr.report_details[0];\n                pm.test(\"attributes\", function () {\n                    pm.expect(reportData.attributes).to.not.be.null;\n                });\n                pm.test(\"name\", function () {\n                    pm.expect(reportData.name).to.not.be.null;\n                });\n                pm.test(\"monitors\", function () {\n                    pm.expect(reportData.monitors).to.not.be.null;\n                });\n                pm.test(\"type\", function () {\n                    pm.expect(reportData.type).to.not.be.null;\n                });\n                if (resourcetype != 2 && reportData.monitors.length > 0) {\n                    pm.test(\"downtime_duration\", function () {\n                        pm.expect(reportData.monitors[0].downtime_duration).to.exist;\n                    });\n                    pm.test(\"name\", function () {\n                        pm.expect(reportData.monitors[0].name).to.exist;\n                    });\n                    pm.test(\"down_count\", function () {\n                        pm.expect(reportData.monitors[0].down_count).to.be.at.least(0);\n                    });\n                    pm.test(\"id\", function () {\n                        pm.expect(reportData.monitors[0].id).to.exist;\n                    });\n                    pm.test(\"tags\", function () {\n                        pm.expect(reportData.monitors[0].tags).to.exist;\n                    });\n                    pm.test(\"availability\", function () {\n                        pm.expect(reportData.monitors[0].availability).to.satisfy(function (value) {\n                            return value >= 0 || value === '-';\n                        });\n                    });\n                }\n            }\n\n            if (nr.hasOwnProperty(\"plugin_report_details\") && nr.plugin_report_details.length > 0) {\n                var reportData = nr.plugin_report_details[0];\n                pm.test(\"attributes\", function () {\n                    pm.expect(reportData.attributes).to.not.be.null;\n                });\n                pm.test(\"name\", function () {\n                    pm.expect(reportData.name).to.not.be.null;\n                });\n                pm.test(\"monitors\", function () {\n                    pm.expect(reportData.monitors).to.not.be.null;\n                });\n                pm.test(\"type\", function () {\n                    pm.expect(reportData.type).to.not.be.null;\n                });\n                if (reportData.monitors.length > 0) {\n                    pm.test(\"downtime_duration\", function () {\n                        pm.expect(reportData.monitors[0].downtime_duration).to.exist;\n                    });\n                    pm.test(\"name\", function () {\n                        pm.expect(reportData.monitors[0].name).to.exist;\n                    });\n                    pm.test(\"down_count\", function () {\n                        pm.expect(reportData.monitors[0].down_count).to.be.at.least(0);\n                    });\n                    pm.test(\"availability\", function () {\n                        pm.expect(reportData.monitors[0].availability).to.satisfy(function (value) {\n                            return value >= 0 || value === '-';\n                        });\n                        pm.test(\"id\", function () {\n                            pm.expect(reportData.monitors[0].id).to.exist;\n                        });\n                    });\n                }\n            }\n\n            if (nr.hasOwnProperty(\"customapi_report_details\") && nr.customapi_report_details.length > 0) {\n                var reportData = nr.customapi_report_details[0];\n                pm.test(\"attributes\", function () {\n                    pm.expect(reportData.attributes).to.not.be.null;\n                });\n                pm.test(\"name\", function () {\n                    pm.expect(reportData.name).to.not.be.null;\n                });\n                pm.test(\"monitors\", function () {\n                    pm.expect(reportData.monitors).to.not.be.null;\n                });\n                pm.test(\"type\", function () {\n                    pm.expect(reportData.type).to.not.be.null;\n                });\n                if (reportData.monitors.length > 0) {\n                    pm.test(\"downtime_duration\", function () {\n                        pm.expect(reportData.monitors[0].downtime_duration).to.exist;\n                    });\n                    pm.test(\"name\", function () {\n                        pm.expect(reportData.monitors[0].name).to.exist;\n                    });\n                    pm.test(\"down_count\", function () {\n                        pm.expect(reportData.monitors[0].down_count).to.be.at.least(0);\n                    });\n                    pm.test(\"availability\", function () {\n                        pm.expect(reportData.monitors[0].availability).to.satisfy(function (value) {\n                            return value >= 0 || value === '-';\n                        });\n                    });\n                    pm.test(\"id\", function () {\n                        pm.expect(reportData.monitors[0].id).to.exist;\n                    });\n                }\n            }\n        } else {\n            pm.test(\"error\", function () {\n                pm.expect(false).to.be.true;\n            });\n        }\n    }\n} + 'summaryreportdetailsford()');"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.clearGlobalVariable(\"date\");\npostman.clearGlobalVariable(\"portMonitor\");\npostman.clearGlobalVariable(\"monitorGroupIdForReport\");\npostman.clearGlobalVariable(\"monTypeForReport\");\npostman.clearGlobalVariable(\"monTypeForReport\");",
    "output": "pm.globals.unset(\"date\");\npm.globals.unset(\"portMonitor\");\npm.globals.unset(\"monitorGroupIdForReport\");\npm.globals.unset(\"monTypeForReport\");\npm.globals.unset(\"monTypeForReport\");"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar jsonData = JSON.parse(responseBody);\nfor (var i=0;i<jsonData.data.length;i++)\n{\n    if(undefined !== jsonData.data[i].monitors)\n    {\n        var monitorGroupId =jsonData.data[i].group_id;\n        postman.setGlobalVariable(\"monitorGroupIdForReport\",monitorGroupId);\n        break;\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\nfor (var i = 0; i < nr.length; i++) {\n    if (nr[i].hasOwnProperty('monitors')) {\n        var monitorGroupId = nr[i].group_id;\n        pm.globals.set(\"monitorGroupIdForReport\", monitorGroupId);\n        break;\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar jsonData = JSON.parse(responseBody);\n\nfor (var i=0;i<jsonData.data.length;i++)\n{\n    if(jsonData.data[i].type===\"URL\"){\n        \n        var monitorid =jsonData.data[i].id;\n        postman.setGlobalVariable(\"monitoridForReport\",monitorid);\n         postman.setGlobalVariable(\"monTypeForReport\",jsonData.data[i].type);\n        break;\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\nfor (var i = 0; i < nr.length; i++) {\n    if (nr[i].type === \"URL\") {\n        var monitorid = nr[i].id;\n        pm.globals.set(\"monitoridForReport\", monitorid);\n        pm.globals.set(\"monTypeForReport\", nr[i].type);\n        break;\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.summaryreportdetailsford);",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Response code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Summary details are present\", function () {\n    pm.expect(nr).to.have.property(\"summary_details\");\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\");\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\");\n    }\n});\n\npm.test(\"Charts data check\", function () {\n    if (Array.isArray(nr.charts)) {\n        nr.charts.forEach(chart => pm.expect(chart).to.be.an(\"object\"));\n    } else {\n        console.warn(\"charts is not an array or missing\");\n    }\n});\n\npm.test(\"Availability details check\", function () {\n    if (Array.isArray(nr.availability_details)) {\n        nr.availability_details.forEach(detail => pm.expect(detail).to.be.an(\"object\"));\n    } else {\n        console.warn(\"availability_details is not an array or missing\");\n    }\n});\n\npm.test(\"Outage details check\", function () {\n    if (Array.isArray(nr.outage_details)) {\n        nr.outage_details.forEach(outage => pm.expect(outage).to.be.an(\"object\"));\n    } else {\n        console.warn(\"outage_details is not an array or missing\");\n    }\n});\n\npm.test(\"Profile details check\", function () {\n    if (nr.hasOwnProperty(\"profile_details\")) {\n        pm.expect(nr.profile_details).to.be.an(\"object\");\n    } else {\n        console.warn(\"profile_details missing from response\");\n    }\n});\n\nconsole.log(\"response.data snapshot:\", JSON.stringify(nr, null, 2));"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.summaryreportdetailsford);",
    "output": "var funcUtils = eval(globals.summaryreportdetailsford);\n\npm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"summary_details has down_count\", function () {\n    if (nr.hasOwnProperty('summary_details')) {\n        pm.expect(nr.summary_details).to.have.property('down_count');\n    }\n});\n\npm.test(\"summary_details has downtime_duration\", function () {\n    if (nr.hasOwnProperty('summary_details')) {\n        pm.expect(nr.summary_details).to.have.property('downtime_duration');\n    }\n});\n\npm.test(\"charts is an array\", function () {\n    if (nr.hasOwnProperty('charts')) {\n        pm.expect(Array.isArray(nr.charts)).to.be.true;\n    }\n});\n\npm.test(\"availability_details is an array\", function () {\n    if (nr.hasOwnProperty('availability_details')) {\n        pm.expect(Array.isArray(nr.availability_details)).to.be.true;\n    }\n});\n\npm.test(\"outage_details is an array\", function () {\n    if (nr.hasOwnProperty('outage_details')) {\n        pm.expect(Array.isArray(nr.outage_details)).to.be.true;\n    }\n});\n\npm.test(\"profile_details has property\", function () {\n    if (nr.hasOwnProperty('profile_details')) {\n        pm.expect(nr.profile_details).to.have.property('property');\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.summaryreportdetailsford);",
    "output": "var funcUtils = eval(pm.globals.get(\"summaryreportdetailsford\"));\nsummaryreportdetailsford();\n\npm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Summary details are present\", function() {\n    pm.expect(nr).to.have.property(\"summary_details\");\n    pm.expect(nr.summary_details).to.have.property(\"down_count\");\n    pm.expect(nr.summary_details).to.have.property(\"downtime_duration\");\n});\n\npm.test(\"Charts are present and valid\", function() {\n    pm.expect(nr).to.have.property(\"charts\");\n    for (var i = 0; i < nr.charts.length; i++) {\n        pm.expect(nr.charts[i]).to.be.an(\"object\");\n    }\n});\n\npm.test(\"Info is present\", function() {\n    pm.expect(nr).to.have.property(\"info\");\n});\n\npm.test(\"Availability details are present and valid\", function() {\n    pm.expect(nr).to.have.property(\"availability_details\");\n    for (var i = 0; i < nr.availability_details.length; i++) {\n        pm.expect(nr.availability_details[i]).to.be.an(\"object\");\n    }\n});\n\npm.test(\"Outage details are present and valid\", function() {\n    pm.expect(nr).to.have.property(\"outage_details\");\n    for (var i = 0; i < nr.outage_details.length; i++) {\n        pm.expect(nr.outage_details[i]).to.be.an(\"object\");\n    }\n});\n\npm.test(\"Profile details are present\", function() {\n    pm.expect(nr).to.have.property(\"profile_details\");\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.summaryreportdetailsford);",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Response code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Summary details exist\", function () {\n    pm.expect(nr).to.have.property(\"summary_details\");\n});\n\npm.test(\"Down count is a number\", function () {\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details.down_count).to.be.a(\"number\");\n    }\n});\n\npm.test(\"Downtime duration is a number\", function () {\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details.downtime_duration).to.be.a(\"number\");\n    }\n});\n\npm.test(\"Charts array exists\", function () {\n    pm.expect(nr).to.have.property(\"charts\").that.is.an(\"array\");\n});\n\npm.test(\"Availability details array exists\", function () {\n    pm.expect(nr).to.have.property(\"availability_details\").that.is.an(\"array\");\n});\n\npm.test(\"Outage details array exists\", function () {\n    pm.expect(nr).to.have.property(\"outage_details\").that.is.an(\"array\");\n});\n\npm.test(\"Profile details object exists\", function () {\n    pm.expect(nr).to.have.property(\"profile_details\").that.is.an(\"object\");\n});\n\nvar funcUtils = eval(pm.globals.get(\"summaryreportdetailsford\"));\nsummaryreportdetailsford();"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.summaryreportdetailsford);",
    "output": "var funcUtils = eval(pm.globals.get(\"summaryreportdetailsford\"));\nsummaryreportdetailsford();\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Response code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\npm.test(\"Response has message\", function () {\n    pm.expect(response).to.have.property(\"message\");\n});\n\npm.test(\"Summary details contain down_count\", function () {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\");\n    }\n});\n\npm.test(\"Charts array is present\", function () {\n    pm.expect(nr).to.have.property(\"charts\");\n    pm.expect(nr.charts).to.be.an('array');\n});\n\npm.test(\"Availability details are present and valid\", function () {\n    if (nr.hasOwnProperty(\"availability_details\")) {\n        pm.expect(nr.availability_details).to.be.an('array');\n        nr.availability_details.forEach(function(detail) {\n            pm.expect(detail).to.have.property(\"duration\");\n        });\n    }\n});\n\npm.test(\"Outage details are present\", function () {\n    if (nr.hasOwnProperty(\"outage_details\")) {\n        pm.expect(nr.outage_details).to.be.an('array');\n        nr.outage_details.forEach(function(outage) {\n            pm.expect(outage).to.have.property(\"start_time\");\n        });\n    }\n});\n\npm.test(\"Profile details are present\", function () {\n    pm.expect(nr).to.have.property(\"profile_details\");\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.summaryreportdetailsford);",
    "output": "var funcUtils = eval(pm.globals.get('summaryreportdetailsford'));\nsummaryreportdetailsford();\n\npm.test(\"Response code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Response has success message\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(response.message).to.eql(\"success\");\n});\n\npm.test(\"Summary details exist\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property('summary_details');\n});\n\npm.test(\"Down count is a number\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.hasOwnProperty('summary_details')) {\n        pm.expect(nr.summary_details.down_count).to.be.a('number');\n    }\n});\n\npm.test(\"Charts array exists\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property('charts');\n});\n\npm.test(\"Charts array is not empty\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.hasOwnProperty('charts')) {\n        pm.expect(nr.charts.length).to.be.above(0);\n    }\n});\n\npm.test(\"Availability details array exists\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property('availability_details');\n});\n\npm.test(\"Availability details array is not empty\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.hasOwnProperty('availability_details')) {\n        pm.expect(nr.availability_details.length).to.be.above(0);\n    }\n});\n\npm.test(\"Profile details exist\", function () {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property('profile_details');\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.summaryreportdetailsford);",
    "output": "var funcUtils = eval(pm.globals.get(\"summaryreportdetailsford\"));"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var funcUtils = eval(globals.summaryreportdetailsford);",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"Response has data\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.be.an('object');\n});\n\npm.test(\"Summary details exist\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property('summary_details');\n});\n\npm.test(\"Down count is a number\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.summary_details) {\n        pm.expect(nr.summary_details.down_count).to.be.a('number');\n    }\n});\n\npm.test(\"Charts are an array\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.charts) {\n        pm.expect(nr.charts).to.be.an('array');\n    }\n});\n\npm.test(\"Availability details are an array\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.availability_details) {\n        pm.expect(nr.availability_details).to.be.an('array');\n    }\n});\n\npm.test(\"Outage details are an array\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    if (nr.outage_details) {\n        pm.expect(nr.outage_details).to.be.an('array');\n    }\n});\n\npm.test(\"Profile details exist\", function() {\n    var response = pm.response.json();\n    var nr = response.data || {};\n    pm.expect(nr).to.have.property('profile_details');\n});\n\nvar funcUtils = eval(pm.globals.get(\"summaryreportdetailsford\"));"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n\n    \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\nif(responseBody.has(\"outage_details\"))\n{\n    if(response.data.summary_details.down_count === 0)\n    {tests[\"outage_details\"] = responseBody.has('outage_details\":[]');}\n    else\n    \n    {tests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    } \n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}\n\n//performance_details\n\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"attribute_name\"] = responseBody.has(\"attribute_name\") ;\n    tests[\"attribute_name RESPONSE\"] = response.data.performance_details[0].attribute_name === 'RESPONSETIME';\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n    tests[\"attribute_value is not null\"] =  response.data.performance_details[0].attribute_value !== null;\n\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Summary details validation\npm.test(\"Summary details validation\", function() {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        var summaryDetails = nr.summary_details;\n        pm.expect(summaryDetails).to.have.property(\"down_count\").and.not.to.be.null;\n        pm.expect(summaryDetails).to.have.property(\"downtime_duration\").and.not.to.be.null;\n        pm.expect(summaryDetails).to.have.property(\"availability_percentage\").and.not.to.be.null;\n        pm.expect(summaryDetails).to.have.property(\"mtbf\").and.not.to.be.null;\n        pm.expect(summaryDetails).to.have.property(\"unmanaged_duration\").and.not.to.be.null;\n        pm.expect(summaryDetails).to.have.property(\"alarm_count\").and.not.to.be.null;\n        pm.expect(summaryDetails).to.have.property(\"mttr\").and.not.to.be.null;\n        pm.expect(summaryDetails).to.have.property(\"maintenance_percentage\").and.not.to.be.null;\n        pm.expect(summaryDetails).to.have.property(\"maintenance_duration\").and.not.to.be.null;\n        pm.expect(summaryDetails).to.have.property(\"availability_duration\").and.not.to.be.null;\n        pm.expect(summaryDetails).to.have.property(\"unmanaged_percentage\").and.not.to.be.null;\n        pm.expect(summaryDetails).to.have.property(\"downtime_percentage\").and.not.to.be.null;\n    } else {\n        pm.expect(nr).to.have.property(\"summary_details\");\n    }\n});\n\n// Info data validation\npm.test(\"Info data validation\", function() {\n    if (nr.hasOwnProperty(\"info\")) {\n        var info = nr.info;\n        pm.expect(info).to.have.property(\"resource_name\");\n        pm.expect(info).to.have.property(\"end_time\");\n        pm.expect(info.resource_type_name).to.equal(\"Monitor\");\n        pm.expect(info).to.have.property(\"report_name\");\n        pm.expect(info).to.have.property(\"period_name\");\n        pm.expect(info).to.have.property(\"formatted_start_time\");\n        pm.expect(info).to.have.property(\"generated_time\");\n        pm.expect(info).to.have.property(\"formatted_end_time\");\n        pm.expect(info).to.have.property(\"segment_type\");\n        pm.expect(info).to.have.property(\"start_time\");\n        pm.expect(info.resource_type).to.equal(2);\n        pm.expect(info).to.have.property(\"period\");\n        pm.expect(info).to.have.property(\"formatted_generated_time\");\n        pm.expect(info).to.have.property(\"report_type\");\n        pm.expect(info).to.have.property(\"segment_type_name\");\n        pm.expect(info).to.have.property(\"resource_tags\");\n    } else {\n        pm.expect(nr).to.have.property(\"info\");\n    }\n});\n\n// Outage data validation\npm.test(\"Outage data validation\", function() {\n    if (nr.hasOwnProperty(\"outage_details\")) {\n        if (nr.summary_details.down_count === 0) {\n            pm.expect(nr.outage_details).to.be.an(\"array\").that.is.empty;\n        } else {\n            var firstOutage = nr.outage_details[0];\n            pm.expect(firstOutage).to.have.property(\"outages\");\n            pm.expect(firstOutage).to.have.property(\"monitor_id\");\n            if (firstOutage.outages !== null) {\n                var firstOutageDetails = firstOutage.outages[0];\n                pm.expect(firstOutageDetails).to.have.property(\"outage_id\").and.not.to.be.null;\n                pm.expect(firstOutageDetails).to.have.property(\"end_time\").and.not.to.be.null;\n                pm.expect(firstOutageDetails).to.have.property(\"type\").and.not.to.be.null;\n                pm.expect(firstOutageDetails).to.have.property(\"start_time\").and.not.to.be.null;\n                pm.expect(firstOutageDetails).to.have.property(\"duration\").and.not.to.be.null;\n            } else {\n                pm.expect(firstOutage).to.have.property(\"outages\");\n            }\n        }\n    } else {\n        pm.expect(nr).to.have.property(\"outage_details\");\n    }\n});\n\n// Performance details validation\npm.test(\"Performance details validation\", function() {\n    if (nr.hasOwnProperty(\"performance_details\")) {\n        var performanceDetails = nr.performance_details[0];\n        pm.expect(performanceDetails).to.have.property(\"attribute_name\");\n        pm.expect(performanceDetails.attribute_name).to.equal(\"RESPONSETIME\");\n        pm.expect(performanceDetails).to.have.property(\"attribute_value\");\n        pm.expect(performanceDetails.attribute_value).not.to.be.null;\n    } else {\n        pm.expect(nr).to.have.property(\"performance_details\");\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n/*\n//Chart data validation\nif(responseBody.has(\"charts\"))\n{   \n    tests[\"name\"] = responseBody.has(\"name\");\n    tests[\"key\"] = responseBody.has(\"key\");\n    tests[\"data\"] = responseBody.has('data\":[[');\n    tests[\"charts\"] = responseBody.has(\"charts\");\n   \n}\nelse\n{tests[\"charts node is missing\"] = responseBody.has(\"charts\");} */\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\nif(responseBody.has(\"outage_details\"))\n{\n    if(response.data.summary_details.down_count === 0)\n    {tests[\"outage_details\"] = responseBody.has('outage_details\":[]');}\n    else\n    \n    {tests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    } \n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}\n\n//performance_details\n\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"attribute_name\"] = responseBody.has(\"attribute_name\");\n     tests[\"attribute_name RESPONSE\"] = response.data.performance_details[0].attribute_name === 'RESPONSETIME';\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\") && response.data.performance_details[0].attribute_value !== null\n    \n\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Summary details validation\nif (nr.hasOwnProperty(\"summary_details\")) {\n    pm.test(\"down_count\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"down_count\") && nr.summary_details.down_count !== null).to.be.true;\n    });\n    pm.test(\"downtime_duration\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"downtime_duration\") && nr.summary_details.downtime_duration !== null).to.be.true;\n    });\n    pm.test(\"availability_percentage\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"availability_percentage\") && nr.summary_details.availability_percentage !== null).to.be.true;\n    });\n    pm.test(\"mtbf\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"mtbf\") && nr.summary_details.mtbf !== null).to.be.true;\n    });\n    pm.test(\"unmanaged_duration\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"unmanaged_duration\") && nr.summary_details.unmanaged_duration !== null).to.be.true;\n    });\n    pm.test(\"alarm_count\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"alarm_count\") && nr.summary_details.alarm_count !== null).to.be.true;\n    });\n    pm.test(\"mttr\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"mttr\") && nr.summary_details.mttr !== null).to.be.true;\n    });\n    pm.test(\"maintenance_percentage\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"maintenance_percentage\") && nr.summary_details.maintenance_percentage !== null).to.be.true;\n    });\n    pm.test(\"maintenance_duration\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"maintenance_duration\") && nr.summary_details.maintenance_duration !== null).to.be.true;\n    });\n    pm.test(\"availability_duration\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"availability_duration\") && nr.summary_details.availability_duration !== null).to.be.true;\n    });\n    pm.test(\"unmanaged_percentage\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"unmanaged_percentage\") && nr.summary_details.unmanaged_percentage !== null).to.be.true;\n    });\n    pm.test(\"downtime_percentage\", function() {\n        pm.expect(nr.summary_details.hasOwnProperty(\"downtime_percentage\") && nr.summary_details.downtime_percentage !== null).to.be.true;\n    });\n} else {\n    pm.test(\"summary_details is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"summary_details\")).to.be.true;\n    });\n}\n\n// Info data validation\nif (nr.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"resource_name\")).to.be.true;\n    });\n    pm.test(\"end_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"resource_type_name\", function() {\n        pm.expect(nr.info.resource_type_name).to.equal(\"Monitor\");\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"segment_type\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"segment_type\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"resource type\", function() {\n        pm.expect(nr.info.resource_type).to.equal(2);\n    });\n    pm.test(\"period\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n    pm.test(\"segment_type_name\", function() {\n        pm.expect(nr.info.hasOwnProperty(\"segment_type_name\")).to.be.true;\n    });\n    if (nr.info.hasOwnProperty(\"resource_tags\")) {\n        pm.test(\"resource_tags\", function() {\n            pm.expect(nr.info.hasOwnProperty(\"resource_tags\")).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"info is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\n// Outage data validation\nif (nr.hasOwnProperty(\"outage_details\")) {\n    if (nr.summary_details.down_count === 0) {\n        pm.test(\"outage_details\", function() {\n            pm.expect(nr.outage_details.length).to.equal(0);\n        });\n    } else {\n        pm.test(\"outages\", function() {\n            pm.expect(nr.outage_details[0].hasOwnProperty(\"outages\")).to.be.true;\n        });\n        pm.test(\"monitor_id\", function() {\n            pm.expect(nr.outage_details[0].hasOwnProperty(\"monitor_id\")).to.be.true;\n        });\n        if (nr.outage_details[0].outages !== null) {\n            pm.test(\"outage_id\", function() {\n                pm.expect(nr.outage_details[0].outages[0].hasOwnProperty(\"outage_id\") && nr.outage_details[0].outages[0].outage_id !== null).to.be.true;\n            });\n            pm.test(\"end_time\", function() {\n                pm.expect(nr.outage_details[0].outages[0].hasOwnProperty(\"end_time\") && nr.outage_details[0].outages[0].end_time !== null).to.be.true;\n            });\n            pm.test(\"type\", function() {\n                pm.expect(nr.outage_details[0].outages[0].hasOwnProperty(\"type\") && nr.outage_details[0].outages[0].type !== null).to.be.true;\n            });\n            pm.test(\"start_time\", function() {\n                pm.expect(nr.outage_details[0].outages[0].hasOwnProperty(\"start_time\") && nr.outage_details[0].outages[0].start_time !== null).to.be.true;\n            });\n            pm.test(\"duration\", function() {\n                pm.expect(nr.outage_details[0].outages[0].hasOwnProperty(\"duration\") && nr.outage_details[0].outages[0].duration !== null).to.be.true;\n            });\n        } else {\n            pm.test(\"outages node is missing\", function() {\n                pm.expect(nr.outage_details[0].hasOwnProperty(\"outages\")).to.be.true;\n            });\n        }\n    }\n} else {\n    pm.test(\"outage_details node is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"outage_details\")).to.be.true;\n    });\n}\n\n// Performance details validation\nif (nr.hasOwnProperty(\"performance_details\")) {\n    pm.test(\"attribute_name\", function() {\n        pm.expect(nr.performance_details[0].hasOwnProperty(\"attribute_name\")).to.be.true;\n    });\n    pm.test(\"attribute_name RESPONSE\", function() {\n        pm.expect(nr.performance_details[0].attribute_name).to.equal(\"RESPONSETIME\");\n    });\n    pm.test(\"attribute_value\", function() {\n        pm.expect(nr.performance_details[0].hasOwnProperty(\"attribute_value\") && nr.performance_details[0].attribute_value !== null).to.be.true;\n    });\n} else {\n    pm.test(\"performance_details node is missing\", function() {\n        pm.expect(nr.hasOwnProperty(\"performance_details\")).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseData.data.info.resource_name!== null;\n    tests[\"end_time\"] = responseData.data.info.end_time!== null;\n    tests[\"resource_type_name\"] = responseData.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseData.data.info.report_name!== null;\n    tests[\"period_name\"] = responseData.data.info.period_name!== null;\n    tests[\"formatted_start_time\"] = responseData.data.info.formatted_start_time!== null;\n    tests[\"formatted_end_time\"] = responseData.data.info.formatted_end_time!== null;\n    tests[\"generated_time\"] = responseData.data.info.generated_time!== null;\n    tests[\"segment_type\"] = responseData.data.info.segment_type!== null;\n    tests[\"start_time\"] = responseData.data.info.start_time!== null;\n    tests[\"resource_type\"] = responseData.data.info.resource_type == 2;\n    tests[\"period\"] = responseData.data.info.period !== null;\n    tests[\"formatted_generated_time\"] = responseData.data.info.formatted_generated_time !== null;\n    tests[\"resource_id\"] = responseData.data.info.resource_id !== null;\n    tests[\"monitor_type\"] = responseData.data.info.monitor_type !== null;\n    tests[\"report_type\"] = responseData.data.info.report_type !== null;\n    tests[\"segment_type_name\"] = responseData.data.info.segment_type_name !== null;\n    tests[\"resource_tags\"] = responseData.data.info.resource_tags!==null;\n\n}\ntests[\"summary_details\"] = responseBody.has(\"summary_details\") && responseData.data.summary_details !== null;\nif(responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseData.data.summary_details.down_count!== null;\n    tests[\"downtime_duration\"] = responseData.data.summary_details.downtime_duration!== null;\n    tests[\"availability_percentage\"] = responseData.data.summary_details.availability_percentage!== null;\n    tests[\"mtbf\"] = responseData.data.summary_details.mtbf!== null;\n    tests[\"unmanaged_duration\"] = responseData.data.summary_details.unmanaged_duration!== null;\n    tests[\"alarm_count\"] = responseData.data.summary_details.alarm_count!== null;\n    tests[\"mttr\"] = responseData.data.summary_details.mttr!== null;\n    tests[\"maintenance_percentage\"] = responseData.data.summary_details.maintenance_percentage!== null;\n    tests[\"maintenance_duration\"] = responseData.data.summary_details.maintenance_duration!== null;\n    tests[\"availability_duration\"] = responseData.data.summary_details.availability_duration!== null;\n    tests[\"unmanaged_percentage\"] = responseData.data.summary_details.unmanaged_percentage!== null;\n    tests[\"downtime_percentage\"] = responseData.data.summary_details.downtime_percentage!== null;\n}\ntests[\"performance_details\"] = responseBody.has(\"performance_details\") && responseData.data.performance_details !== null;\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"attribute_name\"] = responseData.data.performance_details[0].attribute_name!== null;\n    tests[\"attribute_label\"] = responseData.data.performance_details[0].attribute_label!== null;\n    tests[\"attribute_value\"] = responseData.data.performance_details[0].attribute_value!== null;\n}\ntests[\"outage_details\"] = responseBody.has(\"outage_details\") && responseData.data.outage_details !== null;\nif(responseBody.has(\"outage_details\"))\n{\n    for(var i=0;i < responseData.data.outage_details.length;i++)\n    {\n        tests[\"outage_details_\"+i+\"_display_name\"] = responseData.data.outage_details[i].display_name!== null;\n        tests[\"outage_details_\"+i+\"_outages\"] = responseData.data.outage_details[i].outages!== null;\n        tests[\"outage_details_\"+i+\"_monitor_id\"] = responseData.data.outage_details[i].monitor_id!== null;\n        if(responseData.data.outage_details[i].outages!== null)\n        {\n            for(var j=0;j < responseData.data.outage_details[i].outages.length; j++)\n            {\n                tests[\"outage_\"+j+\"_outage_id\"] = responseData.data.outage_details[i].outages[j].outage_id!== null;\n                tests[\"outage_\"+j+\"_end_time\"] = responseData.data.outage_details[i].outages[j].end_time!== null;\n                tests[\"outage_\"+j+\"_image_file\"] = responseData.data.outage_details[i].outages[j].image_file!== null;\n                tests[\"outage_\"+j+\"_type\"] = responseData.data.outage_details[i].outages[j].type!== null;\n                tests[\"outage_\"+j+\"_start_time\"] = responseData.data.outage_details[i].outages[j].start_time!== null;\n                tests[\"outage_\"+j+\"_rca\"] = responseData.data.outage_details[i].outages[j].rca!== null;\n                tests[\"outage_\"+j+\"_reason\"] = responseData.data.outage_details[i].outages[j].reason!== null;\n                tests[\"outage_\"+j+\"_duration\"] = responseData.data.outage_details[i].outages[j].duration!== null;\n            }\n        }\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\n\n// Info validation\npm.test(\"info\", function () {\n    pm.expect(response.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n});\n\nif (nr.info) {\n    pm.test(\"resource_name\", function () {\n        pm.expect(nr.info.resource_name).to.not.be.null;\n    });\n    pm.test(\"end_time\", function () {\n        pm.expect(nr.info.end_time).to.not.be.null;\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info.resource_type_name).to.eql(\"Monitor\");\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.info.report_name).to.not.be.null;\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(nr.info.period_name).to.not.be.null;\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(nr.info.formatted_start_time).to.not.be.null;\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(nr.info.formatted_end_time).to.not.be.null;\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(nr.info.generated_time).to.not.be.null;\n    });\n    pm.test(\"segment_type\", function () {\n        pm.expect(nr.info.segment_type).to.not.be.null;\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(nr.info.start_time).to.not.be.null;\n    });\n    pm.test(\"resource_type\", function () {\n        pm.expect(nr.info.resource_type).to.eql(2);\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.info.period).to.not.be.null;\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(nr.info.formatted_generated_time).to.not.be.null;\n    });\n    pm.test(\"resource_id\", function () {\n        pm.expect(nr.info.resource_id).to.not.be.null;\n    });\n    pm.test(\"monitor_type\", function () {\n        pm.expect(nr.info.monitor_type).to.not.be.null;\n    });\n    pm.test(\"report_type\", function () {\n        pm.expect(nr.info.report_type).to.not.be.null;\n    });\n    pm.test(\"segment_type_name\", function () {\n        pm.expect(nr.info.segment_type_name).to.not.be.null;\n    });\n    pm.test(\"resource_tags\", function () {\n        pm.expect(nr.info.resource_tags).to.not.be.null;\n    });\n}\n\n// Summary Details\npm.test(\"summary_details\", function () {\n    pm.expect(response.hasOwnProperty(\"summary_details\") && nr.summary_details !== null).to.be.true;\n});\n\nif (nr.summary_details) {\n    pm.test(\"down_count\", function () {\n        pm.expect(nr.summary_details.down_count).to.not.be.null;\n    });\n    pm.test(\"downtime_duration\", function () {\n        pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n    });\n    pm.test(\"availability_percentage\", function () {\n        pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n    });\n    pm.test(\"mtbf\", function () {\n        pm.expect(nr.summary_details.mtbf).to.not.be.null;\n    });\n    pm.test(\"unmanaged_duration\", function () {\n        pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n    });\n    pm.test(\"alarm_count\", function () {\n        pm.expect(nr.summary_details.alarm_count).to.not.be.null;\n    });\n    pm.test(\"mttr\", function () {\n        pm.expect(nr.summary_details.mttr).to.not.be.null;\n    });\n    pm.test(\"maintenance_percentage\", function () {\n        pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n    });\n    pm.test(\"maintenance_duration\", function () {\n        pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n    });\n    pm.test(\"availability_duration\", function () {\n        pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n    });\n    pm.test(\"unmanaged_percentage\", function () {\n        pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n    });\n    pm.test(\"downtime_percentage\", function () {\n        pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n    });\n}\n\n// Performance Details\npm.test(\"performance_details\", function () {\n    pm.expect(response.hasOwnProperty(\"performance_details\") && nr.performance_details !== null).to.be.true;\n});\n\nif (nr.performance_details) {\n    let groupKeys = Object.keys(nr.performance_details);\n    if (groupKeys.length > 0) {\n        let group = nr.performance_details[groupKeys[0]];\n        pm.test(\"attribute_name\", function () {\n            pm.expect(group.attribute_data[0].attribute_name).to.not.be.null;\n        });\n        pm.test(\"attribute_label\", function () {\n            pm.expect(group.attribute_data[0].attribute_label).to.not.be.null;\n        });\n        pm.test(\"attribute_value\", function () {\n            pm.expect(group.attribute_data[0].attribute_value).to.not.be.null;\n        });\n    }\n}\n\n// Outage Details\npm.test(\"outage_details\", function () {\n    pm.expect(response.hasOwnProperty(\"outage_details\") && nr.outage_details !== null).to.be.true;\n});\n\nif (Array.isArray(nr.outage_details)) {\n    for (let i = 0; i < nr.outage_details.length; i++) {\n        let outageGroup = nr.outage_details[i];\n\n        pm.test(`outage_details_${i}_display_name`, function () {\n            pm.expect(outageGroup.display_name).to.not.be.null;\n        });\n\n        pm.test(`outage_details_${i}_outages`, function () {\n            pm.expect(outageGroup.outages).to.not.be.null;\n        });\n\n        pm.test(`outage_details_${i}_monitor_id`, function () {\n            pm.expect(outageGroup.monitor_id).to.not.be.null;\n        });\n\n        if (Array.isArray(outageGroup.outages)) {\n            for (let j = 0; j < outageGroup.outages.length; j++) {\n                let outage = outageGroup.outages[j];\n\n                pm.test(`outage_${j}_outage_id`, function () {\n                    pm.expect(outage.outage_id).to.not.be.null;\n                });\n                pm.test(`outage_${j}_end_time`, function () {\n                    pm.expect(outage.end_time).to.not.be.null;\n                });\n                pm.test(`outage_${j}_image_file`, function () {\n                    pm.expect(outage.image_file).to.not.be.null;\n                });\n                pm.test(`outage_${j}_type`, function () {\n                    pm.expect(outage.type).to.not.be.null;\n                });\n                pm.test(`outage_${j}_start_time`, function () {\n                    pm.expect(outage.start_time).to.not.be.null;\n                });\n                pm.test(`outage_${j}_rca`, function () {\n                    pm.expect(outage.rca).to.not.be.null;\n                });\n                pm.test(`outage_${j}_reason`, function () {\n                    pm.expect(outage.reason).to.not.be.null;\n                });\n                pm.test(`outage_${j}_duration`, function () {\n                    pm.expect(outage.duration).to.not.be.null;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setGlobalVariable(\"rbmmid\",postman.getGlobalVariable(\"getRBMMid\"));",
    "output": "pm.globals.set(\"rbmmid\", pm.globals.get(\"getRBMMid\"));"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n\n    \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\nif(responseBody.has(\"outage_details\"))\n{\n    if(response.data.summary_details.down_count === 0)\n    {tests[\"outage_details\"] = responseBody.has('outage_details\":[]');}\n    else\n    \n    {tests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    } \n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}\n\n//performance_details\n\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"attribute_name\"] = responseBody.has(\"attribute_name\") ;\n    tests[\"attribute_name RESPONSE\"] = response.data.performance_details[0].attribute_name === 'RESPONSETIME';\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n    tests[\"attribute_value is not null\"] =  response.data.performance_details[0].attribute_value !== null;\n\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Summary details validation\npm.test(\"Summary details validation\", function() {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"mttr\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\").and.to.not.be.null;\n    } else {\n        pm.expect(nr).to.have.property(\"summary_details\");\n    }\n});\n\n// Info data validation\npm.test(\"Info data validation\", function() {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.expect(nr.info).to.have.property(\"resource_name\");\n        pm.expect(nr.info).to.have.property(\"end_time\");\n        pm.expect(nr.info.resource_type_name).to.equal(\"Monitor\");\n        pm.expect(nr.info).to.have.property(\"report_name\");\n        pm.expect(nr.info).to.have.property(\"period_name\");\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n        pm.expect(nr.info).to.have.property(\"start_time\");\n        pm.expect(nr.info.resource_type).to.equal(2);\n        pm.expect(nr.info).to.have.property(\"period\");\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        pm.expect(nr.info).to.have.property(\"report_type\");\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n        if (nr.info.hasOwnProperty(\"resource_tags\")) {\n            pm.expect(nr.info).to.have.property(\"resource_tags\");\n        }\n    } else {\n        pm.expect(nr).to.have.property(\"info\");\n    }\n});\n\n// Outage data validation\npm.test(\"Outage data validation\", function() {\n    if (nr.hasOwnProperty(\"outage_details\")) {\n        if (nr.summary_details.down_count === 0) {\n            pm.expect(nr.outage_details).to.be.an(\"array\").that.is.empty;\n        } else {\n            pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            pm.expect(nr.outage_details[0]).to.have.property(\"monitor_id\");\n            if (nr.outage_details[0].outages !== null) {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\").and.to.not.be.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\").and.to.not.be.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\").and.to.not.be.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\").and.to.not.be.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\").and.to.not.be.null;\n            } else {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            }\n        }\n    } else {\n        pm.expect(nr).to.have.property(\"outage_details\");\n    }\n});\n\n// Performance details\npm.test(\"Performance details\", function() {\n    if (nr.hasOwnProperty(\"performance_details\")) {\n        pm.expect(nr.performance_details[0]).to.have.property(\"attribute_name\");\n        pm.expect(nr.performance_details[0].attribute_name).to.equal(\"RESPONSETIME\");\n        pm.expect(nr.performance_details[0]).to.have.property(\"attribute_value\");\n        pm.expect(nr.performance_details[0].attribute_value).to.not.be.null;\n    } else {\n        pm.expect(nr).to.have.property(\"performance_details\");\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\nif(responseBody.has(\"outage_details\"))\n{\n    if(response.data.summary_details.down_count === 0)\n    {tests[\"outage_details\"] = responseBody.has('outage_details\":[]');}\n    else\n    \n    {tests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    } \n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}\n\n//performance_details\n\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"attribute_name\"] = responseBody.has(\"attribute_name\") ;\n    tests[\"attribute_name RESPONSE\"] = response.data.performance_details[0].attribute_name === 'RESPONSETIME';\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n    tests[\"attribute_value is not null\"] =  response.data.performance_details[0].attribute_value !== null;\n\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Summary details validation\npm.test(\"Summary details validation\", function () {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\");\n        pm.expect(nr.summary_details.down_count).not.to.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\");\n        pm.expect(nr.summary_details.downtime_duration).not.to.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\");\n        pm.expect(nr.summary_details.availability_percentage).not.to.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\");\n        pm.expect(nr.summary_details.mtbf).not.to.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\");\n        pm.expect(nr.summary_details.unmanaged_duration).not.to.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\");\n        pm.expect(nr.summary_details.alarm_count).not.to.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"mttr\");\n        pm.expect(nr.summary_details.mttr).not.to.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\");\n        pm.expect(nr.summary_details.maintenance_percentage).not.to.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\");\n        pm.expect(nr.summary_details.maintenance_duration).not.to.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\");\n        pm.expect(nr.summary_details.availability_duration).not.to.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\");\n        pm.expect(nr.summary_details.unmanaged_percentage).not.to.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\");\n        pm.expect(nr.summary_details.downtime_percentage).not.to.be.null;\n    } else {\n        pm.expect(response).to.have.property(\"summary_details\");\n    }\n});\n\n// Info data validation\npm.test(\"Info data validation\", function () {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.expect(nr.info).to.have.property(\"resource_name\");\n        pm.expect(nr.info).to.have.property(\"end_time\");\n        pm.expect(nr.info.resource_type_name).to.equal(\"Monitor\");\n        pm.expect(nr.info).to.have.property(\"report_name\");\n        pm.expect(nr.info).to.have.property(\"period_name\");\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n        pm.expect(nr.info).to.have.property(\"start_time\");\n        pm.expect(nr.info.resource_type).to.equal(2);\n        pm.expect(nr.info).to.have.property(\"period\");\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        pm.expect(nr.info).to.have.property(\"report_type\");\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n        if (nr.info.hasOwnProperty(\"resource_tags\")) {\n            pm.expect(nr.info).to.have.property(\"resource_tags\");\n        }\n    } else {\n        pm.expect(response).to.have.property(\"info\");\n    }\n});\n\n// Outage data validation\npm.test(\"Outage data validation\", function () {\n    if (nr.hasOwnProperty(\"outage_details\")) {\n        if (nr.summary_details.down_count === 0) {\n            pm.expect(nr).to.have.property(\"outage_details\");\n            pm.expect(nr.outage_details).to.be.an(\"array\").that.is.empty;\n        } else {\n            pm.expect(nr).to.have.property(\"outages\");\n            pm.expect(nr).to.have.property(\"monitor_id\");\n            if (nr.outage_details.length > 0 && nr.outage_details[0].hasOwnProperty(\"outages\")) {\n                var outage = nr.outage_details[0].outages[0];\n                pm.expect(outage).to.have.property(\"outage_id\");\n                pm.expect(outage.outage_id).not.to.be.null;\n                pm.expect(outage).to.have.property(\"end_time\");\n                pm.expect(outage.end_time).not.to.be.null;\n                pm.expect(outage).to.have.property(\"type\");\n                pm.expect(outage.type).not.to.be.null;\n                pm.expect(outage).to.have.property(\"start_time\");\n                pm.expect(outage.start_time).not.to.be.null;\n                pm.expect(outage).to.have.property(\"duration\");\n                pm.expect(outage.duration).not.to.be.null;\n            } else {\n                pm.expect(nr).to.have.property(\"outages\");\n            }\n        }\n    } else {\n        pm.expect(response).to.have.property(\"outage_details\");\n    }\n});\n\n// Performance details validation\npm.test(\"Performance details validation\", function () {\n    if (nr.hasOwnProperty(\"performance_details\")) {\n        pm.expect(nr.performance_details[0]).to.have.property(\"attribute_name\");\n        pm.expect(nr.performance_details[0].attribute_name).to.equal(\"RESPONSETIME\");\n        pm.expect(nr.performance_details[0]).to.have.property(\"attribute_value\");\n        pm.expect(nr.performance_details[0].attribute_value).not.to.be.null;\n    } else {\n        pm.expect(response).to.have.property(\"performance_details\");\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n   if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\nif(responseBody.has(\"outage_details\"))\n{\n    if(response.data.summary_details.down_count === 0)\n    {tests[\"outage_details\"] = responseBody.has('outage_details\":[]');}\n    else\n    \n    {tests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    } \n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}\n\n//performance_details\n\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"attribute_name\"] = responseBody.has(\"attribute_name\") ;\n    tests[\"attribute_name RESPONSE\"] = response.data.performance_details[0].attribute_name === 'RESPONSETIME';\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n    tests[\"attribute_value is not null\"] =  response.data.performance_details[0].attribute_value !== null;\n\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Summary details validation\npm.test(\"Summary details validation\", function () {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\");\n        pm.expect(nr.summary_details.down_count).to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\");\n        pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\");\n        pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\");\n        pm.expect(nr.summary_details.mtbf).to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\");\n        pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\");\n        pm.expect(nr.summary_details.alarm_count).to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"mttr\");\n        pm.expect(nr.summary_details.mttr).to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\");\n        pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\");\n        pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\");\n        pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\");\n        pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\");\n        pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n    } else {\n        pm.expect(nr).to.have.property(\"summary_details\");\n    }\n});\n\n// Info data validation\npm.test(\"Info data validation\", function () {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.expect(nr.info).to.have.property(\"resource_name\");\n        pm.expect(nr.info).to.have.property(\"end_time\");\n        pm.expect(nr.info.resource_type_name).to.equal(\"Monitor\");\n        pm.expect(nr.info).to.have.property(\"report_name\");\n        pm.expect(nr.info).to.have.property(\"period_name\");\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n        pm.expect(nr.info).to.have.property(\"start_time\");\n        pm.expect(nr.info.resource_type).to.equal(2);\n        pm.expect(nr.info).to.have.property(\"period\");\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        pm.expect(nr.info).to.have.property(\"report_type\");\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n        if (nr.info.hasOwnProperty(\"resource_tags\")) {\n            pm.expect(nr.info).to.have.property(\"resource_tags\");\n        }\n    } else {\n        pm.expect(nr).to.have.property(\"info\");\n    }\n});\n\n// Outage data validation\npm.test(\"Outage data validation\", function () {\n    if (nr.hasOwnProperty(\"outage_details\")) {\n        if (nr.summary_details.down_count === 0) {\n            pm.expect(nr.outage_details).to.eql([]);\n        } else {\n            pm.expect(nr.outage_details).to.have.property(\"outages\");\n            pm.expect(nr.outage_details).to.have.property(\"monitor_id\");\n            if (nr.outage_details[0].outages !== null) {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\");\n                pm.expect(nr.outage_details[0].outages[0].outage_id).to.not.be.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\");\n                pm.expect(nr.outage_details[0].outages[0].end_time).to.not.be.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\");\n                pm.expect(nr.outage_details[0].outages[0].type).to.not.be.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\");\n                pm.expect(nr.outage_details[0].outages[0].start_time).to.not.be.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\");\n                pm.expect(nr.outage_details[0].outages[0].duration).to.not.be.null;\n            } else {\n                pm.expect(nr.outage_details).to.have.property(\"outages\");\n            }\n        }\n    } else {\n        pm.expect(nr).to.have.property(\"outage_details\");\n    }\n});\n\n// Performance details\npm.test(\"Performance details\", function () {\n    if (nr.hasOwnProperty(\"performance_details\")) {\n        pm.expect(nr.performance_details[0]).to.have.property(\"attribute_name\");\n        pm.expect(nr.performance_details[0].attribute_name).to.equal(\"RESPONSETIME\");\n        pm.expect(nr.performance_details[0]).to.have.property(\"attribute_value\");\n        pm.expect(nr.performance_details[0].attribute_value).to.not.be.null;\n    } else {\n        pm.expect(nr).to.have.property(\"performance_details\");\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\nif(responseBody.has(\"outage_details\"))\n{\n    if(response.data.summary_details.down_count === 0)\n    {tests[\"outage_details\"] = responseBody.has('outage_details\":[]');}\n    else\n    \n    {tests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    } \n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}\n\n//performance_details\n\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"attribute_name\"] = responseBody.has(\"attribute_name\") ;\n    tests[\"attribute_name RESPONSE\"] = response.data.performance_details[0].attribute_name === 'RESPONSETIME';\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n    tests[\"attribute_value is not null\"] =  response.data.performance_details[0].attribute_value !== null;\n\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Summary details validation\npm.test(\"Summary details validation\", function() {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        var summaryDetails = nr.summary_details;\n        pm.expect(summaryDetails.hasOwnProperty(\"down_count\") && summaryDetails.down_count !== null).to.be.true;\n        pm.expect(summaryDetails.hasOwnProperty(\"downtime_duration\") && summaryDetails.downtime_duration !== null).to.be.true;\n        pm.expect(summaryDetails.hasOwnProperty(\"availability_percentage\") && summaryDetails.availability_percentage !== null).to.be.true;\n        pm.expect(summaryDetails.hasOwnProperty(\"mtbf\") && summaryDetails.mtbf !== null).to.be.true;\n        pm.expect(summaryDetails.hasOwnProperty(\"unmanaged_duration\") && summaryDetails.unmanaged_duration !== null).to.be.true;\n        pm.expect(summaryDetails.hasOwnProperty(\"alarm_count\") && summaryDetails.alarm_count !== null).to.be.true;\n        pm.expect(summaryDetails.hasOwnProperty(\"mttr\") && summaryDetails.mttr !== null).to.be.true;\n        pm.expect(summaryDetails.hasOwnProperty(\"maintenance_percentage\") && summaryDetails.maintenance_percentage !== null).to.be.true;\n        pm.expect(summaryDetails.hasOwnProperty(\"maintenance_duration\") && summaryDetails.maintenance_duration !== null).to.be.true;\n        pm.expect(summaryDetails.hasOwnProperty(\"availability_duration\") && summaryDetails.availability_duration !== null).to.be.true;\n        pm.expect(summaryDetails.hasOwnProperty(\"unmanaged_percentage\") && summaryDetails.unmanaged_percentage !== null).to.be.true;\n        pm.expect(summaryDetails.hasOwnProperty(\"downtime_percentage\") && summaryDetails.downtime_percentage !== null).to.be.true;\n    } else {\n        pm.expect(nr.hasOwnProperty(\"summary_details\")).to.be.true;\n    }\n});\n\n// Info data validation\npm.test(\"Info data validation\", function() {\n    if (nr.hasOwnProperty(\"info\")) {\n        var info = nr.info;\n        pm.expect(info.hasOwnProperty(\"resource_name\")).to.be.true;\n        pm.expect(info.hasOwnProperty(\"end_time\")).to.be.true;\n        pm.expect(info.resource_type_name === 'Monitor').to.be.true;\n        pm.expect(info.hasOwnProperty(\"report_name\")).to.be.true;\n        pm.expect(info.hasOwnProperty(\"period_name\")).to.be.true;\n        pm.expect(info.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n        pm.expect(info.hasOwnProperty(\"generated_time\")).to.be.true;\n        pm.expect(info.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n        pm.expect(info.hasOwnProperty(\"segment_type\")).to.be.true;\n        pm.expect(info.hasOwnProperty(\"start_time\")).to.be.true;\n        pm.expect(info.resource_type === 2).to.be.true;\n        pm.expect(info.hasOwnProperty(\"period\")).to.be.true;\n        pm.expect(info.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n        pm.expect(info.hasOwnProperty(\"report_type\")).to.be.true;\n        pm.expect(info.hasOwnProperty(\"segment_type_name\")).to.be.true;\n        if (info.hasOwnProperty(\"resource_tags\")) {\n            pm.expect(info.hasOwnProperty(\"resource_tags\")).to.be.true;\n        }\n    } else {\n        pm.expect(nr.hasOwnProperty(\"info\")).to.be.true;\n    }\n});\n\n// Outage data validation\npm.test(\"Outage data validation\", function() {\n    if (nr.hasOwnProperty(\"outage_details\")) {\n        var outageDetails = nr.outage_details;\n        if (nr.summary_details.down_count === 0) {\n            pm.expect(outageDetails.length === 0).to.be.true;\n        } else {\n            pm.expect(outageDetails.hasOwnProperty(\"outages\")).to.be.true;\n            pm.expect(outageDetails.hasOwnProperty(\"monitor_id\")).to.be.true;\n            if (outageDetails[0].hasOwnProperty(\"outages\")) {\n                var firstOutage = outageDetails[0].outages[0];\n                pm.expect(firstOutage.hasOwnProperty(\"outage_id\") && firstOutage.outage_id !== null).to.be.true;\n                pm.expect(firstOutage.hasOwnProperty(\"end_time\") && firstOutage.end_time !== null).to.be.true;\n                pm.expect(firstOutage.hasOwnProperty(\"type\") && firstOutage.type !== null).to.be.true;\n                pm.expect(firstOutage.hasOwnProperty(\"start_time\") && firstOutage.start_time !== null).to.be.true;\n                pm.expect(firstOutage.hasOwnProperty(\"duration\") && firstOutage.duration !== null).to.be.true;\n            } else {\n                pm.expect(outageDetails.hasOwnProperty(\"outages\")).to.be.true;\n            }\n        }\n    } else {\n        pm.expect(nr.hasOwnProperty(\"outage_details\")).to.be.true;\n    }\n});\n\n// Performance details validation\npm.test(\"Performance details validation\", function() {\n    if (nr.hasOwnProperty(\"performance_details\")) {\n        var performanceDetails = nr.performance_details;\n        pm.expect(performanceDetails[0].hasOwnProperty(\"attribute_name\")).to.be.true;\n        pm.expect(performanceDetails[0].attribute_name === 'RESPONSETIME').to.be.true;\n        pm.expect(performanceDetails[0].hasOwnProperty(\"attribute_value\")).to.be.true;\n        pm.expect(performanceDetails[0].attribute_value !== null).to.be.true;\n    } else {\n        pm.expect(nr.hasOwnProperty(\"performance_details\")).to.be.true;\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\nif(responseBody.has(\"outage_details\"))\n{\n    if(response.data.summary_details.down_count === 0)\n    {tests[\"outage_details\"] = responseBody.has('outage_details\":[]');}\n    else\n    \n    {tests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    } \n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}\n\n//performance_details\n\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"attribute_name\"] = responseBody.has(\"attribute_name\") ;\n    tests[\"attribute_name RESPONSE\"] = response.data.performance_details[0].attribute_name === 'RESPONSETIME';\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n    tests[\"attribute_value is not null\"] =  response.data.performance_details[0].attribute_value !== null;\n\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Summary details validation\nif (nr.hasOwnProperty(\"summary_details\")) {\n    pm.test(\"down_count\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\").that.is.not.null;\n    });\n    pm.test(\"downtime_duration\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\").that.is.not.null;\n    });\n    pm.test(\"availability_percentage\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\").that.is.not.null;\n    });\n    pm.test(\"mtbf\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\").that.is.not.null;\n    });\n    pm.test(\"unmanaged_duration\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\").that.is.not.null;\n    });\n    pm.test(\"alarm_count\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\").that.is.not.null;\n    });\n    pm.test(\"mttr\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"mttr\").that.is.not.null;\n    });\n    pm.test(\"maintenance_percentage\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\").that.is.not.null;\n    });\n    pm.test(\"maintenance_duration\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\").that.is.not.null;\n    });\n    pm.test(\"availability_duration\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\").that.is.not.null;\n    });\n    pm.test(\"unmanaged_percentage\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\").that.is.not.null;\n    });\n    pm.test(\"downtime_percentage\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\").that.is.not.null;\n    });\n} else {\n    pm.test(\"summary_details is missing\", function() {\n        pm.expect(nr).to.have.property(\"summary_details\");\n    });\n}\n\n// Info data validation\nif (nr.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function() {\n        pm.expect(nr.info).to.have.property(\"resource_name\");\n    });\n    pm.test(\"end_time\", function() {\n        pm.expect(nr.info).to.have.property(\"end_time\");\n    });\n    pm.test(\"resource_type_name\", function() {\n        pm.expect(nr.info.resource_type_name).to.equal(\"Monitor\");\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(nr.info).to.have.property(\"report_name\");\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(nr.info).to.have.property(\"period_name\");\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n    });\n    pm.test(\"segment_type\", function() {\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(nr.info).to.have.property(\"start_time\");\n    });\n    pm.test(\"resource type\", function() {\n        pm.expect(nr.info.resource_type).to.equal(2);\n    });\n    pm.test(\"period\", function() {\n        pm.expect(nr.info).to.have.property(\"period\");\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(nr.info).to.have.property(\"report_type\");\n    });\n    pm.test(\"segment_type_name\", function() {\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n    });\n    if (nr.info.hasOwnProperty(\"resource_tags\")) {\n        pm.test(\"resource_tags\", function() {\n            pm.expect(nr.info).to.have.property(\"resource_tags\");\n        });\n    }\n} else {\n    pm.test(\"info is missing\", function() {\n        pm.expect(nr).to.have.property(\"info\");\n    });\n}\n\n// Outage data validation\nif (nr.hasOwnProperty(\"outage_details\")) {\n    if (nr.summary_details.down_count === 0) {\n        pm.test(\"outage_details\", function() {\n            pm.expect(nr).to.have.property(\"outage_details\").that.is.an('array').that.is.empty;\n        });\n    } else {\n        pm.test(\"outages\", function() {\n            pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n        });\n        pm.test(\"monitor_id\", function() {\n            pm.expect(nr.outage_details[0]).to.have.property(\"monitor_id\");\n        });\n        if (nr.outage_details[0].outages !== null) {\n            pm.test(\"outage_id\", function() {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\").that.is.not.null;\n            });\n            pm.test(\"end_time\", function() {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\").that.is.not.null;\n            });\n            pm.test(\"type\", function() {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\").that.is.not.null;\n            });\n            pm.test(\"start_time\", function() {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\").that.is.not.null;\n            });\n            pm.test(\"duration\", function() {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\").that.is.not.null;\n            });\n        } else {\n            pm.test(\"outages node is missing\", function() {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            });\n        }\n    }\n} else {\n    pm.test(\"outage_details node is missing\", function() {\n        pm.expect(nr).to.have.property(\"outage_details\");\n    });\n}\n\n// Performance details\nif (nr.hasOwnProperty(\"performance_details\")) {\n    pm.test(\"attribute_name\", function() {\n        pm.expect(nr.performance_details[0]).to.have.property(\"attribute_name\");\n    });\n    pm.test(\"attribute_name RESPONSE\", function() {\n        pm.expect(nr.performance_details[0].attribute_name).to.equal(\"RESPONSETIME\");\n    });\n    pm.test(\"attribute_value\", function() {\n        pm.expect(nr.performance_details[0]).to.have.property(\"attribute_value\");\n    });\n    pm.test(\"attribute_value is not null\", function() {\n        pm.expect(nr.performance_details[0].attribute_value).to.not.be.null;\n    });\n} else {\n    pm.test(\"performance_details node is missing\", function() {\n        pm.expect(nr).to.have.property(\"performance_details\");\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\nif(responseBody.has(\"outage_details\"))\n{\n    if(response.data.summary_details.down_count === 0)\n    {tests[\"outage_details\"] = responseBody.has('outage_details\":[]');}\n    else\n    \n    {tests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    } \n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}\n\n//performance_details\n\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"attribute_name\"] = responseBody.has(\"attribute_name\") ;\n    tests[\"attribute_name RESPONSE\"] = response.data.performance_details[0].attribute_name === 'RESPONSETIME';\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n    tests[\"attribute_value is not null\"] =  response.data.performance_details[0].attribute_value !== null;\n\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Summary details validation\npm.test(\"summary_details validation\", function() {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"mttr\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\").and.to.not.be.null;\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\").and.to.not.be.null;\n    } else {\n        pm.expect(response).to.have.property(\"summary_details\");\n    }\n});\n\n// Info data validation\npm.test(\"info validation\", function() {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.expect(nr.info).to.have.property(\"resource_name\");\n        pm.expect(nr.info).to.have.property(\"end_time\");\n        pm.expect(nr.info.resource_type_name).to.equal('Monitor');\n        pm.expect(nr.info).to.have.property(\"report_name\");\n        pm.expect(nr.info).to.have.property(\"period_name\");\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n        pm.expect(nr.info).to.have.property(\"start_time\");\n        pm.expect(nr.info.resource_type).to.equal(2);\n        pm.expect(nr.info).to.have.property(\"period\");\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        pm.expect(nr.info).to.have.property(\"report_type\");\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n        if (nr.info.hasOwnProperty(\"resource_tags\")) {\n            pm.expect(nr.info).to.have.property(\"resource_tags\");\n        }\n    } else {\n        pm.expect(response).to.have.property(\"info\");\n    }\n});\n\n// Outage data validation\npm.test(\"outage_details validation\", function() {\n    if (nr.hasOwnProperty(\"outage_details\")) {\n        if (nr.summary_details.down_count === 0) {\n            pm.expect(nr.outage_details).to.be.an('array').that.is.empty;\n        } else {\n            pm.expect(nr.outage_details).to.be.an('array');\n            pm.expect(nr.outage_details[0]).to.have.property(\"monitor_id\");\n            if (nr.outage_details[0].hasOwnProperty(\"outages\")) {\n                var outages = nr.outage_details[0].outages[0];\n                pm.expect(outages).to.have.property(\"outage_id\").and.to.not.be.null;\n                pm.expect(outages).to.have.property(\"end_time\").and.to.not.be.null;\n                pm.expect(outages).to.have.property(\"type\").and.to.not.be.null;\n                pm.expect(outages).to.have.property(\"start_time\").and.to.not.be.null;\n                pm.expect(outages).to.have.property(\"duration\").and.to.not.be.null;\n            } else {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            }\n        }\n    } else {\n        pm.expect(response).to.have.property(\"outage_details\");\n    }\n});\n\n// Performance details validation\npm.test(\"performance_details validation\", function() {\n    if (nr.hasOwnProperty(\"performance_details\")) {\n        pm.expect(nr.performance_details[0]).to.have.property(\"attribute_name\");\n        pm.expect(nr.performance_details[0].attribute_name).to.equal('RESPONSETIME');\n        pm.expect(nr.performance_details[0]).to.have.property(\"attribute_value\");\n        pm.expect(nr.performance_details[0].attribute_value).to.not.be.null;\n    } else {\n        pm.expect(response).to.have.property(\"performance_details\");\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    \n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    if(responseBody.has(\"resource_tags\")){\n        tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n    }\n\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\nif(responseBody.has(\"outage_details\"))\n{\n    if(response.data.summary_details.down_count === 0)\n    {tests[\"outage_details\"] = responseBody.has('outage_details\":[]');}\n    else\n    \n    {tests[\"outages\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    } \n}\nelse\n{tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\") ;}\n\n//performance_details\n\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"attribute_name\"] = responseBody.has(\"attribute_name\") ;\n    tests[\"attribute_name RESPONSE\"] = response.data.performance_details[0].attribute_name === 'RESPONSETIME';\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n    tests[\"attribute_value is not null\"] =  response.data.performance_details[0].attribute_value !== null;\n\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Summary details validation\npm.test(\"summary_details validation\", function () {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        pm.test(\"down_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"down_count\").that.is.not.null;\n        });\n        pm.test(\"downtime_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"downtime_duration\").that.is.not.null;\n        });\n        pm.test(\"availability_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"availability_percentage\").that.is.not.null;\n        });\n        pm.test(\"mtbf\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"mtbf\").that.is.not.null;\n        });\n        pm.test(\"unmanaged_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\").that.is.not.null;\n        });\n        pm.test(\"alarm_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"alarm_count\").that.is.not.null;\n        });\n        pm.test(\"mttr\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"mttr\").that.is.not.null;\n        });\n        pm.test(\"maintenance_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\").that.is.not.null;\n        });\n        pm.test(\"maintenance_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\").that.is.not.null;\n        });\n        pm.test(\"availability_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"availability_duration\").that.is.not.null;\n        });\n        pm.test(\"unmanaged_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\").that.is.not.null;\n        });\n        pm.test(\"downtime_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\").that.is.not.null;\n        });\n    } else {\n        pm.test(\"summary_details is missing\", function () {\n            pm.expect(response).to.have.property(\"summary_details\");\n        });\n    }\n});\n\n// Info data validation\npm.test(\"info validation\", function () {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.test(\"resource_name\", function () {\n            pm.expect(nr.info).to.have.property(\"resource_name\");\n        });\n        pm.test(\"end_time\", function () {\n            pm.expect(nr.info).to.have.property(\"end_time\");\n        });\n        pm.test(\"resource_type_name\", function () {\n            pm.expect(nr.info.resource_type_name).to.eql('Monitor');\n        });\n        pm.test(\"report_name\", function () {\n            pm.expect(nr.info).to.have.property(\"report_name\");\n        });\n        pm.test(\"period_name\", function () {\n            pm.expect(nr.info).to.have.property(\"period_name\");\n        });\n        pm.test(\"formatted_start_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        });\n        pm.test(\"generated_time\", function () {\n            pm.expect(nr.info).to.have.property(\"generated_time\");\n        });\n        pm.test(\"formatted_end_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        });\n        pm.test(\"segment_type\", function () {\n            pm.expect(nr.info).to.have.property(\"segment_type\");\n        });\n        pm.test(\"start_time\", function () {\n            pm.expect(nr.info).to.have.property(\"start_time\");\n        });\n        pm.test(\"resource type\", function () {\n            pm.expect(nr.info.resource_type).to.eql(2);\n        });\n        pm.test(\"period\", function () {\n            pm.expect(nr.info).to.have.property(\"period\");\n        });\n        pm.test(\"formatted_generated_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        });\n        pm.test(\"report_type\", function () {\n            pm.expect(nr.info).to.have.property(\"report_type\");\n        });\n        pm.test(\"segment_type_name\", function () {\n            pm.expect(nr.info).to.have.property(\"segment_type_name\");\n        });\n        if (nr.info.hasOwnProperty(\"resource_tags\")) {\n            pm.test(\"resource_tags\", function () {\n                pm.expect(nr.info).to.have.property(\"resource_tags\");\n            });\n        }\n    } else {\n        pm.test(\"info is missing\", function () {\n            pm.expect(response).to.have.property(\"info\");\n        });\n    }\n});\n\n// Outage data validation\npm.test(\"outage_details validation\", function () {\n    if (nr.hasOwnProperty(\"outage_details\")) {\n        if (nr.summary_details.down_count === 0) {\n            pm.test(\"outage_details\", function () {\n                pm.expect(response).to.have.property('outage_details').that.is.an('array').that.is.empty;\n            });\n        } else {\n            pm.test(\"outages\", function () {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            });\n            pm.test(\"monitor_id\", function () {\n                pm.expect(nr.outage_details[0]).to.have.property(\"monitor_id\");\n            });\n            if (nr.outage_details[0].outages !== null) {\n                pm.test(\"outage_id\", function () {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\").that.is.not.null;\n                });\n                pm.test(\"end_time\", function () {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\").that.is.not.null;\n                });\n                pm.test(\"type\", function () {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\").that.is.not.null;\n                });\n                pm.test(\"start_time\", function () {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\").that.is.not.null;\n                });\n                pm.test(\"duration\", function () {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\").that.is.not.null;\n                });\n            } else {\n                pm.test(\"outages node is missing\", function () {\n                    pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n                });\n            }\n        }\n    } else {\n        pm.test(\"outage_details node is missing\", function () {\n            pm.expect(response).to.have.property(\"outage_details\");\n        });\n    }\n});\n\n// Performance details\npm.test(\"performance_details validation\", function () {\n    if (nr.hasOwnProperty(\"performance_details\")) {\n        pm.test(\"attribute_name\", function () {\n            pm.expect(nr.performance_details[0]).to.have.property(\"attribute_name\");\n        });\n        pm.test(\"attribute_name RESPONSE\", function () {\n            pm.expect(nr.performance_details[0].attribute_name).to.eql('RESPONSETIME');\n        });\n        pm.test(\"attribute_value\", function () {\n            pm.expect(nr.performance_details[0]).to.have.property(\"attribute_value\");\n        });\n        pm.test(\"attribute_value is not null\", function () {\n            pm.expect(nr.performance_details[0].attribute_value).to.not.be.null;\n        });\n    } else {\n        pm.test(\"performance_details node is missing\", function () {\n            pm.expect(response).to.have.property(\"performance_details\");\n        });\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n\n// Info data validation\nif(responseBody.has(\"trend\"))\n{\n    tests[\"trend\"] = responseBody.has(\"trend\");\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\");\n    tests[\"year\"] = responseBody.has(\"year\");\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\");\n    tests[\"down_count\"] = responseBody.has(\"down_count\");\n    tests[\"month\"] = responseBody.has(\"month\");\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n\n}\nelse\n{tests[\"trend is missing\"] = responseBody.has(\"trend\");}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Info data validation\npm.test(\"Info data validation\", function () {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.expect(nr.info).to.have.property(\"resource_type_name\", \"Monitor\");\n        pm.expect(nr.info).to.have.property(\"resource_type\", 2);\n    } else {\n        pm.expect(response).to.have.property(\"info\");\n    }\n});\n\n// Trend data validation\npm.test(\"Trend data validation\", function () {\n    if (nr.hasOwnProperty(\"trend\")) {\n        pm.expect(nr.trend).to.have.property(\"availability_percentage\");\n        pm.expect(nr.trend).to.have.property(\"year\");\n        pm.expect(nr.trend).to.have.property(\"alarm_count\");\n        pm.expect(nr.trend).to.have.property(\"down_count\");\n        pm.expect(nr.trend).to.have.property(\"month\");\n        pm.expect(nr.trend).to.have.property(\"attribute_value\");\n    } else {\n        pm.expect(response).to.have.property(\"trend\");\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n\n// Info data validation\nif(responseBody.has(\"trend\"))\n{\n    tests[\"trend\"] = responseBody.has(\"trend\");\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\");\n    tests[\"year\"] = responseBody.has(\"year\");\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\");\n    tests[\"down_count\"] = responseBody.has(\"down_count\");\n    tests[\"month\"] = responseBody.has(\"month\");\n\n}\nelse\n{tests[\"trend is missing\"] = responseBody.has(\"trend\");}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Info data validation\npm.test(\"Info data validation\", function () {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.expect(nr.info).to.have.property(\"resource_type_name\", \"Monitor\");\n        pm.expect(nr.info).to.have.property(\"resource_type\", 2);\n        \n        pm.expect(nr.info).to.have.property(\"resource_name\");\n        pm.expect(nr.info).to.have.property(\"end_time\");\n        pm.expect(nr.info).to.have.property(\"report_name\");\n        pm.expect(nr.info).to.have.property(\"period_name\");\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        pm.expect(nr.info).to.have.property(\"start_time\");\n        pm.expect(nr.info).to.have.property(\"period\");\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        pm.expect(nr.info).to.have.property(\"report_type\");\n    } else {\n        pm.expect(nr).to.have.property(\"info\");\n    }\n});\n\n// Trend data validation\npm.test(\"Trend data validation\", function () {\n    if (nr.hasOwnProperty(\"trend\")) {\n        pm.expect(nr.trend).to.have.property(\"availability_percentage\");\n        pm.expect(nr.trend).to.have.property(\"year\");\n        pm.expect(nr.trend).to.have.property(\"alarm_count\");\n        pm.expect(nr.trend).to.have.property(\"down_count\");\n        pm.expect(nr.trend).to.have.property(\"month\");\n    } else {\n        pm.expect(nr).to.have.property(\"trend\");\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n\n// Info data validation\nif(responseBody.has(\"trend\"))\n{\n    tests[\"trend\"] = responseBody.has(\"trend\");\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\");\n    tests[\"year\"] = responseBody.has(\"year\");\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\");\n    tests[\"down_count\"] = responseBody.has(\"down_count\");\n    tests[\"month\"] = responseBody.has(\"month\");\n    tests[\"attribute_valueattribute_value\"] = responseBody.has(\"attribute_value\");\n\n}\nelse\n{tests[\"trend is missing\"] = responseBody.has(\"trend\");}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\n\n// Info data validation\nif (nr.hasOwnProperty(\"info\") && nr.info !== null) {\n    let info = nr.info;\n\n    pm.test(\"resource_name is present\", function () {\n        pm.expect(info.resource_name).to.not.be.undefined;\n    });\n\n    pm.test(\"end_time is present\", function () {\n        pm.expect(info.end_time).to.not.be.undefined;\n    });\n\n    pm.test(\"resource_type_name is 'Monitor'\", function () {\n        pm.expect(info.resource_type_name).to.equal('Monitor');\n    });\n\n    pm.test(\"report_name is present\", function () {\n        pm.expect(info.report_name).to.not.be.undefined;\n    });\n\n    pm.test(\"period_name is present\", function () {\n        pm.expect(info.period_name).to.not.be.undefined;\n    });\n\n    pm.test(\"formatted_start_time is present\", function () {\n        pm.expect(info.formatted_start_time).to.not.be.undefined;\n    });\n\n    pm.test(\"generated_time is present\", function () {\n        pm.expect(info.generated_time).to.not.be.undefined;\n    });\n\n    pm.test(\"formatted_end_time is present\", function () {\n        pm.expect(info.formatted_end_time).to.not.be.undefined;\n    });\n\n    pm.test(\"start_time is present\", function () {\n        pm.expect(info.start_time).to.not.be.undefined;\n    });\n\n    pm.test(\"resource_type is 2\", function () {\n        pm.expect(info.resource_type).to.equal(2);\n    });\n\n    pm.test(\"period is present\", function () {\n        pm.expect(info.period).to.not.be.undefined;\n    });\n\n    pm.test(\"formatted_generated_time is present\", function () {\n        pm.expect(info.formatted_generated_time).to.not.be.undefined;\n    });\n\n    pm.test(\"report_type is present\", function () {\n        pm.expect(info.report_type).to.not.be.undefined;\n    });\n\n} else {\n    pm.test(\"info node is missing\", function () {\n        pm.expect.fail(\"Missing 'info' in response.data\");\n    });\n}\n\n// Trend data validation\nif (response.hasOwnProperty(\"trend\") && response.trend !== null) {\n    let trend = response.trend;\n\n    pm.test(\"trend is present\", function () {\n        pm.expect(trend).to.not.be.undefined;\n    });\n\n    pm.test(\"availability_percentage is present\", function () {\n        pm.expect(trend.availability_percentage).to.not.be.undefined;\n    });\n\n    pm.test(\"year is present\", function () {\n        pm.expect(trend.year).to.not.be.undefined;\n    });\n\n    pm.test(\"alarm_count is present\", function () {\n        pm.expect(trend.alarm_count).to.not.be.undefined;\n    });\n\n    pm.test(\"down_count is present\", function () {\n        pm.expect(trend.down_count).to.not.be.undefined;\n    });\n\n    pm.test(\"month is present\", function () {\n        pm.expect(trend.month).to.not.be.undefined;\n    });\n\n    pm.test(\"attribute_value is present\", function () {\n        pm.expect(trend.attribute_value).to.not.be.undefined;\n    });\n\n} else {\n    pm.test(\"trend node is missing\", function () {\n        pm.expect.fail(\"Missing 'trend' in response\");\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\ntests[\"info\"] = responseBody.has(\"info\") && responseData.data.info !== null;\nif(responseBody.has(\"info\"))\n{\n    tests[\"end_time\"] = responseData.data.info.end_time!== null;\n    tests['resource_type_name'] = responseData.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseData.data.info.report_name!== null;\n    tests[\"period_name\"] = responseData.data.info.period_name!== null;\n    tests[\"formatted_start_time\"] = responseData.data.info.formatted_start_time!== null;\n    tests[\"formatted_end_time\"] = responseData.data.info.formatted_end_time!== null;\n    tests[\"generated_time\"] = responseData.data.info.generated_time!== null;\n    tests[\"start_time\"] = responseData.data.info.start_time!== null;\n    tests[\"unit\"] = responseData.data.info.unit!== null;\n    tests[\"period\"] = responseData.data.info.period!== null;\n    tests[\"formatted_generated_time\"] = responseData.data.info.formatted_generated_time!== null;\n    tests[\"resource_id\"] = responseData.data.info.resource_id!== null;\n    tests['resource type'] = (responseData.data.info.resource_type===2);\n    tests[\"attribute_name\"] = responseData.data.info.attribute_name!== null;\n    tests[\"resource_type\"] = responseData.data.info.resource_type!== null;\n}\ntests[\"trend\"] = responseBody.has(\"trend\") && responseData.data.trend !== null;\nif(responseBody.has(\"trend\"))\n{\n    for(var j=0;j < responseData.data.trend.length; j++)\n    {\n        tests[\"trend_\"+j+\"_availability_percentage\"] = responseData.data.trend[j].availability_percentage!== null;\n        tests[\"trend_\"+j+\"_year\"] = responseData.data.trend[j].year!== null;\n        tests[\"trend_\"+j+\"_alarm_count\"] = responseData.data.trend[j].alarm_count!== null;\n        tests[\"trend_\"+j+\"_down_count\"] = responseData.data.trend[j].down_count!== null;\n        tests[\"trend_\"+j+\"_month\"] = responseData.data.trend[j].month!== null;\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\n\n// Info validation\npm.test(\"info node exists\", function () {\n    pm.expect(response.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n});\n\nif (nr.info) {\n    pm.test(\"end_time\", function () {\n        pm.expect(nr.info.end_time).to.not.be.null;\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info.resource_type_name).to.equal(\"Monitor\");\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.info.report_name).to.not.be.null;\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(nr.info.period_name).to.not.be.null;\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(nr.info.formatted_start_time).to.not.be.null;\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(nr.info.formatted_end_time).to.not.be.null;\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(nr.info.generated_time).to.not.be.null;\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(nr.info.start_time).to.not.be.null;\n    });\n    pm.test(\"unit\", function () {\n        pm.expect(nr.info.unit).to.not.be.null;\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.info.period).to.not.be.null;\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(nr.info.formatted_generated_time).to.not.be.null;\n    });\n    pm.test(\"resource_id\", function () {\n        pm.expect(nr.info.resource_id).to.not.be.null;\n    });\n    pm.test(\"resource type\", function () {\n        pm.expect(nr.info.resource_type).to.equal(2);\n    });\n    pm.test(\"attribute_name\", function () {\n        pm.expect(nr.info.attribute_name).to.not.be.null;\n    });\n    pm.test(\"resource_type\", function () {\n        pm.expect(nr.info.resource_type).to.not.be.null;\n    });\n}\n\n// Trend validation\npm.test(\"trend node exists\", function () {\n    pm.expect(response.hasOwnProperty(\"trend\") && nr.trend !== null).to.be.true;\n});\n\nif (Array.isArray(nr.trend)) {\n    for (let j = 0; j < nr.trend.length; j++) {\n        let trendItem = nr.trend[j];\n\n        pm.test(`trend_${j}_availability_percentage`, function () {\n            pm.expect(trendItem.availability_percentage).to.not.be.null;\n        });\n        pm.test(`trend_${j}_year`, function () {\n            pm.expect(trendItem.year).to.not.be.null;\n        });\n        pm.test(`trend_${j}_alarm_count`, function () {\n            pm.expect(trendItem.alarm_count).to.not.be.null;\n        });\n        pm.test(`trend_${j}_down_count`, function () {\n            pm.expect(trendItem.down_count).to.not.be.null;\n        });\n        pm.test(`trend_${j}_month`, function () {\n            pm.expect(trendItem.month).to.not.be.null;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setGlobalVariable(\"rbmmid\",postman.getGlobalVariable(\"getRBMMid\"));",
    "output": "pm.globals.set(\"rbmmid\", pm.globals.get(\"getRBMMid\"));"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n\n// Info data validation\nif(responseBody.has(\"trend\"))\n{\n    tests[\"trend\"] = responseBody.has(\"trend\");\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\");\n    tests[\"year\"] = responseBody.has(\"year\");\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\");\n    tests[\"down_count\"] = responseBody.has(\"down_count\");\n    tests[\"month\"] = responseBody.has(\"month\");\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n\n}\nelse\n{tests[\"trend is missing\"] = responseBody.has(\"trend\");}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\n\n// âœ… Info block validation\npm.test(\"info block exists\", function () {\n    pm.expect(nr.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n});\n\nif (nr.info) {\n    let info = nr.info;\n\n    pm.test(\"resource_name exists\", function () {\n        pm.expect(info.resource_name).to.not.be.undefined;\n    });\n    pm.test(\"end_time exists\", function () {\n        pm.expect(info.end_time).to.not.be.undefined;\n    });\n    pm.test(\"resource_type_name is 'Monitor'\", function () {\n        pm.expect(info.resource_type_name).to.equal('Monitor');\n    });\n    pm.test(\"report_name exists\", function () {\n        pm.expect(info.report_name).to.not.be.undefined;\n    });\n    pm.test(\"period_name exists\", function () {\n        pm.expect(info.period_name).to.not.be.undefined;\n    });\n    pm.test(\"formatted_start_time exists\", function () {\n        pm.expect(info.formatted_start_time).to.not.be.undefined;\n    });\n    pm.test(\"generated_time exists\", function () {\n        pm.expect(info.generated_time).to.not.be.undefined;\n    });\n    pm.test(\"formatted_end_time exists\", function () {\n        pm.expect(info.formatted_end_time).to.not.be.undefined;\n    });\n    pm.test(\"start_time exists\", function () {\n        pm.expect(info.start_time).to.not.be.undefined;\n    });\n    pm.test(\"resource_type is 2\", function () {\n        pm.expect(info.resource_type).to.equal(2);\n    });\n    pm.test(\"period exists\", function () {\n        pm.expect(info.period).to.not.be.undefined;\n    });\n    pm.test(\"formatted_generated_time exists\", function () {\n        pm.expect(info.formatted_generated_time).to.not.be.undefined;\n    });\n    pm.test(\"report_type exists\", function () {\n        pm.expect(info.report_type).to.not.be.undefined;\n    });\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect.fail(\"Expected 'info' to exist in response.data\");\n    });\n}\n\n// âœ… Trend block validation\npm.test(\"trend block exists\", function () {\n    pm.expect(nr.hasOwnProperty(\"trend\") && nr.trend !== null).to.be.true;\n});\n\nif (Array.isArray(nr.trend)) {\n    for (let i = 0; i < nr.trend.length; i++) {\n        let item = nr.trend[i];\n\n        pm.test(`trend[${i}].availability_percentage exists`, function () {\n            pm.expect(item.availability_percentage).to.not.be.undefined;\n        });\n        pm.test(`trend[${i}].year exists`, function () {\n            pm.expect(item.year).to.not.be.undefined;\n        });\n        pm.test(`trend[${i}].alarm_count exists`, function () {\n            pm.expect(item.alarm_count).to.not.be.undefined;\n        });\n        pm.test(`trend[${i}].down_count exists`, function () {\n            pm.expect(item.down_count).to.not.be.undefined;\n        });\n        pm.test(`trend[${i}].month exists`, function () {\n            pm.expect(item.month).to.not.be.undefined;\n        });\n        pm.test(`trend[${i}].attribute_value exists`, function () {\n            pm.expect(item.attribute_value).to.not.be.undefined;\n        });\n    }\n} else {\n    pm.test(\"trend block is not an array or is missing\", function () {\n        pm.expect.fail(\"Expected 'trend' to be an array in response.data\");\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n\n// Info data validation\nif(responseBody.has(\"trend\"))\n{\n    tests[\"trend\"] = responseBody.has(\"trend\");\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\");\n    tests[\"year\"] = responseBody.has(\"year\");\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\");\n    tests[\"down_count\"] = responseBody.has(\"down_count\");\n    tests[\"month\"] = responseBody.has(\"month\");\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n\n}\nelse\n{tests[\"trend is missing\"] = responseBody.has(\"trend\");}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\npm.test(\"Info data validation\", function() {\n    pm.expect(nr).to.have.property(\"info\");\n    pm.expect(nr.info).to.have.property(\"resource_type_name\");\n    pm.expect(nr.info.resource_type_name).to.equal(\"Monitor\");\n    pm.expect(nr.info).to.have.property(\"resource_type\");\n    pm.expect(nr.info.resource_type).to.equal(2);\n});\n\npm.test(\"Trend data validation\", function() {\n    pm.expect(nr).to.have.property(\"trend\");\n    pm.expect(nr.trend).to.be.an(\"array\").that.is.not.empty;\n    let t = nr.trend[0];\n    pm.expect(t).to.have.property(\"availability_percentage\");\n    pm.expect(t).to.have.property(\"year\");\n    pm.expect(t).to.have.property(\"alarm_count\");\n    pm.expect(t).to.have.property(\"down_count\");\n    pm.expect(t).to.have.property(\"month\");\n    pm.expect(t).to.have.property(\"attribute_value\");\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n\n// Info data validation\nif(responseBody.has(\"trend\"))\n{\n    tests[\"trend\"] = responseBody.has(\"trend\");\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\");\n    tests[\"year\"] = responseBody.has(\"year\");\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\");\n    tests[\"down_count\"] = responseBody.has(\"down_count\");\n    tests[\"month\"] = responseBody.has(\"month\");\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n\n}\nelse\n{tests[\"trend is missing\"] = responseBody.has(\"trend\");}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\n\npm.test(\"Info data validation\", function() {\n    pm.expect(nr).to.have.property(\"info\");\n\n    const info = nr.info;\n    pm.expect(info).to.have.property(\"resource_name\");\n    pm.expect(info).to.have.property(\"end_time\");\n    pm.expect(info).to.have.property(\"resource_type_name\");\n    pm.expect(info.resource_type_name).to.equal(\"Monitor\");\n    pm.expect(info).to.have.property(\"report_name\");\n    pm.expect(info).to.have.property(\"period_name\");\n    pm.expect(info).to.have.property(\"formatted_start_time\");\n    pm.expect(info).to.have.property(\"generated_time\");\n    pm.expect(info).to.have.property(\"formatted_end_time\");\n    pm.expect(info).to.have.property(\"start_time\");\n    pm.expect(info).to.have.property(\"resource_type\");\n    pm.expect(info.resource_type).to.equal(2);\n    pm.expect(info).to.have.property(\"period\");\n    pm.expect(info).to.have.property(\"formatted_generated_time\");\n    pm.expect(info).to.have.property(\"report_type\");\n});\n\npm.test(\"Trend data validation\", function() {\n    pm.expect(nr).to.have.property(\"trend\");\n    pm.expect(nr.trend).to.be.an(\"array\").that.is.not.empty;\n\n    const trendItem = nr.trend[0]; // Check first item only for now\n    pm.expect(trendItem).to.have.property(\"availability_percentage\");\n    pm.expect(trendItem).to.have.property(\"year\");\n    pm.expect(trendItem).to.have.property(\"alarm_count\");\n    pm.expect(trendItem).to.have.property(\"down_count\");\n    pm.expect(trendItem).to.have.property(\"month\");\n    pm.expect(trendItem).to.have.property(\"attribute_value\");\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n\n// Info data validation\nif(responseBody.has(\"trend\"))\n{\n    tests[\"trend\"] = responseBody.has(\"trend\");\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\");\n    tests[\"year\"] = responseBody.has(\"year\");\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\");\n    tests[\"down_count\"] = responseBody.has(\"down_count\");\n    tests[\"month\"] = responseBody.has(\"month\");\n   // tests[\"attribute_value\"] = responseBody.has(\"attribute_value\"); issue fixed by Rajesh means will uncomment this node.\n\n}\nelse\n{tests[\"trend is missing\"] = responseBody.has(\"trend\");}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\nvar response = pm.response.json();\nvar nr = response.data || {};\npm.test(\"Info data validation\", function () {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.test(\"resource_name\", function () {\n            pm.expect(nr.info).to.have.property(\"resource_name\");\n        });\n        pm.test(\"end_time\", function () {\n            pm.expect(nr.info).to.have.property(\"end_time\");\n        });\n        pm.test(\"resource_type_name\", function () {\n            pm.expect(nr.info.resource_type_name).to.equal(\"Monitor\");\n        });\n        pm.test(\"report_name\", function () {\n            pm.expect(nr.info).to.have.property(\"report_name\");\n        });\n        pm.test(\"period_name\", function () {\n            pm.expect(nr.info).to.have.property(\"period_name\");\n        });\n        pm.test(\"formatted_start_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        });\n        pm.test(\"generated_time\", function () {\n            pm.expect(nr.info).to.have.property(\"generated_time\");\n        });\n        pm.test(\"formatted_end_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        });\n        pm.test(\"start_time\", function () {\n            pm.expect(nr.info).to.have.property(\"start_time\");\n        });\n        pm.test(\"resource type\", function () {\n            pm.expect(nr.info.resource_type).to.equal(2);\n        });\n        pm.test(\"period\", function () {\n            pm.expect(nr.info).to.have.property(\"period\");\n        });\n        pm.test(\"formatted_generated_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        });\n        pm.test(\"report_type\", function () {\n            pm.expect(nr.info).to.have.property(\"report_type\");\n        });\n    } else {\n        pm.test(\"info is missing\", function () {\n            pm.expect(nr).to.have.property(\"info\");\n        });\n    }\n});\n\npm.test(\"Trend data validation\", function () {\n    if (nr.hasOwnProperty(\"trend\") && Array.isArray(nr.trend) && nr.trend.length > 0) {\n        let trendItem = nr.trend[0];\n        pm.expect(trendItem).to.have.property(\"availability_percentage\");\n        pm.expect(trendItem).to.have.property(\"year\");\n        pm.expect(trendItem).to.have.property(\"alarm_count\");\n        pm.expect(trendItem).to.have.property(\"down_count\");\n        pm.expect(trendItem).to.have.property(\"month\");\n    } else {\n        pm.test(\"trend is missing or empty\", function () {\n            pm.expect(nr).to.have.property(\"trend\");\n        });\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n\n// Info data validation\nif(responseBody.has(\"trend\"))\n{\n    tests[\"trend\"] = responseBody.has(\"trend\");\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\");\n    tests[\"year\"] = responseBody.has(\"year\");\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\");\n    tests[\"down_count\"] = responseBody.has(\"down_count\");\n    tests[\"month\"] = responseBody.has(\"month\");\n   // tests[\"attribute_value\"] = responseBody.has(\"attribute_value\"); issue fixed by Rajesh means will uncomment this node.\n\n}\nelse\n{tests[\"trend is missing\"] = responseBody.has(\"trend\");}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Info data validation\", function() {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.expect(nr.info).to.have.property(\"resource_type_name\", \"Monitor\");\n        pm.expect(nr.info).to.have.property(\"resource_type\", 2);\n        \n        pm.expect(response).to.have.property(\"resource_name\");\n        pm.expect(response).to.have.property(\"end_time\");\n        pm.expect(response).to.have.property(\"report_name\");\n        pm.expect(response).to.have.property(\"period_name\");\n        pm.expect(response).to.have.property(\"formatted_start_time\");\n        pm.expect(response).to.have.property(\"generated_time\");\n        pm.expect(response).to.have.property(\"formatted_end_time\");\n        pm.expect(response).to.have.property(\"start_time\");\n        pm.expect(response).to.have.property(\"period\");\n        pm.expect(response).to.have.property(\"formatted_generated_time\");\n        pm.expect(response).to.have.property(\"report_type\");\n    } else {\n        pm.test(\"info is missing\", function() {\n            pm.expect(response).to.have.property(\"info\");\n        });\n    }\n});\n\npm.test(\"Trend data validation\", function() {\n    if (nr.hasOwnProperty(\"trend\")) {\n        pm.expect(response).to.have.property(\"trend\");\n        pm.expect(response).to.have.property(\"availability_percentage\");\n        pm.expect(response).to.have.property(\"year\");\n        pm.expect(response).to.have.property(\"alarm_count\");\n        pm.expect(response).to.have.property(\"down_count\");\n        pm.expect(response).to.have.property(\"month\");\n        // pm.expect(response).to.have.property(\"attribute_value\"); issue fixed by Rajesh means will uncomment this node.\n    } else {\n        pm.test(\"trend is missing\", function() {\n            pm.expect(response).to.have.property(\"trend\");\n        });\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n\n// Info data validation\nif(responseBody.has(\"trend\"))\n{\n    tests[\"trend\"] = responseBody.has(\"trend\");\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\");\n    tests[\"year\"] = responseBody.has(\"year\");\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\");\n    tests[\"down_count\"] = responseBody.has(\"down_count\");\n    tests[\"month\"] = responseBody.has(\"month\");\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n\n}\nelse\n{tests[\"trend is missing\"] = responseBody.has(\"trend\");}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Info data validation\nif(nr.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function() {\n        pm.expect(response.hasOwnProperty(\"resource_name\")).to.be.true;\n    });\n\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n\n    pm.test(\"resource_type_name\", function() {\n        pm.expect(nr.info.resource_type_name).to.equal('Monitor');\n    });\n\n    pm.test(\"report_name\", function() {\n        pm.expect(response.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n\n    pm.test(\"period_name\", function() {\n        pm.expect(response.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n\n    pm.test(\"resource type\", function() {\n        pm.expect(nr.info.resource_type).to.equal(2);\n    });\n\n    pm.test(\"period\", function() {\n        pm.expect(response.hasOwnProperty(\"period\")).to.be.true;\n    });\n\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n\n    pm.test(\"report_type\", function() {\n        pm.expect(response.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n\n} else {\n    pm.test(\"info is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\n// Trend data validation\nif(nr.hasOwnProperty(\"trend\")) {\n    pm.test(\"trend\", function() {\n        pm.expect(response.hasOwnProperty(\"trend\")).to.be.true;\n    });\n\n    pm.test(\"availability_percentage\", function() {\n        pm.expect(response.hasOwnProperty(\"availability_percentage\")).to.be.true;\n    });\n\n    pm.test(\"year\", function() {\n        pm.expect(response.hasOwnProperty(\"year\")).to.be.true;\n    });\n\n    pm.test(\"alarm_count\", function() {\n        pm.expect(response.hasOwnProperty(\"alarm_count\")).to.be.true;\n    });\n\n    pm.test(\"down_count\", function() {\n        pm.expect(response.hasOwnProperty(\"down_count\")).to.be.true;\n    });\n\n    pm.test(\"month\", function() {\n        pm.expect(response.hasOwnProperty(\"month\")).to.be.true;\n    });\n\n    pm.test(\"attribute_value\", function() {\n        pm.expect(response.hasOwnProperty(\"attribute_value\")).to.be.true;\n    });\n\n} else {\n    pm.test(\"trend is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"trend\")).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"unit\"] = responseBody.has(\"unit\");\n  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n\n// Info data validation\nif(responseBody.has(\"trend\"))\n{\n    tests[\"trend\"] = responseBody.has(\"trend\");\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\");\n    tests[\"year\"] = responseBody.has(\"year\");\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\");\n    tests[\"down_count\"] = responseBody.has(\"down_count\");\n    tests[\"month\"] = responseBody.has(\"month\");\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n\n}\nelse\n{tests[\"trend is missing\"] = responseBody.has(\"trend\");}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Info data validation\npm.test(\"Info data validation\", function () {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.expect(nr.info).to.have.property(\"resource_type_name\", \"Monitor\");\n        pm.expect(nr.info).to.have.property(\"resource_type\", 2);\n    } else {\n        pm.expect(nr).to.have.property(\"info\");\n    }\n});\n\n// Additional validations\npm.test(\"Additional validations\", function () {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.expect(response).to.have.property(\"resource_name\");\n        pm.expect(response).to.have.property(\"end_time\");\n        pm.expect(response).to.have.property(\"report_name\");\n        pm.expect(response).to.have.property(\"period_name\");\n        pm.expect(response).to.have.property(\"formatted_start_time\");\n        pm.expect(response).to.have.property(\"generated_time\");\n        pm.expect(response).to.have.property(\"formatted_end_time\");\n        pm.expect(response).to.have.property(\"start_time\");\n        pm.expect(response).to.have.property(\"period\");\n        pm.expect(response).to.have.property(\"formatted_generated_time\");\n        pm.expect(response).to.have.property(\"report_type\");\n        pm.expect(response).to.have.property(\"unit\");\n    } else {\n        pm.expect(nr).to.have.property(\"info\");\n    }\n});\n\n// Trend data validation\npm.test(\"Trend data validation\", function () {\n    if (response.hasOwnProperty(\"trend\")) {\n        pm.expect(response).to.have.property(\"trend\");\n        pm.expect(response).to.have.property(\"availability_percentage\");\n        pm.expect(response).to.have.property(\"year\");\n        pm.expect(response).to.have.property(\"alarm_count\");\n        pm.expect(response).to.have.property(\"down_count\");\n        pm.expect(response).to.have.property(\"month\");\n        pm.expect(response).to.have.property(\"attribute_value\");\n    } else {\n        pm.expect(response).to.have.property(\"trend\");\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"unit\"] = responseBody.has(\"unit\");\n  \n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n\n// Info data validation\nif(responseBody.has(\"trend\"))\n{\n    tests[\"trend\"] = responseBody.has(\"trend\");\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\");\n    tests[\"year\"] = responseBody.has(\"year\");\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\");\n    tests[\"down_count\"] = responseBody.has(\"down_count\");\n    tests[\"month\"] = responseBody.has(\"month\");\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n\n}\nelse\n{tests[\"trend is missing\"] = responseBody.has(\"trend\");}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Info data validation\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function () {\n        pm.expect(response.hasOwnProperty(\"resource_name\")).to.be.true;\n    });\n    pm.test(\"end_time\", function () {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info.resource_type_name).to.eql('Monitor');\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(response.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(response.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"resource type\", function () {\n        pm.expect(nr.info.resource_type).to.eql(2);\n    });\n    pm.test(\"period\", function () {\n        pm.expect(response.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function () {\n        pm.expect(response.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n    pm.test(\"unit\", function () {\n        pm.expect(response.hasOwnProperty(\"unit\")).to.be.true;\n    });\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.false;\n    });\n}\n\n// Trend data validation\nif (response.hasOwnProperty(\"trend\")) {\n    pm.test(\"trend\", function () {\n        pm.expect(response.hasOwnProperty(\"trend\")).to.be.true;\n    });\n    pm.test(\"availability_percentage\", function () {\n        pm.expect(response.hasOwnProperty(\"availability_percentage\")).to.be.true;\n    });\n    pm.test(\"year\", function () {\n        pm.expect(response.hasOwnProperty(\"year\")).to.be.true;\n    });\n    pm.test(\"alarm_count\", function () {\n        pm.expect(response.hasOwnProperty(\"alarm_count\")).to.be.true;\n    });\n    pm.test(\"down_count\", function () {\n        pm.expect(response.hasOwnProperty(\"down_count\")).to.be.true;\n    });\n    pm.test(\"month\", function () {\n        pm.expect(response.hasOwnProperty(\"month\")).to.be.true;\n    });\n    pm.test(\"attribute_value\", function () {\n        pm.expect(response.hasOwnProperty(\"attribute_value\")).to.be.true;\n    });\n} else {\n    pm.test(\"trend is missing\", function () {\n        pm.expect(response.hasOwnProperty(\"trend\")).to.be.false;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\n/*\nif(jsonData.data.trouble_required!==null)\n{\n    postman.setEnvironmentVariable(\"trouble_required\",jsonData.data.trouble_required);\n}\nif(jsonData.data.critical_required!==null)\n{\n    postman.setEnvironmentVariable(\"critical_required\",jsonData.data.critical_required);\n}\nif(jsonData.data.maintenance_required!==null)\n{\n    postman.setEnvironmentVariable(\"maintenance_required\",jsonData.data.maintenance_required);\n} */\n   postman.setEnvironmentVariable(\"trouble_required\",true);\n\n    postman.setEnvironmentVariable(\"critical_required\",true);\n\n    postman.setEnvironmentVariable(\"maintenance_required\",true);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\nif (nr.hasOwnProperty('trouble_required') && nr.trouble_required !== null) {\n    pm.environment.set(\"trouble_required\", nr.trouble_required);\n}\nif (nr.hasOwnProperty('critical_required') && nr.critical_required !== null) {\n    pm.environment.set(\"critical_required\", nr.critical_required);\n}\nif (nr.hasOwnProperty('maintenance_required') && nr.maintenance_required !== null) {\n    pm.environment.set(\"maintenance_required\", nr.maintenance_required);\n}\n\npm.environment.set(\"trouble_required\", true);\npm.environment.set(\"critical_required\", true);\npm.environment.set(\"maintenance_required\", true);\n\npm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nvar monitorList = responseData.data.monitors;\n// Update the 1st URL monitor which is not down\nfor(var i in monitorList)\n{\n    var monitor = monitorList[i];\n    if(monitor.monitor_type=='URL' && monitor.status !==0 && monitor.status !==5)\n    {\n        pm.environment.set(\"monitor_id\", monitor.monitor_id);\n        pm.environment.set(\"MONTYPE\",\"URL\");\n        break;   \n    }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar monitorList = nr.monitors;\n\nfor (var i = 0; i < monitorList.length; i++) {\n    var monitor = monitorList[i];\n    if (monitor.monitor_type === 'URL' && monitor.status !== 0 && monitor.status !== 5) {\n        pm.environment.set(\"monitor_id\", monitor.monitor_id);\n        pm.environment.set(\"MONTYPE\", \"URL\");\n        break;\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n// Update the 1st Server monitor to the environment list\npm.environment.set(\"child_id\", response.data.monitors[0].child_id);\npm.environment.set(\"parent_id\", response.data.monitors[0].monitor_id);\npm.environment.set(\"child_process\",\"SERVER_PROCESS\");",
    "output": "pm.test(\"response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\nif (nr.monitors && nr.monitors.length > 0) {\n    pm.environment.set(\"child_id\", nr.monitors[0].child_id);\n    pm.environment.set(\"parent_id\", nr.monitors[0].monitor_id);\n    pm.environment.set(\"child_process\", \"SERVER_PROCESS\");\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nvar tagList = responseData.data;\n// Update the 1st Tag with tag_type=1\nfor(var i in tagList)\n{\n    var tag = tagList[i];\n    if(tag.type===1)\n    {\n        pm.environment.set(\"tag_id\", tag.id);\n        break;\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\nfor (var i in nr) {\n    var tag = nr[i];\n    if (tag.type === 1) {\n        pm.environment.set(\"tag_id\", tag.id);\n        break;\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nvar monitorGroupsList = responseData.data;\n// Update the 1st monitorGroup with some error_monitors\nfor(var i in monitorGroupsList)\n{\n    var group = monitorGroupsList[i];\n    if(group.error_monitors>0)\n    {\n        pm.environment.set(\"group_id\", group.group_id);\n        break;\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar monitorGroupsList = response.data || {};\n\n// Update the 1st monitorGroup with some error_monitors\nfor (var i = 0; i < monitorGroupsList.length; i++) {\n    var group = monitorGroupsList[i];\n    if (group.error_monitors > 0) {\n        pm.environment.set(\"group_id\", group.group_id);\n        break;\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar responseData = JSON.parse(responseBody);\nvar monitorGroupsList = responseData.data;\n// Update the 1st monitorGroup with some error_monitors\nfor(var i in monitorGroupsList)\n{\n    var group = monitorGroupsList[i];\n    if(group.error_monitors>0)\n    {\n        pm.environment.set(\"sub_group_id\", group.group_id);\n        break;\n    }\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar monitorGroupsList = response.data || {};\n\n// Update the 1st monitorGroup with some error_monitors\nfor (var i in monitorGroupsList) {\n    var group = monitorGroupsList[i];\n    if (group.error_monitors > 0) {\n        pm.environment.set(\"sub_group_id\", group.group_id);\n        break;\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\nvar critical_count=0;\nvar trouble_count=0;\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\n\ntests[\"availability_details\"] = responseBody.has(\"availability_details\") && (responseBody.availability_details !== null);\n\n//Summary deatails validation\nif (responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    if(critical_required)\n    {\n        tests[\"critical_percentage\"]=responseBody.has(\"critical_percentage\") && (responseBody.critical_percentage!==null);\n        tests[\"critical_count\"]=responseBody.has(\"critical_count\") && (responseBody.critical_count!==null);\n        tests[\"critical_duration\"]=responseBody.has(\"critical_duration\") && (responseBody.critical_duration!==null);\n\n    }\n    if(trouble_required)\n    {\n        tests[\"trouble_percentage\"]=responseBody.has(\"trouble_percentage\") && (responseBody.trouble_percentage!==null);\n        tests[\"trouble_count\"]=responseBody.has(\"trouble_count\") && (responseBody.trouble_count!==null);\n        tests[\"trouble_duration\"]=responseBody.has(\"trouble_duration\") && (responseBody.trouble_duration!==null);\n\n    }\n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n//Chart data validation\nif(responseBody.has(\"charts\"))\n{   \n    tests[\"name\"] = responseBody.has(\"name\");\n    tests[\"key\"] = responseBody.has(\"key\");\n    tests[\"data\"] = responseBody.has('data\":[[');\n    tests[\"charts\"] = responseBody.has(\"charts\");\n    // Perfect approach would be to iterate over charts data and check appropriate position of nodes for Critical and Trouble data point check.\n   //TODO\n}\nelse\n{tests[\"charts node is missing\"] = responseBody.has(\"charts\");}\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"resource_type_name\"] = responseBody.has(\"resource_type_name\");\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"resource_type\"] = responseBody.has(\"resource_type\");\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\n\nif(responseBody.has(\"outage_details\") && response.data.outage_details.length>0)\n{\n    if(response.data.summary_details.alarm_count > 0)\n    {tests[\"outages are present\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    }\n    \n    if(critical_required)\n    {\n        critical_count=response.data.summary_details.critical_count;\n    }    \n    \n    if(trouble_required)\n    {\n        trouble_count = response.data.summary_details.trouble_count;\n    }\n    \n    if(trouble_count>=0 && critical_count>=0)\n    {\n        var totalCount = response.data.summary_details.down_count+critical_count+trouble_count;\n        var outages_count=0;\n        for(var i=0;i<+response.data.outage_details.length;i++)\n        {\n            outages_count+=response.data.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\"+totalCount+\"::outages length=\"+outages_count);\n        var result= (totalCount==outages_count);\n        tests[\"Outages count matches critical and Trouble option\"] = result ;\n    }\n       \n}\nelse\n{\n    if(response.data.summary_details.alarm_count>0)\n    {\n    tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\");\n    }\n    // Else if there is no outage then empty Outage tab is perfectly fine.\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar critical_count = 0;\nvar trouble_count = 0;\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\npm.test(\"availability_details\", function () {\n    pm.expect(nr).to.have.property(\"availability_details\");\n});\n\nif (nr.hasOwnProperty(\"summary_details\")) {\n    pm.test(\"down_count\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\");\n    });\n    pm.test(\"downtime_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\");\n    });\n    pm.test(\"availability_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\");\n    });\n    pm.test(\"mtbf\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\");\n    });\n    pm.test(\"unmanaged_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\");\n    });\n    pm.test(\"alarm_count\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\");\n    });\n    pm.test(\"mttr\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"mttr\");\n    });\n    pm.test(\"maintenance_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\");\n    });\n    pm.test(\"maintenance_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\");\n    });\n    pm.test(\"availability_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\");\n    });\n    pm.test(\"unmanaged_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\");\n    });\n    pm.test(\"downtime_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\");\n    });\n    if (critical_required) {\n        pm.test(\"critical_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_percentage\");\n        });\n        pm.test(\"critical_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_count\");\n        });\n        pm.test(\"critical_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_duration\");\n        });\n    }\n    if (trouble_required) {\n        pm.test(\"trouble_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_percentage\");\n        });\n        pm.test(\"trouble_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_count\");\n        });\n        pm.test(\"trouble_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_duration\");\n        });\n    }\n} else {\n    pm.test(\"summary_details is missing\", function () {\n        pm.expect(nr).to.have.property(\"summary_details\");\n    });\n}\n\nif (nr.hasOwnProperty(\"charts\")) {\n    pm.test(\"charts\", function () {\n        pm.expect(nr).to.have.property(\"charts\");\n    });\n    // TODO: Iterate over charts data and check appropriate positions for Critical and Trouble data points.\n} else {\n    pm.test(\"charts node is missing\", function () {\n        pm.expect(nr).to.have.property(\"charts\");\n    });\n}\n\nif (nr.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_name\");\n    });\n    pm.test(\"end_time\", function () {\n        pm.expect(nr.info).to.have.property(\"end_time\");\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_type_name\");\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.info).to.have.property(\"report_name\");\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(nr.info).to.have.property(\"period_name\");\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n    });\n    pm.test(\"segment_type\", function () {\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(nr.info).to.have.property(\"start_time\");\n    });\n    pm.test(\"resource_type\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_type\");\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.info).to.have.property(\"period\");\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n    });\n    pm.test(\"report_type\", function () {\n        pm.expect(nr.info).to.have.property(\"report_type\");\n    });\n    pm.test(\"segment_type_name\", function () {\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n    });\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect(nr).to.have.property(\"info\");\n    });\n}\n\nif (nr.hasOwnProperty(\"outage_details\") && nr.outage_details.length > 0) {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outages are present\", function () {\n            pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n        });\n        pm.test(\"monitor_id\", function () {\n            pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"monitor_id\");\n        });\n        if (nr.outage_details[0].outages !== null) {\n            pm.test(\"outage_id\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\");\n            });\n            pm.test(\"end_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\");\n            });\n            pm.test(\"type\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\");\n            });\n            pm.test(\"start_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\");\n            });\n            pm.test(\"duration\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\");\n            });\n        } else {\n            pm.test(\"outages node is missing\", function () {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            });\n        }\n    }\n\n    if (critical_required) {\n        critical_count = nr.summary_details.critical_count;\n    }\n\n    if (trouble_required) {\n        trouble_count = nr.summary_details.trouble_count;\n    }\n\n    if (trouble_count >= 0 && critical_count >= 0) {\n        var totalCount = nr.summary_details.down_count + critical_count + trouble_count;\n        var outages_count = 0;\n        for (var i = 0; i < nr.outage_details.length; i++) {\n            outages_count += nr.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\" + totalCount + \"::outages length=\" + outages_count);\n        var result = totalCount === outages_count;\n        pm.test(\"Outages count matches critical and Trouble option\", function () {\n            pm.expect(result).to.be.true;\n        });\n    }\n\n} else {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outage_details node is missing\", function () {\n            pm.expect(nr).to.have.property(\"outage_details\");\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\nvar critical_count=0;\nvar trouble_count=0;\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\n\ntests[\"availability_details\"] = responseBody.has(\"availability_details\") && (responseBody.availability_details !== null);\n\n//Summary deatails validation\nif (responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    if(critical_required)\n    {\n        tests[\"critical_percentage\"]=responseBody.has(\"critical_percentage\") && (responseBody.critical_percentage!==null);\n        tests[\"critical_count\"]=responseBody.has(\"critical_count\") && (responseBody.critical_count!==null);\n        tests[\"critical_duration\"]=responseBody.has(\"critical_duration\") && (responseBody.critical_duration!==null);\n\n    }\n    if(trouble_required)\n    {\n        tests[\"trouble_percentage\"]=responseBody.has(\"trouble_percentage\") && (responseBody.trouble_percentage!==null);\n        tests[\"trouble_count\"]=responseBody.has(\"trouble_count\") && (responseBody.trouble_count!==null);\n        tests[\"trouble_duration\"]=responseBody.has(\"trouble_duration\") && (responseBody.trouble_duration!==null);\n\n    }\n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n//Chart data validation\nif(responseBody.has(\"charts\"))\n{   \n    tests[\"name\"] = responseBody.has(\"name\");\n    tests[\"key\"] = responseBody.has(\"key\");\n    tests[\"data\"] = responseBody.has('data\":[[');\n    tests[\"charts\"] = responseBody.has(\"charts\");\n    // Perfect approach would be to iterate over charts data and check appropriate position of nodes for Critical and Trouble data point check.\n   //TODO\n}\nelse\n{tests[\"charts node is missing\"] = responseBody.has(\"charts\");}\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"resource_type_name\"] = responseBody.has(\"resource_type_name\");\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"resource_type\"] = responseBody.has(\"resource_type\");\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\n\nif(responseBody.has(\"outage_details\") && response.data.outage_details.length>0)\n{\n    if(response.data.summary_details.alarm_count > 0)\n    {tests[\"outages are present\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    }\n    \n    if(critical_required)\n    {\n        critical_count=response.data.summary_details.critical_count;\n    }    \n    \n    if(trouble_required)\n    {\n        trouble_count = response.data.summary_details.trouble_count;\n    }\n    \n    if(trouble_count>=0 && critical_count>=0)\n    {\n        var totalCount = response.data.summary_details.down_count+critical_count+trouble_count;\n        var outages_count=0;\n        for(var i=0;i<+response.data.outage_details.length;i++)\n        {\n            outages_count+=response.data.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\"+totalCount+\"::outages length=\"+outages_count);\n        var result= (totalCount==outages_count);\n        tests[\"Outages count matches critical and Trouble option\"] = result ;\n    }\n       \n}\nelse\n{\n    if(response.data.summary_details.alarm_count>0)\n    {\n    tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\");\n    }\n    // Else if there is no outage then empty Outage tab is perfectly fine.\n}\n\n// PRofile details\n\nif(responseBody.has(\"profile_details\"))\n{\n    tests[\"profile_details\"] = responseBody.has('profile_details\":{');\n    tests[\"threshold_profiles\"] = responseBody.has('threshold_profiles\":[') && response.data.profile_details.threshold_profiles !== null;\n    tests[\"threshold_profile_details\"] = responseBody.has('threshold_profile_details\":[{');\n    tests[\"threshold_profile_details\"] = responseBody.has('threshold_profile_details\":[') && response.data.profile_details.threshold_profile_details !== null;\n    tests[\"location_profiles\"] = responseBody.has('location_profiles\":[{');\n    tests[\"location_profiles\"] = responseBody.has('location_profiles\":[') && response.data.profile_details.location_profiles !== null;\n\n}\nelse\n{tests[\"profile_details node is missing\"] = responseBody.has(\"profile_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar critical_count = 0;\nvar trouble_count = 0;\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\npm.test(\"availability_details\", function () {\n    pm.expect(nr).to.have.property(\"availability_details\");\n});\n\n// Summary details validation\nif (nr.hasOwnProperty(\"summary_details\")) {\n    pm.test(\"down_count\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\");\n    });\n    pm.test(\"downtime_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\");\n    });\n    pm.test(\"availability_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\");\n    });\n    pm.test(\"mtbf\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\");\n    });\n    pm.test(\"unmanaged_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\");\n    });\n    pm.test(\"alarm_count\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\");\n    });\n    pm.test(\"mttr\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"mttr\");\n    });\n    pm.test(\"maintenance_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\");\n    });\n    pm.test(\"maintenance_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\");\n    });\n    pm.test(\"availability_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\");\n    });\n    pm.test(\"unmanaged_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\");\n    });\n    pm.test(\"downtime_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\");\n    });\n\n    if (critical_required) {\n        pm.test(\"critical_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_percentage\");\n        });\n        pm.test(\"critical_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_count\");\n        });\n        pm.test(\"critical_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_duration\");\n        });\n    }\n\n    if (trouble_required) {\n        pm.test(\"trouble_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_percentage\");\n        });\n        pm.test(\"trouble_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_count\");\n        });\n        pm.test(\"trouble_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_duration\");\n        });\n    }\n} else {\n    pm.test(\"summary_details is missing\", function () {\n        pm.expect(nr).to.have.property(\"summary_details\");\n    });\n}\n\n// Chart data validation\nif (nr.hasOwnProperty(\"charts\")) {\n    pm.test(\"name\", function () {\n        pm.expect(nr.charts[0]).to.have.property(\"name\");\n    });\n    pm.test(\"key\", function () {\n        pm.expect(nr.charts[0]).to.have.property(\"key\");\n    });\n    pm.test(\"data\", function () {\n        pm.expect(nr.charts[0]).to.have.property(\"data\");\n    });\n    pm.test(\"charts\", function () {\n        pm.expect(nr).to.have.property(\"charts\");\n    });\n} else {\n    pm.test(\"charts node is missing\", function () {\n        pm.expect(nr).to.have.property(\"charts\");\n    });\n}\n\n// Info data validation\nif (nr.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_name\");\n    });\n    pm.test(\"end_time\", function () {\n        pm.expect(nr.info).to.have.property(\"end_time\");\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_type_name\");\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.info).to.have.property(\"report_name\");\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(nr.info).to.have.property(\"period_name\");\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n    });\n    pm.test(\"segment_type\", function () {\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(nr.info).to.have.property(\"start_time\");\n    });\n    pm.test(\"resource_type\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_type\");\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.info).to.have.property(\"period\");\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n    });\n    pm.test(\"report_type\", function () {\n        pm.expect(nr.info).to.have.property(\"report_type\");\n    });\n    pm.test(\"segment_type_name\", function () {\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n    });\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect(nr).to.have.property(\"info\");\n    });\n}\n\n// Outage data validation\nif (nr.hasOwnProperty(\"outage_details\") && nr.outage_details.length > 0) {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outages are present\", function () {\n            pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n        });\n        pm.test(\"monitor_id\", function () {\n            pm.expect(nr.outage_details[0]).to.have.property(\"monitor_id\");\n        });\n        if (nr.outage_details[0].outages !== null) {\n            pm.test(\"outage_id\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\");\n            });\n            pm.test(\"end_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\");\n            });\n            pm.test(\"type\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\");\n            });\n            pm.test(\"start_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\");\n            });\n            pm.test(\"duration\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\");\n            });\n        } else {\n            pm.test(\"outages node is missing\", function () {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            });\n        }\n    }\n\n    if (critical_required) {\n        critical_count = nr.summary_details.critical_count;\n    }\n\n    if (trouble_required) {\n        trouble_count = nr.summary_details.trouble_count;\n    }\n\n    if (trouble_count >= 0 && critical_count >= 0) {\n        var totalCount = nr.summary_details.down_count + critical_count + trouble_count;\n        var outages_count = 0;\n        for (var i = 0; i < nr.outage_details.length; i++) {\n            outages_count += nr.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\" + totalCount + \"::outages length=\" + outages_count);\n        var result = (totalCount == outages_count);\n        pm.test(\"Outages count matches critical and Trouble option\", function () {\n            pm.expect(result).to.be.true;\n        });\n    }\n} else {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outage_details node is missing\", function () {\n            pm.expect(nr).to.have.property(\"outage_details\");\n        });\n    }\n}\n\n// Profile details\nif (nr.hasOwnProperty(\"profile_details\")) {\n    pm.test(\"profile_details\", function () {\n        pm.expect(nr).to.have.property(\"profile_details\");\n    });\n    pm.test(\"threshold_profiles\", function () {\n        pm.expect(nr.profile_details).to.have.property(\"threshold_profiles\");\n    });\n    pm.test(\"threshold_profile_details\", function () {\n        pm.expect(nr.profile_details).to.have.property(\"threshold_profile_details\");\n    });\n    pm.test(\"location_profiles\", function () {\n        pm.expect(nr.profile_details).to.have.property(\"location_profiles\");\n    });\n} else {\n    pm.test(\"profile_details node is missing\", function () {\n        pm.expect(nr).to.have.property(\"profile_details\");\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\nvar critical_count=0;\nvar trouble_count=0;\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\n\ntests[\"availability_details\"] = responseBody.has(\"availability_details\") && (responseBody.availability_details !== null);\ntests[\"tags\"] = responseBody.has(\"tags\");\n\n//Summary deatails validation\nif (responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    if(critical_required)\n    {\n        tests[\"critical_percentage\"]=responseBody.has(\"critical_percentage\") && (responseBody.critical_percentage!==null);\n        tests[\"critical_count\"]=responseBody.has(\"critical_count\") && (responseBody.critical_count!==null);\n        tests[\"critical_duration\"]=responseBody.has(\"critical_duration\") && (responseBody.critical_duration!==null);\n\n    }\n    if(trouble_required)\n    {\n        tests[\"trouble_percentage\"]=responseBody.has(\"trouble_percentage\") && (responseBody.trouble_percentage!==null);\n        tests[\"trouble_count\"]=responseBody.has(\"trouble_count\") && (responseBody.trouble_count!==null);\n        tests[\"trouble_duration\"]=responseBody.has(\"trouble_duration\") && (responseBody.trouble_duration!==null);\n\n    }\n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n//Chart data validation\nif(responseBody.has(\"charts\"))\n{   \n    tests[\"name\"] = responseBody.has(\"name\");\n    tests[\"key\"] = responseBody.has(\"key\");\n    tests[\"data\"] = responseBody.has('data\":[[');\n    tests[\"charts\"] = responseBody.has(\"charts\");\n    // Perfect approach would be to iterate over charts data and check appropriate position of nodes for Critical and Trouble data point check.\n   //TODO\n}\nelse\n{tests[\"charts node is missing\"] = responseBody.has(\"charts\");}\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"resource_type_name\"] = responseBody.has(\"resource_type_name\");\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"resource_type\"] = responseBody.has(\"resource_type\");\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\n\nif(responseBody.has(\"outage_details\") && response.data.outage_details.length>0)\n{\n    if(response.data.summary_details.alarm_count > 0)\n    {tests[\"outages are present\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    }\n    \n    if(critical_required)\n    {\n        critical_count=response.data.summary_details.critical_count;\n    }    \n    \n    if(trouble_required)\n    {\n        trouble_count = response.data.summary_details.trouble_count;\n    }\n    \n    if(trouble_count>=0 && critical_count>=0)\n    {\n        var totalCount = response.data.summary_details.down_count+critical_count+trouble_count;\n        var outages_count=0;\n        for(var i=0;i<+response.data.outage_details.length;i++)\n        {\n            outages_count+=response.data.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\"+totalCount+\"::outages length=\"+outages_count);\n        var result= (totalCount==outages_count);\n        tests[\"Outages count matches critical and Trouble option\"] = result ;\n    }\n       \n}\nelse\n{\n    if(response.data.summary_details.alarm_count>0)\n    {\n    tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\");\n    }\n    // Else if there is no outage then empty Outage tab is perfectly fine.\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar critical_count = 0;\nvar trouble_count = 0;\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\npm.test(\"availability_details\", function () {\n    pm.expect(response.hasOwnProperty(\"availability_details\")).to.be.true;\n    pm.expect(nr.availability_details).to.not.be.null;\n});\n\npm.test(\"tags\", function () {\n    pm.expect(response.hasOwnProperty(\"tags\")).to.be.true;\n});\n\nif (response.hasOwnProperty(\"summary_details\")) {\n    pm.test(\"down_count\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\").that.is.not.null;\n    });\n    pm.test(\"downtime_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\").that.is.not.null;\n    });\n    pm.test(\"availability_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\").that.is.not.null;\n    });\n    pm.test(\"mtbf\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\").that.is.not.null;\n    });\n    pm.test(\"unmanaged_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\").that.is.not.null;\n    });\n    pm.test(\"alarm_count\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\").that.is.not.null;\n    });\n    pm.test(\"mttr\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"mttr\").that.is.not.null;\n    });\n    pm.test(\"maintenance_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\").that.is.not.null;\n    });\n    pm.test(\"maintenance_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\").that.is.not.null;\n    });\n    pm.test(\"availability_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\").that.is.not.null;\n    });\n    pm.test(\"unmanaged_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\").that.is.not.null;\n    });\n    pm.test(\"downtime_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\").that.is.not.null;\n    });\n\n    if (critical_required) {\n        pm.test(\"critical_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_percentage\").that.is.not.null;\n        });\n        pm.test(\"critical_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_count\").that.is.not.null;\n        });\n        pm.test(\"critical_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_duration\").that.is.not.null;\n        });\n    }\n\n    if (trouble_required) {\n        pm.test(\"trouble_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_percentage\").that.is.not.null;\n        });\n        pm.test(\"trouble_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_count\").that.is.not.null;\n        });\n        pm.test(\"trouble_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_duration\").that.is.not.null;\n        });\n    }\n} else {\n    pm.test(\"summary_details is missing\", function () {\n        pm.expect(response.hasOwnProperty(\"summary_details\")).to.be.false;\n    });\n}\n\nif (response.hasOwnProperty(\"charts\")) {\n    pm.test(\"name\", function () {\n        pm.expect(nr).to.have.property(\"name\");\n    });\n    pm.test(\"key\", function () {\n        pm.expect(nr).to.have.property(\"key\");\n    });\n    pm.test(\"data\", function () {\n        pm.expect(nr).to.have.property(\"data\");\n    });\n    pm.test(\"charts\", function () {\n        pm.expect(nr).to.have.property(\"charts\");\n    });\n} else {\n    pm.test(\"charts node is missing\", function () {\n        pm.expect(response.hasOwnProperty(\"charts\")).to.be.false;\n    });\n}\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_name\");\n    });\n    pm.test(\"end_time\", function () {\n        pm.expect(nr.info).to.have.property(\"end_time\");\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_type_name\");\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.info).to.have.property(\"report_name\");\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(nr.info).to.have.property(\"period_name\");\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n    });\n    pm.test(\"segment_type\", function () {\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(nr.info).to.have.property(\"start_time\");\n    });\n    pm.test(\"resource_type\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_type\");\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.info).to.have.property(\"period\");\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n    });\n    pm.test(\"report_type\", function () {\n        pm.expect(nr.info).to.have.property(\"report_type\");\n    });\n    pm.test(\"segment_type_name\", function () {\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n    });\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.false;\n    });\n}\n\nif (nr.outage_details && nr.outage_details.length > 0) {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outages are present\", function () {\n            pm.expect(response.hasOwnProperty(\"outages\")).to.be.true;\n        });\n        pm.test(\"monitor_id\", function () {\n            pm.expect(nr.outage_details[0]).to.have.property(\"monitor_id\");\n        });\n        if (nr.outage_details[0].outages !== null) {\n            pm.test(\"outage_id\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\").that.is.not.null;\n            });\n            pm.test(\"end_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\").that.is.not.null;\n            });\n            pm.test(\"type\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\").that.is.not.null;\n            });\n            pm.test(\"start_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\").that.is.not.null;\n            });\n            pm.test(\"duration\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\").that.is.not.null;\n            });\n        } else {\n            pm.test(\"outages node is missing\", function () {\n                pm.expect(response.hasOwnProperty(\"outages\")).to.be.false;\n            });\n        }\n    }\n\n    if (critical_required) {\n        critical_count = nr.summary_details.critical_count;\n    }\n\n    if (trouble_required) {\n        trouble_count = nr.summary_details.trouble_count;\n    }\n\n    if (trouble_count >= 0 && critical_count >= 0) {\n        var totalCount = nr.summary_details.down_count + critical_count + trouble_count;\n        var outages_count = 0;\n        for (var i = 0; i < nr.outage_details.length; i++) {\n            outages_count += nr.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\" + totalCount + \"::outages length=\" + outages_count);\n        var result = (totalCount === outages_count);\n        pm.test(\"Outages count matches critical and Trouble option\", function () {\n            pm.expect(result).to.be.true;\n        });\n    }\n} else {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outage_details node is missing\", function () {\n            pm.expect(response.hasOwnProperty(\"outage_details\")).to.be.false;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\nvar critical_count=0;\nvar trouble_count=0;\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\n\ntests[\"availability_details\"] = responseBody.has(\"availability_details\") && (responseBody.availability_details !== null);\n\n//Summary deatails validation\nif (responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    if(critical_required)\n    {\n        tests[\"critical_percentage\"]=responseBody.has(\"critical_percentage\") && (responseBody.critical_percentage!==null);\n        tests[\"critical_count\"]=responseBody.has(\"critical_count\") && (responseBody.critical_count!==null);\n        tests[\"critical_duration\"]=responseBody.has(\"critical_duration\") && (responseBody.critical_duration!==null);\n\n    }\n    if(trouble_required)\n    {\n        tests[\"trouble_percentage\"]=responseBody.has(\"trouble_percentage\") && (responseBody.trouble_percentage!==null);\n        tests[\"trouble_count\"]=responseBody.has(\"trouble_count\") && (responseBody.trouble_count!==null);\n        tests[\"trouble_duration\"]=responseBody.has(\"trouble_duration\") && (responseBody.trouble_duration!==null);\n\n    }\n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n//Chart data validation\nif(responseBody.has(\"charts\"))\n{   \n    tests[\"name\"] = responseBody.has(\"name\");\n    tests[\"key\"] = responseBody.has(\"key\");\n    tests[\"data\"] = responseBody.has('data\":[[');\n    tests[\"charts\"] = responseBody.has(\"charts\");\n    // Perfect approach would be to iterate over charts data and check appropriate position of nodes for Critical and Trouble data point check.\n   //TODO\n}\nelse\n{tests[\"charts node is missing\"] = responseBody.has(\"charts\");}\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"resource_type_name\"] = responseBody.has(\"resource_type_name\");\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"resource_type\"] = responseBody.has(\"resource_type\");\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\n\nif(responseBody.has(\"outage_details\") && response.data.outage_details.length>0)\n{\n    if(response.data.summary_details.alarm_count > 0)\n    {tests[\"outages are present\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    }\n    \n    if(critical_required)\n    {\n        critical_count=response.data.summary_details.critical_count;\n    }    \n    \n    if(trouble_required)\n    {\n        trouble_count = response.data.summary_details.trouble_count;\n    }\n    \n    if(trouble_count>=0 && critical_count>=0)\n    {\n        var totalCount = response.data.summary_details.down_count+critical_count+trouble_count;\n        var outages_count=0;\n        for(var i=0;i<+response.data.outage_details.length;i++)\n        {\n            outages_count+=response.data.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\"+totalCount+\"::outages length=\"+outages_count);\n        var result= (totalCount==outages_count);\n        tests[\"Outages count matches critical and Trouble option\"] = result ;\n    }\n       \n}\nelse\n{\n    if(response.data.summary_details.alarm_count>0)\n    {\n    tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\");\n    }\n    // Else if there is no outage then empty Outage tab is perfectly fine.\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar critical_count = 0;\nvar trouble_count = 0;\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\npm.test(\"availability_details\", function() {\n    pm.expect(nr).to.have.property(\"availability_details\").and.to.not.be.null;\n});\n\n// Summary details validation\nif (nr.hasOwnProperty(\"summary_details\")) {\n    pm.test(\"down_count\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\").and.to.not.be.null;\n    });\n    pm.test(\"downtime_duration\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\").and.to.not.be.null;\n    });\n    pm.test(\"availability_percentage\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\").and.to.not.be.null;\n    });\n    pm.test(\"mtbf\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\").and.to.not.be.null;\n    });\n    pm.test(\"unmanaged_duration\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\").and.to.not.be.null;\n    });\n    pm.test(\"alarm_count\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\").and.to.not.be.null;\n    });\n    pm.test(\"mttr\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"mttr\").and.to.not.be.null;\n    });\n    pm.test(\"maintenance_percentage\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\").and.to.not.be.null;\n    });\n    pm.test(\"maintenance_duration\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\").and.to.not.be.null;\n    });\n    pm.test(\"availability_duration\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\").and.to.not.be.null;\n    });\n    pm.test(\"unmanaged_percentage\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\").and.to.not.be.null;\n    });\n    pm.test(\"downtime_percentage\", function() {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\").and.to.not.be.null;\n    });\n    if (critical_required) {\n        pm.test(\"critical_percentage\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"critical_percentage\").and.to.not.be.null;\n        });\n        pm.test(\"critical_count\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"critical_count\").and.to.not.be.null;\n        });\n        pm.test(\"critical_duration\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"critical_duration\").and.to.not.be.null;\n        });\n    }\n    if (trouble_required) {\n        pm.test(\"trouble_percentage\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_percentage\").and.to.not.be.null;\n        });\n        pm.test(\"trouble_count\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_count\").and.to.not.be.null;\n        });\n        pm.test(\"trouble_duration\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_duration\").and.to.not.be.null;\n        });\n    }\n} else {\n    pm.test(\"summary_details is missing\", function() {\n        pm.expect(nr).to.have.property(\"summary_details\");\n    });\n}\n\n// Chart data validation\nif (nr.hasOwnProperty(\"charts\")) {\n    pm.test(\"charts\", function() {\n        pm.expect(nr).to.have.property(\"charts\");\n    });\n    // TODO: Iterate over charts data and check appropriate position of nodes for Critical and Trouble data point check.\n} else {\n    pm.test(\"charts node is missing\", function() {\n        pm.expect(nr).to.have.property(\"charts\");\n    });\n}\n\n// Info data validation\nif (nr.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function() {\n        pm.expect(nr.info).to.have.property(\"resource_name\");\n    });\n    pm.test(\"end_time\", function() {\n        pm.expect(nr.info).to.have.property(\"end_time\");\n    });\n    pm.test(\"resource_type_name\", function() {\n        pm.expect(nr.info).to.have.property(\"resource_type_name\");\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(nr.info).to.have.property(\"report_name\");\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(nr.info).to.have.property(\"period_name\");\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n    });\n    pm.test(\"segment_type\", function() {\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(nr.info).to.have.property(\"start_time\");\n    });\n    pm.test(\"resource_type\", function() {\n        pm.expect(nr.info).to.have.property(\"resource_type\");\n    });\n    pm.test(\"period\", function() {\n        pm.expect(nr.info).to.have.property(\"period\");\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(nr.info).to.have.property(\"report_type\");\n    });\n    pm.test(\"segment_type_name\", function() {\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n    });\n} else {\n    pm.test(\"info is missing\", function() {\n        pm.expect(nr).to.have.property(\"info\");\n    });\n}\n\n// Outage data validation\nif (nr.hasOwnProperty(\"outage_details\") && nr.outage_details.length > 0) {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outages are present\", function() {\n            pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n        });\n        pm.test(\"monitor_id\", function() {\n            pm.expect(nr.outage_details[0]).to.have.property(\"monitor_id\");\n        });\n        if (nr.outage_details[0].hasOwnProperty(\"outages\")) {\n            pm.test(\"outage_id\", function() {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\").and.to.not.be.null;\n            });\n            pm.test(\"end_time\", function() {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\").and.to.not.be.null;\n            });\n            pm.test(\"type\", function() {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\").and.to.not.be.null;\n            });\n            pm.test(\"start_time\", function() {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\").and.to.not.be.null;\n            });\n            pm.test(\"duration\", function() {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\").and.to.not.be.null;\n            });\n        } else {\n            pm.test(\"outages node is missing\", function() {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            });\n        }\n    }\n\n    if (critical_required) {\n        critical_count = nr.summary_details.critical_count;\n    }\n\n    if (trouble_required) {\n        trouble_count = nr.summary_details.trouble_count;\n    }\n\n    if (trouble_count >= 0 && critical_count >= 0) {\n        var totalCount = nr.summary_details.down_count + critical_count + trouble_count;\n        var outages_count = 0;\n        for (var i = 0; i < nr.outage_details.length; i++) {\n            outages_count += nr.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\" + totalCount + \"::outages length=\" + outages_count);\n        var result = (totalCount == outages_count);\n        pm.test(\"Outages count matches critical and Trouble option\", function() {\n            pm.expect(result).to.be.true;\n        });\n    }\n} else {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outage_details node is missing\", function() {\n            pm.expect(nr).to.have.property(\"outage_details\");\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\nvar critical_count=0;\nvar trouble_count=0;\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\n\ntests[\"availability_details\"] = responseBody.has(\"availability_details\") && (responseBody.availability_details !== null);\n\n//Summary deatails validation\nif (responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    if(critical_required)\n    {\n        tests[\"critical_percentage\"]=responseBody.has(\"critical_percentage\") && (responseBody.critical_percentage!==null);\n        tests[\"critical_count\"]=responseBody.has(\"critical_count\") && (responseBody.critical_count!==null);\n        tests[\"critical_duration\"]=responseBody.has(\"critical_duration\") && (responseBody.critical_duration!==null);\n\n    }\n    if(trouble_required)\n    {\n        tests[\"trouble_percentage\"]=responseBody.has(\"trouble_percentage\") && (responseBody.trouble_percentage!==null);\n        tests[\"trouble_count\"]=responseBody.has(\"trouble_count\") && (responseBody.trouble_count!==null);\n        tests[\"trouble_duration\"]=responseBody.has(\"trouble_duration\") && (responseBody.trouble_duration!==null);\n\n    }\n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n//Chart data validation\nif(responseBody.has(\"charts\"))\n{   \n    tests[\"name\"] = responseBody.has(\"name\");\n    tests[\"key\"] = responseBody.has(\"key\");\n    tests[\"data\"] = responseBody.has('data\":[[');\n    tests[\"charts\"] = responseBody.has(\"charts\");\n    // Perfect approach would be to iterate over charts data and check appropriate position of nodes for Critical and Trouble data point check.\n   //TODO\n}\nelse\n{tests[\"charts node is missing\"] = responseBody.has(\"charts\");}\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"resource_type_name\"] = responseBody.has(\"resource_type_name\");\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"resource_type\"] = responseBody.has(\"resource_type\");\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\n\nif(responseBody.has(\"outage_details\") && response.data.outage_details.length>0)\n{\n    if(response.data.summary_details.alarm_count > 0)\n    {tests[\"outages are present\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    }\n    \n    if(critical_required)\n    {\n        critical_count=response.data.summary_details.critical_count;\n    }    \n    \n    if(trouble_required)\n    {\n        trouble_count = response.data.summary_details.trouble_count;\n    }\n    \n    if(trouble_count>=0 && critical_count>=0)\n    {\n        var totalCount = response.data.summary_details.down_count+critical_count+trouble_count;\n        var outages_count=0;\n        for(var i=0;i<+response.data.outage_details.length;i++)\n        {\n            outages_count+=response.data.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\"+totalCount+\"::outages length=\"+outages_count);\n        var result= (totalCount==outages_count);\n        tests[\"Outages count matches critical and Trouble option\"] = result ;\n    }\n       \n}\nelse\n{\n    if(response.data.summary_details.alarm_count>0)\n    {\n    tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\");\n    }\n    // Else if there is no outage then empty Outage tab is perfectly fine.\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar critical_count = 0;\nvar trouble_count = 0;\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\npm.test(\"availability_details\", function () {\n    pm.expect(nr).to.have.property(\"availability_details\");\n});\n\nif (nr.hasOwnProperty(\"summary_details\")) {\n    pm.test(\"down_count\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\");\n    });\n    pm.test(\"downtime_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\");\n    });\n    pm.test(\"availability_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\");\n    });\n    pm.test(\"mtbf\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\");\n    });\n    pm.test(\"unmanaged_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\");\n    });\n    pm.test(\"alarm_count\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\");\n    });\n    pm.test(\"mttr\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"mttr\");\n    });\n    pm.test(\"maintenance_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\");\n    });\n    pm.test(\"maintenance_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\");\n    });\n    pm.test(\"availability_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\");\n    });\n    pm.test(\"unmanaged_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\");\n    });\n    pm.test(\"downtime_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\");\n    });\n\n    if (critical_required) {\n        pm.test(\"critical_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_percentage\");\n        });\n        pm.test(\"critical_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_count\");\n        });\n        pm.test(\"critical_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_duration\");\n        });\n    }\n\n    if (trouble_required) {\n        pm.test(\"trouble_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_percentage\");\n        });\n        pm.test(\"trouble_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_count\");\n        });\n        pm.test(\"trouble_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_duration\");\n        });\n    }\n} else {\n    pm.test(\"summary_details is missing\", function () {\n        pm.expect(nr).to.have.property(\"summary_details\");\n    });\n}\n\nif (nr.hasOwnProperty(\"charts\")) {\n    pm.test(\"charts\", function () {\n        pm.expect(nr).to.have.property(\"charts\");\n    });\n    // Here, ideally iterate over charts data to check specific nodes\n} else {\n    pm.test(\"charts node is missing\", function () {\n        pm.expect(nr).to.have.property(\"charts\");\n    });\n}\n\nif (nr.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_name\");\n    });\n    pm.test(\"end_time\", function () {\n        pm.expect(nr.info).to.have.property(\"end_time\");\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_type_name\");\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.info).to.have.property(\"report_name\");\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(nr.info).to.have.property(\"period_name\");\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n    });\n    pm.test(\"segment_type\", function () {\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(nr.info).to.have.property(\"start_time\");\n    });\n    pm.test(\"resource_type\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_type\");\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.info).to.have.property(\"period\");\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n    });\n    pm.test(\"report_type\", function () {\n        pm.expect(nr.info).to.have.property(\"report_type\");\n    });\n    pm.test(\"segment_type_name\", function () {\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n    });\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect(nr).to.have.property(\"info\");\n    });\n}\n\nif (nr.hasOwnProperty(\"outage_details\") && nr.outage_details.length > 0) {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outages are present\", function () {\n            pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n        });\n        pm.test(\"monitor_id\", function () {\n            pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"monitor_id\");\n        });\n\n        if (nr.outage_details[0].outages !== null) {\n            pm.test(\"outage_id\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\");\n            });\n            pm.test(\"end_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\");\n            });\n            pm.test(\"type\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\");\n            });\n            pm.test(\"start_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\");\n            });\n            pm.test(\"duration\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\");\n            });\n        } else {\n            pm.test(\"outages node is missing\", function () {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            });\n        }\n    }\n\n    if (critical_required) {\n        critical_count = nr.summary_details.critical_count;\n    }\n\n    if (trouble_required) {\n        trouble_count = nr.summary_details.trouble_count;\n    }\n\n    if (trouble_count >= 0 && critical_count >= 0) {\n        var totalCount = nr.summary_details.down_count + critical_count + trouble_count;\n        var outages_count = 0;\n        for (var i = 0; i < nr.outage_details.length; i++) {\n            outages_count += nr.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\" + totalCount + \"::outages length=\" + outages_count);\n        var result = totalCount == outages_count;\n        pm.test(\"Outages count matches critical and Trouble option\", function () {\n            pm.expect(result).to.be.true;\n        });\n    }\n} else {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outage_details node is missing\", function () {\n            pm.expect(nr).to.have.property(\"outage_details\");\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\n\ntests[\" GET api/reports/availability_summary/group GD child Unauthorised\"] = jsonData.error_code === 1001 || 1100;\ntests[\"GET  api/reports/availability_summary/group GD child Response Code is 404 || 401 || 1100\"] = responseCode.code === 404 || 401 || 1100;\nif(jsonData.error_code === 1001 || 1100)\n{\n     tests[\"message\"] = jsonData.message ===\"Resource not found.\" || \"You are not authorized to perform this operation.\";\n}\nelse \n{\n    tests[\"api/reports/availability_summary/group GD Unauthorised is missed\"] = false;\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nlet response = pm.response.json();\nlet nr = response.data || {};\n\n// Info validation\npm.test(\"info\", function () {\n    pm.expect(response.hasOwnProperty(\"info\") && nr.info !== null).to.be.true;\n});\n\nif (nr.info) {\n    pm.test(\"resource_name\", function () {\n        pm.expect(nr.info.resource_name).to.not.be.null;\n    });\n    pm.test(\"end_time\", function () {\n        pm.expect(nr.info.end_time).to.not.be.null;\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info.resource_type_name).to.eql(\"Monitor\");\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.info.report_name).to.not.be.null;\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(nr.info.period_name).to.not.be.null;\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(nr.info.formatted_start_time).to.not.be.null;\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(nr.info.formatted_end_time).to.not.be.null;\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(nr.info.generated_time).to.not.be.null;\n    });\n    pm.test(\"segment_type\", function () {\n        pm.expect(nr.info.segment_type).to.not.be.null;\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(nr.info.start_time).to.not.be.null;\n    });\n    pm.test(\"resource_type\", function () {\n        pm.expect(nr.info.resource_type).to.eql(2);\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.info.period).to.not.be.null;\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(nr.info.formatted_generated_time).to.not.be.null;\n    });\n    pm.test(\"resource_id\", function () {\n        pm.expect(nr.info.resource_id).to.not.be.null;\n    });\n    pm.test(\"monitor_type\", function () {\n        pm.expect(nr.info.monitor_type).to.not.be.null;\n    });\n    pm.test(\"report_type\", function () {\n        pm.expect(nr.info.report_type).to.not.be.null;\n    });\n    pm.test(\"segment_type_name\", function () {\n        pm.expect(nr.info.segment_type_name).to.not.be.null;\n    });\n    pm.test(\"resource_tags\", function () {\n        pm.expect(nr.info.resource_tags).to.not.be.null;\n    });\n}\n\n// Summary Details\npm.test(\"summary_details\", function () {\n    pm.expect(response.hasOwnProperty(\"summary_details\") && nr.summary_details !== null).to.be.true;\n});\n\nif (nr.summary_details) {\n    pm.test(\"down_count\", function () {\n        pm.expect(nr.summary_details.down_count).to.not.be.null;\n    });\n    pm.test(\"downtime_duration\", function () {\n        pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n    });\n    pm.test(\"availability_percentage\", function () {\n        pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n    });\n    pm.test(\"mtbf\", function () {\n        pm.expect(nr.summary_details.mtbf).to.not.be.null;\n    });\n    pm.test(\"unmanaged_duration\", function () {\n        pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n    });\n    pm.test(\"alarm_count\", function () {\n        pm.expect(nr.summary_details.alarm_count).to.not.be.null;\n    });\n    pm.test(\"mttr\", function () {\n        pm.expect(nr.summary_details.mttr).to.not.be.null;\n    });\n    pm.test(\"maintenance_percentage\", function () {\n        pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n    });\n    pm.test(\"maintenance_duration\", function () {\n        pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n    });\n    pm.test(\"availability_duration\", function () {\n        pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n    });\n    pm.test(\"unmanaged_percentage\", function () {\n        pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n    });\n    pm.test(\"downtime_percentage\", function () {\n        pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n    });\n}\n\n// Performance Details\npm.test(\"performance_details\", function () {\n    pm.expect(response.hasOwnProperty(\"performance_details\") && nr.performance_details !== null).to.be.true;\n});\n\nif (nr.performance_details) {\n    let groupKeys = Object.keys(nr.performance_details);\n    if (groupKeys.length > 0) {\n        let group = nr.performance_details[groupKeys[0]];\n        pm.test(\"attribute_name\", function () {\n            pm.expect(group.attribute_data[0].attribute_name).to.not.be.null;\n        });\n        pm.test(\"attribute_label\", function () {\n            pm.expect(group.attribute_data[0].attribute_label).to.not.be.null;\n        });\n        pm.test(\"attribute_value\", function () {\n            pm.expect(group.attribute_data[0].attribute_value).to.not.be.null;\n        });\n    }\n}\n\n// Outage Details\npm.test(\"outage_details\", function () {\n    pm.expect(response.hasOwnProperty(\"outage_details\") && nr.outage_details !== null).to.be.true;\n});\n\nif (Array.isArray(nr.outage_details)) {\n    for (let i = 0; i < nr.outage_details.length; i++) {\n        let outageGroup = nr.outage_details[i];\n\n        pm.test(`outage_details_${i}_display_name`, function () {\n            pm.expect(outageGroup.display_name).to.not.be.null;\n        });\n\n        pm.test(`outage_details_${i}_outages`, function () {\n            pm.expect(outageGroup.outages).to.not.be.null;\n        });\n\n        pm.test(`outage_details_${i}_monitor_id`, function () {\n            pm.expect(outageGroup.monitor_id).to.not.be.null;\n        });\n\n        if (Array.isArray(outageGroup.outages)) {\n            for (let j = 0; j < outageGroup.outages.length; j++) {\n                let outage = outageGroup.outages[j];\n\n                pm.test(`outage_${j}_outage_id`, function () {\n                    pm.expect(outage.outage_id).to.not.be.null;\n                });\n                pm.test(`outage_${j}_end_time`, function () {\n                    pm.expect(outage.end_time).to.not.be.null;\n                });\n                pm.test(`outage_${j}_image_file`, function () {\n                    pm.expect(outage.image_file).to.not.be.null;\n                });\n                pm.test(`outage_${j}_type`, function () {\n                    pm.expect(outage.type).to.not.be.null;\n                });\n                pm.test(`outage_${j}_start_time`, function () {\n                    pm.expect(outage.start_time).to.not.be.null;\n                });\n                pm.test(`outage_${j}_rca`, function () {\n                    pm.expect(outage.rca).to.not.be.null;\n                });\n                pm.test(`outage_${j}_reason`, function () {\n                    pm.expect(outage.reason).to.not.be.null;\n                });\n                pm.test(`outage_${j}_duration`, function () {\n                    pm.expect(outage.duration).to.not.be.null;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\nvar critical_count=0;\nvar trouble_count=0;\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\n\ntests[\"availability_details\"] = responseBody.has(\"availability_details\") && (responseBody.availability_details !== null);\n\n//Summary deatails validation\nif (responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    if(critical_required)\n    {\n        tests[\"critical_percentage\"]=responseBody.has(\"critical_percentage\") && (responseBody.critical_percentage!==null);\n        tests[\"critical_count\"]=responseBody.has(\"critical_count\") && (responseBody.critical_count!==null);\n        tests[\"critical_duration\"]=responseBody.has(\"critical_duration\") && (responseBody.critical_duration!==null);\n\n    }\n    if(trouble_required)\n    {\n        tests[\"trouble_percentage\"]=responseBody.has(\"trouble_percentage\") && (responseBody.trouble_percentage!==null);\n        tests[\"trouble_count\"]=responseBody.has(\"trouble_count\") && (responseBody.trouble_count!==null);\n        tests[\"trouble_duration\"]=responseBody.has(\"trouble_duration\") && (responseBody.trouble_duration!==null);\n\n    }\n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n//Chart data validation\nif(responseBody.has(\"charts\"))\n{   \n    tests[\"name\"] = responseBody.has(\"name\");\n    tests[\"key\"] = responseBody.has(\"key\");\n    tests[\"data\"] = responseBody.has('data\":[[');\n    tests[\"charts\"] = responseBody.has(\"charts\");\n    // Perfect approach would be to iterate over charts data and check appropriate position of nodes for Critical and Trouble data point check.\n   //TODO\n}\nelse\n{tests[\"charts node is missing\"] = responseBody.has(\"charts\");}\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"resource_type_name\"] = responseBody.has(\"resource_type_name\");\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"resource_type\"] = responseBody.has(\"resource_type\");\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\n\nif(responseBody.has(\"outage_details\") && response.data.outage_details.length>0)\n{\n    if(response.data.summary_details.alarm_count > 0)\n    {tests[\"outages are present\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    }\n    \n    /*\n        \n    Due to data issue, skipping this for all monitors usecase\n\n    if(critical_required)\n    {\n        critical_count=response.data.summary_details.critical_count;\n    }    \n    \n    if(trouble_required)\n    {\n        trouble_count = response.data.summary_details.trouble_count;\n    }\n    \n    if(trouble_count>=0 && critical_count>=0)\n    {\n        var totalCount = response.data.summary_details.down_count+response.data.summary_details.trouble_count+response.data.summary_details.critical_count;\n        var outages_count=0;\n        for(var i=0;i<+response.data.outage_details.length;i++)\n        {\n            outages_count+=response.data.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\"+totalCount+\"::outages length=\"+outages_count);\n        var result= (totalCount==outages_count);\n        tests[\"Outages count matches critical and Trouble option\"] = result ;\n    }*/\n       \n}\nelse\n{\n    if(response.data.summary_details.alarm_count>0)\n    {\n    tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\");\n    }\n    // Else if there is no outage then empty Outage tab is perfectly fine.\n}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar critical_count = 0;\nvar trouble_count = 0;\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\npm.test(\"availability_details\", function () {\n    pm.expect(nr.hasOwnProperty(\"availability_details\") && nr.availability_details !== null).to.be.true;\n});\n\n// Summary details validation\nif (nr.hasOwnProperty(\"summary_details\")) {\n    pm.test(\"down_count\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"down_count\") && nr.summary_details.down_count !== null).to.be.true;\n    });\n    pm.test(\"downtime_duration\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"downtime_duration\") && nr.summary_details.downtime_duration !== null).to.be.true;\n    });\n    pm.test(\"availability_percentage\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"availability_percentage\") && nr.summary_details.availability_percentage !== null).to.be.true;\n    });\n    pm.test(\"mtbf\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"mtbf\") && nr.summary_details.mtbf !== null).to.be.true;\n    });\n    pm.test(\"unmanaged_duration\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"unmanaged_duration\") && nr.summary_details.unmanaged_duration !== null).to.be.true;\n    });\n    pm.test(\"alarm_count\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"alarm_count\") && nr.summary_details.alarm_count !== null).to.be.true;\n    });\n    pm.test(\"mttr\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"mttr\") && nr.summary_details.mttr !== null).to.be.true;\n    });\n    pm.test(\"maintenance_percentage\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"maintenance_percentage\") && nr.summary_details.maintenance_percentage !== null).to.be.true;\n    });\n    pm.test(\"maintenance_duration\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"maintenance_duration\") && nr.summary_details.maintenance_duration !== null).to.be.true;\n    });\n    pm.test(\"availability_duration\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"availability_duration\") && nr.summary_details.availability_duration !== null).to.be.true;\n    });\n    pm.test(\"unmanaged_percentage\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"unmanaged_percentage\") && nr.summary_details.unmanaged_percentage !== null).to.be.true;\n    });\n    pm.test(\"downtime_percentage\", function () {\n        pm.expect(nr.summary_details.hasOwnProperty(\"downtime_percentage\") && nr.summary_details.downtime_percentage !== null).to.be.true;\n    });\n\n    if (critical_required) {\n        pm.test(\"critical_percentage\", function () {\n            pm.expect(nr.summary_details.hasOwnProperty(\"critical_percentage\") && nr.summary_details.critical_percentage !== null).to.be.true;\n        });\n        pm.test(\"critical_count\", function () {\n            pm.expect(nr.summary_details.hasOwnProperty(\"critical_count\") && nr.summary_details.critical_count !== null).to.be.true;\n        });\n        pm.test(\"critical_duration\", function () {\n            pm.expect(nr.summary_details.hasOwnProperty(\"critical_duration\") && nr.summary_details.critical_duration !== null).to.be.true;\n        });\n    }\n\n    if (trouble_required) {\n        pm.test(\"trouble_percentage\", function () {\n            pm.expect(nr.summary_details.hasOwnProperty(\"trouble_percentage\") && nr.summary_details.trouble_percentage !== null).to.be.true;\n        });\n        pm.test(\"trouble_count\", function () {\n            pm.expect(nr.summary_details.hasOwnProperty(\"trouble_count\") && nr.summary_details.trouble_count !== null).to.be.true;\n        });\n        pm.test(\"trouble_duration\", function () {\n            pm.expect(nr.summary_details.hasOwnProperty(\"trouble_duration\") && nr.summary_details.trouble_duration !== null).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"summary_details is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"summary_details\")).to.be.true;\n    });\n}\n\n// Chart data validation\nif (nr.hasOwnProperty(\"charts\")) {\n    pm.test(\"charts\", function () {\n        pm.expect(nr.hasOwnProperty(\"charts\")).to.be.true;\n    });\n    // TODO: Iterate over charts data and check appropriate position of nodes for Critical and Trouble data point check.\n} else {\n    pm.test(\"charts node is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"charts\")).to.be.true;\n    });\n}\n\n// Info data validation\nif (nr.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"resource_type_name\")).to.be.true;\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"segment_type\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"segment_type\")).to.be.true;\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"resource_type\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"resource_type\")).to.be.true;\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n    pm.test(\"segment_type_name\", function () {\n        pm.expect(nr.info.hasOwnProperty(\"segment_type_name\")).to.be.true;\n    });\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\n// Outage data validation\nif (nr.hasOwnProperty(\"outage_details\") && nr.outage_details.length > 0) {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outages are present\", function () {\n            pm.expect(nr.outage_details[0].hasOwnProperty(\"outages\")).to.be.true;\n        });\n        pm.test(\"monitor_id\", function () {\n            pm.expect(nr.outage_details[0].hasOwnProperty(\"monitor_id\")).to.be.true;\n        });\n\n        if (nr.outage_details[0].outages !== null) {\n            pm.test(\"outage_id\", function () {\n                pm.expect(nr.outage_details[0].outages[0].hasOwnProperty(\"outage_id\") && nr.outage_details[0].outages[0].outage_id !== null).to.be.true;\n            });\n            pm.test(\"end_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0].hasOwnProperty(\"end_time\") && nr.outage_details[0].outages[0].end_time !== null).to.be.true;\n            });\n            pm.test(\"type\", function () {\n                pm.expect(nr.outage_details[0].outages[0].hasOwnProperty(\"type\") && nr.outage_details[0].outages[0].type !== null).to.be.true;\n            });\n            pm.test(\"start_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0].hasOwnProperty(\"start_time\") && nr.outage_details[0].outages[0].start_time !== null).to.be.true;\n            });\n            pm.test(\"duration\", function () {\n                pm.expect(nr.outage_details[0].outages[0].hasOwnProperty(\"duration\") && nr.outage_details[0].outages[0].duration !== null).to.be.true;\n            });\n        } else {\n            pm.test(\"outages node is missing\", function () {\n                pm.expect(nr.outage_details[0].hasOwnProperty(\"outages\")).to.be.true;\n            });\n        }\n    }\n} else {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outage_details node is missing\", function () {\n            pm.expect(nr.hasOwnProperty(\"outage_details\")).to.be.true;\n        });\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\nvar critical_count=0;\nvar trouble_count=0;\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    if(critical_required)\n    {\n        tests[\"critical_percentage\"]=responseBody.has(\"critical_percentage\") && (responseBody.critical_percentage!==null);\n        tests[\"critical_count\"]=responseBody.has(\"critical_count\") && (responseBody.critical_count!==null);\n        tests[\"critical_duration\"]=responseBody.has(\"critical_duration\") && (responseBody.critical_duration!==null);\n\n    }\n    if(trouble_required)\n    {\n        tests[\"trouble_percentage\"]=responseBody.has(\"trouble_percentage\") && (responseBody.trouble_percentage!==null);\n        tests[\"trouble_count\"]=responseBody.has(\"trouble_count\") && (responseBody.trouble_count!==null);\n        tests[\"trouble_duration\"]=responseBody.has(\"trouble_duration\") && (responseBody.trouble_duration!==null);\n\n    }\n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===2);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n    tests[\"resource_tags\"] = responseBody.has(\"resource_tags\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\n\nif(responseBody.has(\"outage_details\") && response.data.outage_details.length>0)\n{\n    if(response.data.summary_details.alarm_count > 0)\n    {tests[\"outages are present\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    }\n    \n    if(critical_required)\n    {\n        critical_count=response.data.summary_details.critical_count;\n    }    \n    \n    if(trouble_required)\n    {\n        trouble_count = response.data.summary_details.trouble_count;\n    }\n    \n    if(trouble_count>=0 && critical_count>=0)\n    {\n        var totalCount = response.data.summary_details.down_count+critical_count+trouble_count;\n        var outages_count=0;\n        for(var i=0;i<+response.data.outage_details.length;i++)\n        {\n            outages_count+=response.data.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\"+totalCount+\"::outages length=\"+outages_count);\n        var result= (totalCount==outages_count);\n        tests[\"Outages count matches critical and Trouble option\"] = result ;\n    }\n       \n}\nelse\n{\n    if(response.data.summary_details.alarm_count>0)\n    {\n    tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\");\n    }\n    // Else if there is no outage then empty Outage tab is perfectly fine.\n}\n//performance_details\n\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"attribute_name\"] = responseBody.has(\"attribute_name\") ;\n    tests[\"attribute_name RESPONSE\"] = response.data.performance_details[0].attribute_name === 'RESPONSETIME';\n    tests[\"attribute_value\"] = responseBody.has(\"attribute_value\");\n    tests[\"attribute_value is not null\"] =  response.data.performance_details[0].attribute_value !== null;\n\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar critical_count = 0;\nvar trouble_count = 0;\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\n// Summary details validation\npm.test(\"Summary details validation\", function() {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        pm.test(\"down_count\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"down_count\");\n            pm.expect(nr.summary_details.down_count).to.not.be.null;\n        });\n        pm.test(\"downtime_duration\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"downtime_duration\");\n            pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n        });\n        pm.test(\"availability_percentage\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"availability_percentage\");\n            pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n        });\n        pm.test(\"mtbf\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"mtbf\");\n            pm.expect(nr.summary_details.mtbf).to.not.be.null;\n        });\n        pm.test(\"unmanaged_duration\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\");\n            pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n        });\n        pm.test(\"alarm_count\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"alarm_count\");\n            pm.expect(nr.summary_details.alarm_count).to.not.be.null;\n        });\n        pm.test(\"mttr\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"mttr\");\n            pm.expect(nr.summary_details.mttr).to.not.be.null;\n        });\n        pm.test(\"maintenance_percentage\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\");\n            pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n        });\n        pm.test(\"maintenance_duration\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\");\n            pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n        });\n        pm.test(\"availability_duration\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"availability_duration\");\n            pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n        });\n        pm.test(\"unmanaged_percentage\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\");\n            pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n        });\n        pm.test(\"downtime_percentage\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\");\n            pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n        });\n        if (critical_required) {\n            pm.test(\"critical_percentage\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"critical_percentage\");\n                pm.expect(nr.summary_details.critical_percentage).to.not.be.null;\n            });\n            pm.test(\"critical_count\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"critical_count\");\n                pm.expect(nr.summary_details.critical_count).to.not.be.null;\n            });\n            pm.test(\"critical_duration\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"critical_duration\");\n                pm.expect(nr.summary_details.critical_duration).to.not.be.null;\n            });\n        }\n        if (trouble_required) {\n            pm.test(\"trouble_percentage\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"trouble_percentage\");\n                pm.expect(nr.summary_details.trouble_percentage).to.not.be.null;\n            });\n            pm.test(\"trouble_count\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"trouble_count\");\n                pm.expect(nr.summary_details.trouble_count).to.not.be.null;\n            });\n            pm.test(\"trouble_duration\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"trouble_duration\");\n                pm.expect(nr.summary_details.trouble_duration).to.not.be.null;\n            });\n        }\n    } else {\n        pm.test(\"summary_details is missing\", function() {\n            pm.expect(response).to.have.property(\"summary_details\");\n        });\n    }\n});\n\n// Info data validation\npm.test(\"Info data validation\", function() {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.test(\"resource_name\", function() {\n            pm.expect(nr.info).to.have.property(\"resource_name\");\n        });\n        pm.test(\"end_time\", function() {\n            pm.expect(nr.info).to.have.property(\"end_time\");\n        });\n        pm.test(\"resource_type_name\", function() {\n            pm.expect(nr.info.resource_type_name).to.eql(\"Monitor\");\n        });\n        pm.test(\"report_name\", function() {\n            pm.expect(nr.info).to.have.property(\"report_name\");\n        });\n        pm.test(\"period_name\", function() {\n            pm.expect(nr.info).to.have.property(\"period_name\");\n        });\n        pm.test(\"formatted_start_time\", function() {\n            pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        });\n        pm.test(\"generated_time\", function() {\n            pm.expect(nr.info).to.have.property(\"generated_time\");\n        });\n        pm.test(\"formatted_end_time\", function() {\n            pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        });\n        pm.test(\"segment_type\", function() {\n            pm.expect(nr.info).to.have.property(\"segment_type\");\n        });\n        pm.test(\"start_time\", function() {\n            pm.expect(nr.info).to.have.property(\"start_time\");\n        });\n        pm.test(\"resource type\", function() {\n            pm.expect(nr.info.resource_type).to.eql(2);\n        });\n        pm.test(\"period\", function() {\n            pm.expect(nr.info).to.have.property(\"period\");\n        });\n        pm.test(\"formatted_generated_time\", function() {\n            pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        });\n        pm.test(\"report_type\", function() {\n            pm.expect(nr.info).to.have.property(\"report_type\");\n        });\n        pm.test(\"segment_type_name\", function() {\n            pm.expect(nr.info).to.have.property(\"segment_type_name\");\n        });\n        pm.test(\"resource_tags\", function() {\n            pm.expect(nr.info).to.have.property(\"resource_tags\");\n        });\n    } else {\n        pm.test(\"info is missing\", function() {\n            pm.expect(response).to.have.property(\"info\");\n        });\n    }\n});\n\n// Outage data validation\npm.test(\"Outage data validation\", function() {\n    if (nr.hasOwnProperty(\"outage_details\") && nr.outage_details.length > 0) {\n        if (nr.summary_details.alarm_count > 0) {\n            pm.test(\"outages are present\", function() {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            });\n            pm.test(\"monitor_id\", function() {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"monitor_id\");\n            });\n            if (nr.outage_details[0].outages !== null) {\n                pm.test(\"outage_id\", function() {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\");\n                    pm.expect(nr.outage_details[0].outages[0].outage_id).to.not.be.null;\n                });\n                pm.test(\"end_time\", function() {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\");\n                    pm.expect(nr.outage_details[0].outages[0].end_time).to.not.be.null;\n                });\n                pm.test(\"type\", function() {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\");\n                    pm.expect(nr.outage_details[0].outages[0].type).to.not.be.null;\n                });\n                pm.test(\"start_time\", function() {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\");\n                    pm.expect(nr.outage_details[0].outages[0].start_time).to.not.be.null;\n                });\n                pm.test(\"duration\", function() {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\");\n                    pm.expect(nr.outage_details[0].outages[0].duration).to.not.be.null;\n                });\n            } else {\n                pm.test(\"outages node is missing\", function() {\n                    pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n                });\n            }\n        }\n\n        if (critical_required) {\n            critical_count = nr.summary_details.critical_count;\n        }\n\n        if (trouble_required) {\n            trouble_count = nr.summary_details.trouble_count;\n        }\n\n        if (trouble_count >= 0 && critical_count >= 0) {\n            var totalCount = nr.summary_details.down_count + critical_count + trouble_count;\n            var outages_count = 0;\n            for (var i = 0; i < nr.outage_details.length; i++) {\n                outages_count += nr.outage_details[i].outages.length;\n            }\n            console.log(\"totalcount=\" + totalCount + \"::outages length=\" + outages_count);\n            var result = (totalCount === outages_count);\n            pm.test(\"Outages count matches critical and Trouble option\", function() {\n                pm.expect(result).to.be.true;\n            });\n        }\n    } else {\n        if (nr.summary_details.alarm_count > 0) {\n            pm.test(\"outage_details node is missing\", function() {\n                pm.expect(response).to.have.property(\"outage_details\");\n            });\n        }\n    }\n});\n\n// Performance details validation\npm.test(\"Performance details validation\", function() {\n    if (nr.hasOwnProperty(\"performance_details\")) {\n        pm.test(\"attribute_name\", function() {\n            pm.expect(nr.performance_details[0]).to.have.property(\"attribute_name\");\n        });\n        pm.test(\"attribute_name RESPONSE\", function() {\n            pm.expect(nr.performance_details[0].attribute_name).to.eql('RESPONSETIME');\n        });\n        pm.test(\"attribute_value\", function() {\n            pm.expect(nr.performance_details[0]).to.have.property(\"attribute_value\");\n        });\n        pm.test(\"attribute_value is not null\", function() {\n            pm.expect(nr.performance_details[0].attribute_value).to.not.be.null;\n        });\n    } else {\n        pm.test(\"performance_details node is missing\", function() {\n            pm.expect(response).to.have.property(\"performance_details\");\n        });\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\nvar critical_count=0;\nvar trouble_count=0;\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nlet monitor_type=pm.environment.get(\"MONTYPE\");\nconsole.log(\"MONTYPE = \"+monitor_type);\n\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    if(critical_required)\n    {\n        tests[\"critical_percentage\"]=responseBody.has(\"critical_percentage\") && (responseBody.critical_percentage!==null);\n        tests[\"critical_count\"]=responseBody.has(\"critical_count\") && (responseBody.critical_count!==null);\n        tests[\"critical_duration\"]=responseBody.has(\"critical_duration\") && (responseBody.critical_duration!==null);\n\n    }\n    if(trouble_required)\n    {\n        tests[\"trouble_percentage\"]=responseBody.has(\"trouble_percentage\") && (responseBody.trouble_percentage!==null);\n        tests[\"trouble_count\"]=responseBody.has(\"trouble_count\") && (responseBody.trouble_count!==null);\n        tests[\"trouble_duration\"]=responseBody.has(\"trouble_duration\") && (responseBody.trouble_duration!==null);\n\n    }\n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Monitor Type';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===4);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\n\nif(responseBody.has(\"outage_details\") && response.data.outage_details.length>0)\n{\n    if(response.data.summary_details.alarm_count > 0)\n    {tests[\"outages are present\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    }\n    \n    if(critical_required)\n    {\n        critical_count=response.data.summary_details.critical_count;\n    }    \n    \n    if(trouble_required)\n    {\n        trouble_count = response.data.summary_details.trouble_count;\n    }\n    \n    if(trouble_count>=0 && critical_count>=0)\n    {\n        var totalCount = response.data.summary_details.down_count+critical_count+trouble_count;\n        var outages_count=0;\n        for(var i=0;i<+response.data.outage_details.length;i++)\n        {\n            outages_count+=response.data.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\"+totalCount+\"::outages length=\"+outages_count);\n        var result= (totalCount==outages_count);\n        tests[\"Outages count matches critical and Trouble option\"] = result ;\n    }\n       \n}\nelse\n{\n    if(response.data.summary_details.alarm_count>0)\n    {\n    tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\");\n    }\n    // Else if there is no outage then empty Outage tab is perfectly fine.\n}\n//performance_details\n\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"performance_details\"+\"_\"+monitor_type] = responseBody.has(monitor_type) ;\n    tests[\"name attribute for monitortype is not null\"]=response.data.performance_details[monitor_type].name.length>0;\n    tests[\"attribute_data for monitortype is not null\"]=response.data.performance_details[monitor_type].attribute_data.length>0;\n    tests[\"availability for monitortype is not null\"]=response.data\n    .performance_details[monitor_type].availability.length>0;\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar critical_count = 0;\nvar trouble_count = 0;\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\nlet monitor_type = pm.environment.get(\"MONTYPE\");\nconsole.log(\"MONTYPE = \" + monitor_type);\n\nif (nr.hasOwnProperty(\"summary_details\")) {\n    pm.test(\"down_count\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\").and.to.not.be.null;\n    });\n    pm.test(\"downtime_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\").and.to.not.be.null;\n    });\n    pm.test(\"availability_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\").and.to.not.be.null;\n    });\n    pm.test(\"mtbf\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\").and.to.not.be.null;\n    });\n    pm.test(\"unmanaged_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\").and.to.not.be.null;\n    });\n    pm.test(\"alarm_count\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\").and.to.not.be.null;\n    });\n    pm.test(\"mttr\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"mttr\").and.to.not.be.null;\n    });\n    pm.test(\"maintenance_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\").and.to.not.be.null;\n    });\n    pm.test(\"maintenance_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\").and.to.not.be.null;\n    });\n    pm.test(\"availability_duration\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\").and.to.not.be.null;\n    });\n    pm.test(\"unmanaged_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\").and.to.not.be.null;\n    });\n    pm.test(\"downtime_percentage\", function () {\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\").and.to.not.be.null;\n    });\n\n    if (critical_required) {\n        pm.test(\"critical_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_percentage\").and.to.not.be.null;\n        });\n        pm.test(\"critical_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_count\").and.to.not.be.null;\n        });\n        pm.test(\"critical_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"critical_duration\").and.to.not.be.null;\n        });\n    }\n\n    if (trouble_required) {\n        pm.test(\"trouble_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_percentage\").and.to.not.be.null;\n        });\n        pm.test(\"trouble_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_count\").and.to.not.be.null;\n        });\n        pm.test(\"trouble_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_duration\").and.to.not.be.null;\n        });\n    }\n} else {\n    pm.test(\"summary_details is missing\", function () {\n        pm.expect(response).to.have.property(\"summary_details\");\n    });\n}\n\nif (nr.hasOwnProperty(\"info\")) {\n    pm.test(\"resource_name\", function () {\n        pm.expect(nr.info).to.have.property(\"resource_name\");\n    });\n    pm.test(\"end_time\", function () {\n        pm.expect(nr.info).to.have.property(\"end_time\");\n    });\n    pm.test(\"resource_type_name\", function () {\n        pm.expect(nr.info.resource_type_name).to.eql(\"Monitor Type\");\n    });\n    pm.test(\"report_name\", function () {\n        pm.expect(nr.info).to.have.property(\"report_name\");\n    });\n    pm.test(\"period_name\", function () {\n        pm.expect(nr.info).to.have.property(\"period_name\");\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n    });\n    pm.test(\"segment_type\", function () {\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(nr.info).to.have.property(\"start_time\");\n    });\n    pm.test(\"resource type\", function () {\n        pm.expect(nr.info.resource_type).to.eql(4);\n    });\n    pm.test(\"period\", function () {\n        pm.expect(nr.info).to.have.property(\"period\");\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n    });\n    pm.test(\"report_type\", function () {\n        pm.expect(nr.info).to.have.property(\"report_type\");\n    });\n    pm.test(\"segment_type_name\", function () {\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n    });\n} else {\n    pm.test(\"info is missing\", function () {\n        pm.expect(response).to.have.property(\"info\");\n    });\n}\n\nif (nr.hasOwnProperty(\"outage_details\") && nr.outage_details.length > 0) {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outages are present\", function () {\n            pm.expect(response).to.have.property(\"outages\");\n        });\n        pm.test(\"monitor_id\", function () {\n            pm.expect(response).to.have.property(\"monitor_id\");\n        });\n\n        if (response.hasOwnProperty(\"outages\")) {\n            pm.test(\"outage_id\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\").and.to.not.be.null;\n            });\n            pm.test(\"end_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\").and.to.not.be.null;\n            });\n            pm.test(\"type\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\").and.to.not.be.null;\n            });\n            pm.test(\"start_time\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\").and.to.not.be.null;\n            });\n            pm.test(\"duration\", function () {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\").and.to.not.be.null;\n            });\n        } else {\n            pm.test(\"outages node is missing\", function () {\n                pm.expect(response).to.have.property(\"outages\");\n            });\n        }\n    }\n\n    if (critical_required) {\n        critical_count = nr.summary_details.critical_count;\n    }\n\n    if (trouble_required) {\n        trouble_count = nr.summary_details.trouble_count;\n    }\n\n    if (trouble_count >= 0 && critical_count >= 0) {\n        var totalCount = nr.summary_details.down_count + critical_count + trouble_count;\n        var outages_count = 0;\n        for (var i = 0; i < nr.outage_details.length; i++) {\n            outages_count += nr.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\" + totalCount + \"::outages length=\" + outages_count);\n        var result = totalCount === outages_count;\n        pm.test(\"Outages count matches critical and Trouble option\", function () {\n            pm.expect(result).to.be.true;\n        });\n    }\n} else {\n    if (nr.summary_details.alarm_count > 0) {\n        pm.test(\"outage_details node is missing\", function () {\n            pm.expect(response).to.have.property(\"outage_details\");\n        });\n    }\n}\n\nif (nr.hasOwnProperty(\"performance_details\")) {\n    pm.test(\"performance_details_\" + monitor_type, function () {\n        pm.expect(nr.performance_details).to.have.property(monitor_type);\n    });\n    pm.test(\"name attribute for monitortype is not null\", function () {\n        pm.expect(nr.performance_details[monitor_type].name.length).to.be.greaterThan(0);\n    });\n    pm.test(\"attribute_data for monitortype is not null\", function () {\n        pm.expect(nr.performance_details[monitor_type].attribute_data.length).to.be.greaterThan(0);\n    });\n    pm.test(\"availability for monitortype is not null\", function () {\n        pm.expect(nr.performance_details[monitor_type].availability.length).to.be.greaterThan(0);\n    });\n} else {\n    pm.test(\"performance_details node is missing\", function () {\n        pm.expect(response).to.have.property(\"performance_details\");\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\nvar critical_count=0;\nvar trouble_count=0;\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nlet monitor_type=pm.environment.get(\"MONTYPE\");\nconsole.log(\"MONTYPE = \"+monitor_type);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    if(critical_required)\n    {\n        tests[\"critical_percentage\"]=responseBody.has(\"critical_percentage\") && (responseBody.critical_percentage!==null);\n        tests[\"critical_count\"]=responseBody.has(\"critical_count\") && (responseBody.critical_count!==null);\n        tests[\"critical_duration\"]=responseBody.has(\"critical_duration\") && (responseBody.critical_duration!==null);\n\n    }\n    if(trouble_required)\n    {\n        tests[\"trouble_percentage\"]=responseBody.has(\"trouble_percentage\") && (responseBody.trouble_percentage!==null);\n        tests[\"trouble_count\"]=responseBody.has(\"trouble_count\") && (responseBody.trouble_count!==null);\n        tests[\"trouble_duration\"]=responseBody.has(\"trouble_duration\") && (responseBody.trouble_duration!==null);\n\n    }\n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Group';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===1);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\n\nif(responseBody.has(\"outage_details\") && response.data.outage_details.length>0)\n{\n    if(response.data.summary_details.alarm_count > 0)\n    {tests[\"outages are present\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    }\n    \n    if(critical_required)\n    {\n        critical_count=response.data.summary_details.critical_count;\n    }    \n    \n    if(trouble_required)\n    {\n        trouble_count = response.data.summary_details.trouble_count;\n    }\n    \n    if(trouble_count>=0 && critical_count>=0)\n    {\n        var totalCount = response.data.summary_details.down_count+critical_count+trouble_count;\n        var outages_count=0;\n        for(var i=0;i<+response.data.outage_details.length;i++)\n        {\n            outages_count+=response.data.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\"+totalCount+\"::outages length=\"+outages_count);\n        var result= (totalCount==outages_count);\n        tests[\"Outages count matches critical and Trouble option\"] = result ;\n    }\n       \n}\nelse\n{\n    if(response.data.summary_details.alarm_count>0)\n    {\n    tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\");\n    }\n    // Else if there is no outage then empty Outage tab is perfectly fine.\n}\n//performance_details\n// This will check if the basic URL monitorType is present or not.\n// We will have URL specified in the environment variables to make this easier to test\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"performance_details\"+\"_\"+monitor_type] = responseBody.has(monitor_type) ;\n    tests[\"name attribute for monitortype is not null\"]=response.data.performance_details[monitor_type].name.length>0;\n    tests[\"attribute_data for monitortype is not null\"]=response.data.performance_details[monitor_type].attribute_data.length>0;\n    tests[\"availability for monitortype is not null\"]=response.data.performance_details[monitor_type].availability.length>0;\n    tests[\"tags\"] = responseBody.has(\"tags\");\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar critical_count = 0;\nvar trouble_count = 0;\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\nlet monitor_type = pm.environment.get(\"MONTYPE\");\nconsole.log(\"MONTYPE = \" + monitor_type);\n\n// Summary details validation\npm.test(\"Summary details validation\", function() {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        pm.test(\"down_count\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"down_count\").that.is.not.null;\n        });\n        pm.test(\"downtime_duration\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"downtime_duration\").that.is.not.null;\n        });\n        pm.test(\"availability_percentage\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"availability_percentage\").that.is.not.null;\n        });\n        pm.test(\"mtbf\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"mtbf\").that.is.not.null;\n        });\n        pm.test(\"unmanaged_duration\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\").that.is.not.null;\n        });\n        pm.test(\"alarm_count\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"alarm_count\").that.is.not.null;\n        });\n        pm.test(\"mttr\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"mttr\").that.is.not.null;\n        });\n        pm.test(\"maintenance_percentage\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\").that.is.not.null;\n        });\n        pm.test(\"maintenance_duration\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\").that.is.not.null;\n        });\n        pm.test(\"availability_duration\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"availability_duration\").that.is.not.null;\n        });\n        pm.test(\"unmanaged_percentage\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\").that.is.not.null;\n        });\n        pm.test(\"downtime_percentage\", function() {\n            pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\").that.is.not.null;\n        });\n        if (critical_required) {\n            pm.test(\"critical_percentage\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"critical_percentage\").that.is.not.null;\n            });\n            pm.test(\"critical_count\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"critical_count\").that.is.not.null;\n            });\n            pm.test(\"critical_duration\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"critical_duration\").that.is.not.null;\n            });\n        }\n        if (trouble_required) {\n            pm.test(\"trouble_percentage\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"trouble_percentage\").that.is.not.null;\n            });\n            pm.test(\"trouble_count\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"trouble_count\").that.is.not.null;\n            });\n            pm.test(\"trouble_duration\", function() {\n                pm.expect(nr.summary_details).to.have.property(\"trouble_duration\").that.is.not.null;\n            });\n        }\n    } else {\n        pm.test(\"summary_details is missing\", function() {\n            pm.expect(nr).to.have.property(\"summary_details\");\n        });\n    }\n});\n\n// Info data validation\npm.test(\"Info data validation\", function() {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.test(\"resource_name\", function() {\n            pm.expect(nr.info).to.have.property(\"resource_name\");\n        });\n        pm.test(\"end_time\", function() {\n            pm.expect(nr.info).to.have.property(\"end_time\");\n        });\n        pm.test(\"resource_type_name is Group\", function() {\n            pm.expect(nr.info.resource_type_name).to.eql(\"Group\");\n        });\n        pm.test(\"report_name\", function() {\n            pm.expect(nr.info).to.have.property(\"report_name\");\n        });\n        pm.test(\"period_name\", function() {\n            pm.expect(nr.info).to.have.property(\"period_name\");\n        });\n        pm.test(\"formatted_start_time\", function() {\n            pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        });\n        pm.test(\"generated_time\", function() {\n            pm.expect(nr.info).to.have.property(\"generated_time\");\n        });\n        pm.test(\"formatted_end_time\", function() {\n            pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        });\n        pm.test(\"segment_type\", function() {\n            pm.expect(nr.info).to.have.property(\"segment_type\");\n        });\n        pm.test(\"start_time\", function() {\n            pm.expect(nr.info).to.have.property(\"start_time\");\n        });\n        pm.test(\"resource type is 1\", function() {\n            pm.expect(nr.info.resource_type).to.eql(1);\n        });\n        pm.test(\"period\", function() {\n            pm.expect(nr.info).to.have.property(\"period\");\n        });\n        pm.test(\"formatted_generated_time\", function() {\n            pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        });\n        pm.test(\"report_type\", function() {\n            pm.expect(nr.info).to.have.property(\"report_type\");\n        });\n        pm.test(\"segment_type_name\", function() {\n            pm.expect(nr.info).to.have.property(\"segment_type_name\");\n        });\n    } else {\n        pm.test(\"info is missing\", function() {\n            pm.expect(nr).to.have.property(\"info\");\n        });\n    }\n});\n\n// Outage data validation\npm.test(\"Outage data validation\", function() {\n    if (nr.hasOwnProperty(\"outage_details\") && nr.outage_details.length > 0) {\n        if (nr.summary_details.alarm_count > 0) {\n            pm.test(\"outages are present\", function() {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            });\n            pm.test(\"monitor_id\", function() {\n                pm.expect(nr.outage_details[0]).to.have.property(\"monitor_id\");\n            });\n            if (nr.outage_details[0].hasOwnProperty(\"outages\") && nr.outage_details[0].outages !== null) {\n                pm.test(\"outage_id\", function() {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\").that.is.not.null;\n                });\n                pm.test(\"end_time\", function() {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\").that.is.not.null;\n                });\n                pm.test(\"type\", function() {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\").that.is.not.null;\n                });\n                pm.test(\"start_time\", function() {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\").that.is.not.null;\n                });\n                pm.test(\"duration\", function() {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\").that.is.not.null;\n                });\n            } else {\n                pm.test(\"outages node is missing\", function() {\n                    pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n                });\n            }\n        }\n        if (critical_required) {\n            critical_count = nr.summary_details.critical_count;\n        }\n        if (trouble_required) {\n            trouble_count = nr.summary_details.trouble_count;\n        }\n        if (trouble_count >= 0 && critical_count >= 0) {\n            var totalCount = nr.summary_details.down_count + critical_count + trouble_count;\n            var outages_count = 0;\n            for (var i = 0; i < nr.outage_details.length; i++) {\n                outages_count += nr.outage_details[i].outages.length;\n            }\n            console.log(\"totalcount=\" + totalCount + \"::outages length=\" + outages_count);\n            var result = (totalCount == outages_count);\n            pm.test(\"Outages count matches critical and Trouble option\", function() {\n                pm.expect(result).to.be.true;\n            });\n        }\n    } else {\n        if (nr.summary_details.alarm_count > 0) {\n            pm.test(\"outage_details node is missing\", function() {\n                pm.expect(nr).to.have.property(\"outage_details\");\n            });\n        }\n    }\n});\n\n// Performance details validation\npm.test(\"Performance details validation\", function() {\n    if (nr.hasOwnProperty(\"performance_details\")) {\n        pm.test(\"performance_details_\" + monitor_type, function() {\n            pm.expect(nr.performance_details).to.have.property(monitor_type);\n        });\n        pm.test(\"name attribute for monitortype is not null\", function() {\n            pm.expect(nr.performance_details[monitor_type].name.length).to.be.greaterThan(0);\n        });\n        pm.test(\"attribute_data for monitortype is not null\", function() {\n            pm.expect(nr.performance_details[monitor_type].attribute_data.length).to.be.greaterThan(0);\n        });\n        pm.test(\"availability for monitortype is not null\", function() {\n            pm.expect(nr.performance_details[monitor_type].availability.length).to.be.greaterThan(0);\n        });\n        let tags_required = pm.environment.get(\"tags_required\");\n        if (tags_required) {\n            pm.test(\"tags\", function() {\n                pm.expect(nr.performance_details).to.have.property(\"tags\");\n            });\n        } else {\n            pm.test(\"tags node is missing\", function() {\n                pm.expect(nr.performance_details).to.have.property(\"tags\");\n            });\n        }\n    } else {\n        pm.test(\"performance_details node is missing\", function() {\n            pm.expect(nr).to.have.property(\"performance_details\");\n        });\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\nvar critical_count=0;\nvar trouble_count=0;\nlet critical_required=pm.environment.get(\"critical_required\");\n\nlet trouble_required=pm.environment.get(\"trouble_required\");\nlet monitor_type=pm.environment.get(\"MONTYPE\");\nconsole.log(\"MONTYPE = \"+monitor_type);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    if(critical_required)\n    {\n        tests[\"critical_percentage\"]=responseBody.has(\"critical_percentage\") && (responseBody.critical_percentage!==null);\n        tests[\"critical_count\"]=responseBody.has(\"critical_count\") && (responseBody.critical_count!==null);\n        tests[\"critical_duration\"]=responseBody.has(\"critical_duration\") && (responseBody.critical_duration!==null);\n\n    }\n    if(trouble_required)\n    {\n        tests[\"trouble_percentage\"]=responseBody.has(\"trouble_percentage\") && (responseBody.trouble_percentage!==null);\n        tests[\"trouble_count\"]=responseBody.has(\"trouble_count\") && (responseBody.trouble_count!==null);\n        tests[\"trouble_duration\"]=responseBody.has(\"trouble_duration\") && (responseBody.trouble_duration!==null);\n\n    }\n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'Tag';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===3);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\n\nif(responseBody.has(\"outage_details\") && response.data.outage_details.length>0)\n{\n    if(response.data.summary_details.alarm_count > 0)\n    {tests[\"outages are present\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    }\n    \n    if(critical_required)\n    {\n        critical_count=response.data.summary_details.critical_count;\n    }    \n    \n    if(trouble_required)\n    {\n        trouble_count = response.data.summary_details.trouble_count;\n    }\n    \n    if(trouble_count>=0 && critical_count>=0)\n    {\n        var totalCount = response.data.summary_details.down_count+critical_count+trouble_count;\n        var outages_count=0;\n        for(var i=0;i<+response.data.outage_details.length;i++)\n        {\n            outages_count+=response.data.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\"+totalCount+\"::outages length=\"+outages_count);\n        var result= (totalCount==outages_count);\n        tests[\"Outages count matches critical and Trouble option\"] = result ;\n    }\n       \n}\nelse\n{\n    if(response.data.summary_details.alarm_count>0)\n    {\n    tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\");\n    }\n    // Else if there is no outage then empty Outage tab is perfectly fine.\n}\n//performance_details\n// This will check if the basic URL monitorType is present or not.\n// We will have URL specified in the environment variables to make this easier to test\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"performance_details\"+\"_\"+monitor_type] = responseBody.has(monitor_type) ;\n    tests[\"name attribute for monitortype is not null\"]=response.data.performance_details[monitor_type].name.length>0;\n    tests[\"attribute_data for monitortype is not null\"]=response.data.performance_details[monitor_type].attribute_data.length>0;\n    tests[\"availability for monitortype is not null\"]=response.data.performance_details[monitor_type].availability.length>0;\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar critical_count = 0;\nvar trouble_count = 0;\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\nlet monitor_type = pm.environment.get(\"MONTYPE\");\nconsole.log(\"MONTYPE = \" + monitor_type);\n\n// Summary details validation\npm.test(\"summary_details validation\", function () {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        pm.test(\"down_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"down_count\").that.is.not.null;\n        });\n        pm.test(\"downtime_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"downtime_duration\").that.is.not.null;\n        });\n        pm.test(\"availability_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"availability_percentage\").that.is.not.null;\n        });\n        pm.test(\"mtbf\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"mtbf\").that.is.not.null;\n        });\n        pm.test(\"unmanaged_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\").that.is.not.null;\n        });\n        pm.test(\"alarm_count\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"alarm_count\").that.is.not.null;\n        });\n        pm.test(\"mttr\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"mttr\").that.is.not.null;\n        });\n        pm.test(\"maintenance_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\").that.is.not.null;\n        });\n        pm.test(\"maintenance_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\").that.is.not.null;\n        });\n        pm.test(\"availability_duration\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"availability_duration\").that.is.not.null;\n        });\n        pm.test(\"unmanaged_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\").that.is.not.null;\n        });\n        pm.test(\"downtime_percentage\", function () {\n            pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\").that.is.not.null;\n        });\n\n        if (critical_required) {\n            pm.test(\"critical_percentage\", function () {\n                pm.expect(nr.summary_details).to.have.property(\"critical_percentage\").that.is.not.null;\n            });\n            pm.test(\"critical_count\", function () {\n                pm.expect(nr.summary_details).to.have.property(\"critical_count\").that.is.not.null;\n            });\n            pm.test(\"critical_duration\", function () {\n                pm.expect(nr.summary_details).to.have.property(\"critical_duration\").that.is.not.null;\n            });\n        }\n\n        if (trouble_required) {\n            pm.test(\"trouble_percentage\", function () {\n                pm.expect(nr.summary_details).to.have.property(\"trouble_percentage\").that.is.not.null;\n            });\n            pm.test(\"trouble_count\", function () {\n                pm.expect(nr.summary_details).to.have.property(\"trouble_count\").that.is.not.null;\n            });\n            pm.test(\"trouble_duration\", function () {\n                pm.expect(nr.summary_details).to.have.property(\"trouble_duration\").that.is.not.null;\n            });\n        }\n    } else {\n        pm.test(\"summary_details is missing\", function () {\n            pm.expect(nr).to.have.property(\"summary_details\");\n        });\n    }\n});\n\n// Info data validation\npm.test(\"info validation\", function () {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.test(\"resource_name\", function () {\n            pm.expect(nr.info).to.have.property(\"resource_name\");\n        });\n        pm.test(\"end_time\", function () {\n            pm.expect(nr.info).to.have.property(\"end_time\");\n        });\n        pm.test(\"resource_type_name is Tag\", function () {\n            pm.expect(nr.info.resource_type_name).to.eql(\"Tag\");\n        });\n        pm.test(\"report_name\", function () {\n            pm.expect(nr.info).to.have.property(\"report_name\");\n        });\n        pm.test(\"period_name\", function () {\n            pm.expect(nr.info).to.have.property(\"period_name\");\n        });\n        pm.test(\"formatted_start_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        });\n        pm.test(\"generated_time\", function () {\n            pm.expect(nr.info).to.have.property(\"generated_time\");\n        });\n        pm.test(\"formatted_end_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        });\n        pm.test(\"segment_type\", function () {\n            pm.expect(nr.info).to.have.property(\"segment_type\");\n        });\n        pm.test(\"start_time\", function () {\n            pm.expect(nr.info).to.have.property(\"start_time\");\n        });\n        pm.test(\"resource type is 3\", function () {\n            pm.expect(nr.info.resource_type).to.eql(3);\n        });\n        pm.test(\"period\", function () {\n            pm.expect(nr.info).to.have.property(\"period\");\n        });\n        pm.test(\"formatted_generated_time\", function () {\n            pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        });\n        pm.test(\"report_type\", function () {\n            pm.expect(nr.info).to.have.property(\"report_type\");\n        });\n        pm.test(\"segment_type_name\", function () {\n            pm.expect(nr.info).to.have.property(\"segment_type_name\");\n        });\n    } else {\n        pm.test(\"info is missing\", function () {\n            pm.expect(nr).to.have.property(\"info\");\n        });\n    }\n});\n\n// Outage data validation\npm.test(\"outage_details validation\", function () {\n    if (nr.hasOwnProperty(\"outage_details\") && nr.outage_details.length > 0) {\n        if (nr.summary_details.alarm_count > 0) {\n            pm.test(\"outages are present\", function () {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            });\n            pm.test(\"monitor_id\", function () {\n                pm.expect(nr.outage_details[0]).to.have.property(\"monitor_id\");\n            });\n            if (nr.outage_details[0].hasOwnProperty(\"outages\") && nr.outage_details[0].outages !== null) {\n                pm.test(\"outage_id\", function () {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\").that.is.not.null;\n                });\n                pm.test(\"end_time\", function () {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\").that.is.not.null;\n                });\n                pm.test(\"type\", function () {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\").that.is.not.null;\n                });\n                pm.test(\"start_time\", function () {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\").that.is.not.null;\n                });\n                pm.test(\"duration\", function () {\n                    pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\").that.is.not.null;\n                });\n            } else {\n                pm.test(\"outages node is missing\", function () {\n                    pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n                });\n            }\n        }\n\n        if (critical_required) {\n            critical_count = nr.summary_details.critical_count;\n        }\n\n        if (trouble_required) {\n            trouble_count = nr.summary_details.trouble_count;\n        }\n\n        if (trouble_count >= 0 && critical_count >= 0) {\n            var totalCount = nr.summary_details.down_count + critical_count + trouble_count;\n            var outages_count = 0;\n            for (var i = 0; i < nr.outage_details.length; i++) {\n                outages_count += nr.outage_details[i].outages.length;\n            }\n            console.log(\"totalcount=\" + totalCount + \"::outages length=\" + outages_count);\n            var result = (totalCount == outages_count);\n            pm.test(\"Outages count matches critical and Trouble option\", function () {\n                pm.expect(result).to.be.true;\n            });\n        }\n    } else {\n        if (nr.summary_details.alarm_count > 0) {\n            pm.test(\"outage_details node is missing\", function () {\n                pm.expect(nr).to.have.property(\"outage_details\");\n            });\n        }\n    }\n});\n\n// Performance details\npm.test(\"performance_details validation\", function () {\n    if (nr.hasOwnProperty(\"performance_details\")) {\n        pm.test(\"performance_details_\" + monitor_type, function () {\n            pm.expect(nr.performance_details).to.have.property(monitor_type);\n        });\n        pm.test(\"name attribute for monitortype is not null\", function () {\n            pm.expect(nr.performance_details[monitor_type].name).to.not.be.empty;\n        });\n        pm.test(\"attribute_data for monitortype is not null\", function () {\n            pm.expect(nr.performance_details[monitor_type].attribute_data).to.not.be.empty;\n        });\n        pm.test(\"availability for monitortype is not null\", function () {\n            pm.expect(nr.performance_details[monitor_type].availability).to.not.be.empty;\n        });\n    } else {\n        pm.test(\"performance_details node is missing\", function () {\n            pm.expect(nr).to.have.property(\"performance_details\");\n        });}\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\nvar critical_count=0;\nvar trouble_count=0;\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nlet monitor_type=pm.environment.get(\"MONTYPE\");\nconsole.log(\"MONTYPE = \"+monitor_type);\n\n//Summary deatails validation\nif ( responseBody.has(\"summary_details\"))\n{\n    tests[\"down_count\"] = responseBody.has(\"down_count\") && (responseBody.down_count !== null);\n    tests[\"downtime_duration\"] = responseBody.has(\"downtime_duration\") && (responseBody.downtime_duration !== null);\n    tests[\"availability_percentage\"] = responseBody.has(\"availability_percentage\") && (responseBody.availability_percentage !== null);\n    tests[\"mtbf\"] = responseBody.has(\"mtbf\") && (responseBody.mtbf !== null);\n    tests[\"unmanaged_duration\"] = responseBody.has(\"unmanaged_duration\") && (responseBody.unmanaged_duration !== null);\n    tests[\"alarm_count\"] = responseBody.has(\"alarm_count\") && (responseBody.alarm_count !== null);\n    tests[\"mttr\"] = responseBody.has(\"mttr\") && (responseBody.mttr !== null);\n    tests[\"maintenance_percentage\"] = responseBody.has(\"maintenance_percentage\") && (responseBody.maintenance_percentage !== null);\n    tests[\"maintenance_duration\"] = responseBody.has(\"maintenance_duration\") && (responseBody.maintenance_duration !== null);\n    tests[\"availability_duration\"] = responseBody.has(\"availability_duration\") && (responseBody.availability_duration !== null);\n    tests[\"unmanaged_percentage\"] = responseBody.has(\"unmanaged_percentage\") && (responseBody.unmanaged_percentage !== null);\n    tests[\"downtime_percentage\"] = responseBody.has(\"downtime_percentage\") && (responseBody.downtime_percentage !== null);\n    if(critical_required)\n    {\n        tests[\"critical_percentage\"]=responseBody.has(\"critical_percentage\") && (responseBody.critical_percentage!==null);\n        tests[\"critical_count\"]=responseBody.has(\"critical_count\") && (responseBody.critical_count!==null);\n        tests[\"critical_duration\"]=responseBody.has(\"critical_duration\") && (responseBody.critical_duration!==null);\n\n    }\n    if(trouble_required)\n    {\n        tests[\"trouble_percentage\"]=responseBody.has(\"trouble_percentage\") && (responseBody.trouble_percentage!==null);\n        tests[\"trouble_count\"]=responseBody.has(\"trouble_count\") && (responseBody.trouble_count!==null);\n        tests[\"trouble_duration\"]=responseBody.has(\"trouble_duration\") && (responseBody.trouble_duration!==null);\n\n    }\n}\nelse\n{tests[\"summary_details is missing\"] = responseBody.has(\"summary_details\") ;}\n\n\n// Info data validation\nif(responseBody.has(\"info\"))\n{\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests['resource_type_name'] = response.data.info.resource_type_name == 'All Monitors';\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"segment_type\"] = responseBody.has(\"segment_type\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests['resource type'] = (response.data.info.resource_type===0);\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"segment_type_name\"] = responseBody.has(\"segment_type_name\");\n}\nelse\n{tests[\"info is missing\"] = responseBody.has(\"info\");}\n\n//Outage data validation\n\n\nif(responseBody.has(\"outage_details\") && response.data.outage_details.length>0)\n{\n    if(response.data.summary_details.alarm_count > 0)\n    {tests[\"outages are present\"] = responseBody.has(\"outages\");\n    tests[\"monitor_id\"] = responseBody.has(\"monitor_id\");\n     if(responseBody.outages !== null)\n       { tests[\"outage_id\"] = responseBody.has(\"outage_id\") && response.data.outage_details[0].outages[0].outage_id !==null;\n         tests[\"end_time\"] = responseBody.has(\"end_time\") && response.data.outage_details[0].outages[0].end_time !==null;\n         tests[\"type\"] = responseBody.has(\"type\") && response.data.outage_details[0].outages[0].type !==null;\n         tests[\"start_time\"] = responseBody.has(\"start_time\") && response.data.outage_details[0].outages[0].start_time !==null;\n         tests[\"duration\"] = responseBody.has(\"duration\") && response.data.outage_details[0].outages[0].duration !==null;\n        }\n       \n        else\n        {tests[\"outages node is missing\"] = responseBody.has(\"outages\") ;\n            \n        }\n    }\n    \n    /*\n    \n    Due to data issue, skipping this for all monitors usecase\n    if(critical_required)\n    {\n        critical_count=response.data.summary_details.critical_count;\n    }    \n    \n    if(trouble_required)\n    {\n        trouble_count = response.data.summary_details.trouble_count;\n    }\n    \n    if(trouble_count>=0 && critical_count>=0)\n    {\n        var totalCount = response.data.summary_details.down_count+response.data.summary_details.trouble_count+response.data.summary_details.critical_count;\n        var outages_count=0;\n        for(var i=0;i<+response.data.outage_details.length;i++)\n        {\n            outages_count+=response.data.outage_details[i].outages.length;\n        }\n        console.log(\"totalcount=\"+totalCount+\"::outages length=\"+outages_count);\n        var result= (totalCount==outages_count);\n        tests[\"Outages count matches critical and Trouble option\"] = result ;\n    }*/\n       \n}\nelse\n{\n    if(response.data.summary_details.alarm_count>0)\n    {\n    tests[\"outage_details node is missing\"] = responseBody.has(\"outage_details\");\n    }\n    // Else if there is no outage then empty Outage tab is perfectly fine.\n}\n//performance_details\n// This will check if the basic URL monitorType is present or not.\n// We will have URL specified in the environment variables to make this easier to test\nif(responseBody.has(\"performance_details\"))\n{\n    tests[\"performance_details\"+\"_\"+monitor_type] = responseBody.has(monitor_type) ;\n    tests[\"name attribute for monitortype is not null\"]=response.data.performance_details[monitor_type].name.length>0;\n    tests[\"attribute_data for monitortype is not null\"]=response.data.performance_details[monitor_type].attribute_data.length>0;\n    tests[\"availability for monitortype is not null\"]=response.data.performance_details[monitor_type].availability.length>0;\n    tests[\"tags\"] = responseBody.has(\"tags\");\n}\nelse\n{tests[\"performance_details node is missing\"] = responseBody.has(\"performance_details\") ;}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\nvar critical_count = 0;\nvar trouble_count = 0;\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\nlet monitor_type = pm.environment.get(\"MONTYPE\");\nconsole.log(\"MONTYPE = \" + monitor_type);\n\n// Summary details validation\npm.test(\"Summary details validation\", function() {\n    if (nr.hasOwnProperty(\"summary_details\")) {\n        pm.expect(nr.summary_details).to.have.property(\"down_count\").that.is.not.null;\n        pm.expect(nr.summary_details).to.have.property(\"downtime_duration\").that.is.not.null;\n        pm.expect(nr.summary_details).to.have.property(\"availability_percentage\").that.is.not.null;\n        pm.expect(nr.summary_details).to.have.property(\"mtbf\").that.is.not.null;\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_duration\").that.is.not.null;\n        pm.expect(nr.summary_details).to.have.property(\"alarm_count\").that.is.not.null;\n        pm.expect(nr.summary_details).to.have.property(\"mttr\").that.is.not.null;\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_percentage\").that.is.not.null;\n        pm.expect(nr.summary_details).to.have.property(\"maintenance_duration\").that.is.not.null;\n        pm.expect(nr.summary_details).to.have.property(\"availability_duration\").that.is.not.null;\n        pm.expect(nr.summary_details).to.have.property(\"unmanaged_percentage\").that.is.not.null;\n        pm.expect(nr.summary_details).to.have.property(\"downtime_percentage\").that.is.not.null;\n        if (critical_required) {\n            pm.expect(nr.summary_details).to.have.property(\"critical_percentage\").that.is.not.null;\n            pm.expect(nr.summary_details).to.have.property(\"critical_count\").that.is.not.null;\n            pm.expect(nr.summary_details).to.have.property(\"critical_duration\").that.is.not.null;\n        }\n        if (trouble_required) {\n            pm.expect(nr.summary_details).to.have.property(\"trouble_percentage\").that.is.not.null;\n            pm.expect(nr.summary_details).to.have.property(\"trouble_count\").that.is.not.null;\n            pm.expect(nr.summary_details).to.have.property(\"trouble_duration\").that.is.not.null;\n        }\n    } else {\n        pm.expect(nr).to.have.property(\"summary_details\");\n    }\n});\n\n// Info data validation\npm.test(\"Info data validation\", function() {\n    if (nr.hasOwnProperty(\"info\")) {\n        pm.expect(nr.info).to.have.property(\"end_time\");\n        pm.expect(nr.info.resource_type_name).to.equal('All Monitors');\n        pm.expect(nr.info).to.have.property(\"report_name\");\n        pm.expect(nr.info).to.have.property(\"period_name\");\n        pm.expect(nr.info).to.have.property(\"formatted_start_time\");\n        pm.expect(nr.info).to.have.property(\"generated_time\");\n        pm.expect(nr.info).to.have.property(\"formatted_end_time\");\n        pm.expect(nr.info).to.have.property(\"segment_type\");\n        pm.expect(nr.info).to.have.property(\"start_time\");\n        pm.expect(nr.info.resource_type).to.equal(0);\n        pm.expect(nr.info).to.have.property(\"period\");\n        pm.expect(nr.info).to.have.property(\"formatted_generated_time\");\n        pm.expect(nr.info).to.have.property(\"report_type\");\n        pm.expect(nr.info).to.have.property(\"segment_type_name\");\n    } else {\n        pm.expect(nr).to.have.property(\"info\");\n    }\n});\n\n// Outage data validation\npm.test(\"Outage data validation\", function() {\n    if (nr.hasOwnProperty(\"outage_details\") && nr.outage_details.length > 0) {\n        if (nr.summary_details.alarm_count > 0) {\n            pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            pm.expect(nr.outage_details[0]).to.have.property(\"monitor_id\");\n            if (nr.outage_details[0].outages !== null) {\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"outage_id\").that.is.not.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"end_time\").that.is.not.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"type\").that.is.not.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"start_time\").that.is.not.null;\n                pm.expect(nr.outage_details[0].outages[0]).to.have.property(\"duration\").that.is.not.null;\n            } else {\n                pm.expect(nr.outage_details[0]).to.have.property(\"outages\");\n            }\n        }\n    } else {\n        if (nr.summary_details.alarm_count > 0) {\n            pm.expect(nr).to.have.property(\"outage_details\");\n        }\n    }\n});\n\n// Performance details validation\npm.test(\"Performance details validation\", function() {\n    if (nr.hasOwnProperty(\"performance_details\")) {\n        pm.expect(nr.performance_details).to.have.property(monitor_type);\n        pm.expect(nr.performance_details[monitor_type].name).to.have.lengthOf.at.least(1);\n        pm.expect(nr.performance_details[monitor_type].attribute_data).to.have.lengthOf.at.least(1);\n        pm.expect(nr.performance_details[monitor_type].availability).to.have.lengthOf.at.least(1);\n        pm.expect(nr.performance_details).to.have.property(\"tags\");\n    } else {\n        pm.expect(nr).to.have.property(\"performance_details\");\n    }\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 11){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==0);\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 11){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    if(trouble_required)\n                    {\n                        tests[\"trouble_percentage\"] = (jsonData.data.summary_details.trouble_percentage !== null);\n                        tests[\"trouble_duration\"] = (jsonData.data.summary_details.trouble_duration !== null);\n                        tests[\"trouble_count\"] = (jsonData.data.summary_details.trouble_count !== null);\n                    }\n                    \n                    if(critical_required)\n                    {\n                        tests[\"critical_percentage\"] = (jsonData.data.summary_details.critical_percentage !== null);\n                        tests[\"critical_duration\"] = (jsonData.data.summary_details.critical_duration !== null);\n                        tests[\"critical_count\"] = (jsonData.data.summary_details.critical_count !== null);  \n                    }\n            }else{\n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "let response = pm.response.json();\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\nif (response.code === 0) {\n    if (response.error === undefined) {\n        pm.test(\"Status code is 200\", function() {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.test(\"code\", function() {\n            pm.expect(response.code).to.equal(0);\n        });\n        pm.test(\"message\", function() {\n            pm.expect(response.message).to.equal(\"success\");\n        });\n        \n        let nr = response.data || {};\n        if (Object.keys(nr).length > 0) {\n            if (nr.info) {\n                let infoKeys = Object.keys(nr.info);\n                \n                pm.test('info ', function() {\n                    pm.expect(infoKeys.length).to.equal(11);\n                });\n                pm.test('monitor_count', function() {\n                    pm.expect(nr.info.monitor_count).to.exist;\n                });\n                pm.test('resource type', function() {\n                    pm.expect(nr.info.resource_type).to.equal(0);\n                });\n                pm.test('formatted_generated_time', function() {\n                    pm.expect(nr.info.formatted_generated_time).to.exist;\n                });\n                pm.test('period', function() {\n                    pm.expect(nr.info.period).to.exist;\n                });\n                pm.test('start_time', function() {\n                    pm.expect(nr.info.start_time).to.exist;\n                });\n                pm.test('generated_time', function() {\n                    pm.expect(nr.info.generated_time).to.exist;\n                });\n                pm.test('formatted_end_time', function() {\n                    pm.expect(nr.info.formatted_end_time).to.exist;\n                });\n                pm.test('formatted_start_time', function() {\n                    pm.expect(nr.info.formatted_start_time).to.exist;\n                });\n                pm.test('period_name', function() {\n                    pm.expect(nr.info.period_name).to.exist;\n                });\n                pm.test('resource_type_name', function() {\n                    pm.expect(nr.info.resource_type_name).to.exist;\n                });\n                pm.test('end_time', function() {\n                    pm.expect(nr.info.end_time).to.exist;\n                });\n\n                pm.test('new attribute added to info', function() {\n                    pm.expect(infoKeys.length).to.be.at.most(11);\n                });\n                pm.test('attribute removed from info', function() {\n                    pm.expect(infoKeys.length).to.be.at.least(11);\n                });\n            } else {\n                pm.test('info', function() {\n                    pm.expect(nr.info).to.exist;\n                });\n            }\n\n            if (nr.summary_details) {\n                pm.test(\"summary_details \", function() {\n                    pm.expect(nr.summary_details).to.exist;\n                });\n                pm.test(\"down_count\", function() {\n                    pm.expect(nr.summary_details.down_count).to.not.be.null;\n                });\n                pm.test(\"downtime_duration\", function() {\n                    pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n                });\n                pm.test(\"availability_percentage\", function() {\n                    pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n                });\n                pm.test(\"mtbf\", function() {\n                    pm.expect(nr.summary_details.mtbf).to.not.be.null;\n                });\n                pm.test(\"unmanaged_duration\", function() {\n                    pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n                });\n                pm.test(\"mttr\", function() {\n                    pm.expect(nr.summary_details.mttr).to.not.be.null;\n                });\n                pm.test(\"maintenance_percentage\", function() {\n                    pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n                });\n                pm.test(\"maintenance_duration\", function() {\n                    pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n                });\n                pm.test(\"availability_duration\", function() {\n                    pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n                });\n                pm.test(\"unmanaged_percentage\", function() {\n                    pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n                });\n                pm.test(\"downtime_percentage\", function() {\n                    pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n                });\n\n                if (trouble_required) {\n                    pm.test(\"trouble_percentage\", function() {\n                        pm.expect(nr.summary_details.trouble_percentage).to.not.be.null;\n                    });\n                    pm.test(\"trouble_duration\", function() {\n                        pm.expect(nr.summary_details.trouble_duration).to.not.be.null;\n                    });\n                    pm.test(\"trouble_count\", function() {\n                        pm.expect(nr.summary_details.trouble_count).to.not.be.null;\n                    });\n                }\n\n                if (critical_required) {\n                    pm.test(\"critical_percentage\", function() {\n                        pm.expect(nr.summary_details.critical_percentage).to.not.be.null;\n                    });\n                    pm.test(\"critical_duration\", function() {\n                        pm.expect(nr.summary_details.critical_duration).to.not.be.null;\n                    });\n                    pm.test(\"critical_count\", function() {\n                        pm.expect(nr.summary_details.critical_count).to.not.be.null;\n                    });\n                }\n            } else {\n                pm.test(\"summary_details is missing\", function() {\n                    pm.expect(nr.summary_details).to.exist;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 14){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==2);\n                    tests['monitor_type'] = jsonData.data.info.monitor_type;\n                    tests['resource_id'] = jsonData.data.info.resource_id;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 14){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    if(trouble_required)\n                    {\n                        tests[\"trouble_percentage\"] = (jsonData.data.summary_details.trouble_percentage !== null);\n                        tests[\"trouble_duration\"] = (jsonData.data.summary_details.trouble_duration !== null);\n                        tests[\"trouble_count\"] = (jsonData.data.summary_details.trouble_count !== null);\n                    }\n                    \n                    if(critical_required)\n                    {\n                        tests[\"critical_percentage\"] = (jsonData.data.summary_details.critical_percentage !== null);\n                        tests[\"critical_duration\"] = (jsonData.data.summary_details.critical_duration !== null);\n                        tests[\"critical_count\"] = (jsonData.data.summary_details.critical_count !== null);  \n                    }\n            }else{\n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "let critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\nlet response = pm.response.json();\nlet nr = response.data || {};\n\nif (response.code === 0) {\n    if (!response.hasOwnProperty('error')) {\n        pm.test(\"Status code is 200\", function () {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n\n        pm.test(\"code\", function () {\n            pm.expect(response.code).to.equal(0);\n        });\n\n        pm.test(\"message\", function () {\n            pm.expect(response.message).to.equal(\"success\");\n        });\n\n        if (Object.keys(nr).length > 0) {\n            if (nr.hasOwnProperty('info')) {\n                if (Object.keys(nr.info).length === 14) {\n                    pm.test('info ', function () {\n                        pm.expect(true).to.be.true;\n                    });\n                    pm.test('monitor_count', function () {\n                        pm.expect(nr.info.monitor_count).to.exist;\n                    });\n                    pm.test('resource type', function () {\n                        pm.expect(nr.info.resource_type).to.equal(2);\n                    });\n                    pm.test('monitor_type', function () {\n                        pm.expect(nr.info.monitor_type).to.exist;\n                    });\n                    pm.test('resource_id', function () {\n                        pm.expect(nr.info.resource_id).to.exist;\n                    });\n                    pm.test('formatted_generated_time', function () {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n                    pm.test('period', function () {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n                    pm.test('start_time', function () {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n                    pm.test('generated_time', function () {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n                    pm.test('formatted_end_time', function () {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n                    pm.test('formatted_start_time', function () {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n                    pm.test('period_name', function () {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n                    pm.test('resource_type_name', function () {\n                        pm.expect(nr.info.resource_type_name).to.exist;\n                    });\n                    pm.test('resource_name', function () {\n                        pm.expect(nr.info.resource_name).to.exist;\n                    });\n                    pm.test('end_time', function () {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n                } else {\n                    pm.test('new attribute added to info', function () {\n                        pm.expect(Object.keys(nr.info).length > 14).to.be.false;\n                    });\n\n                    pm.test('attribute removed from info', function () {\n                        pm.expect(Object.keys(nr.info).length < 14).to.be.false;\n                    });\n                }\n            } else {\n                pm.test('info', function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (nr.hasOwnProperty('summary_details')) {\n                pm.test(\"summary_details \", function () {\n                    pm.expect(true).to.be.true;\n                });\n\n                pm.test(\"down_count\", function () {\n                    pm.expect(nr.summary_details.down_count).to.not.be.null;\n                });\n\n                pm.test(\"downtime_duration\", function () {\n                    pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n                });\n\n                pm.test(\"availability_percentage\", function () {\n                    pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n                });\n\n                pm.test(\"mtbf\", function () {\n                    pm.expect(nr.summary_details.mtbf).to.not.be.null;\n                });\n\n                pm.test(\"unmanaged_duration\", function () {\n                    pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n                });\n\n                pm.test(\"mttr\", function () {\n                    pm.expect(nr.summary_details.mttr).to.not.be.null;\n                });\n\n                pm.test(\"maintenance_percentage\", function () {\n                    pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n                });\n\n                pm.test(\"maintenance_duration\", function () {\n                    pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n                });\n\n                pm.test(\"availability_duration\", function () {\n                    pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n                });\n\n                pm.test(\"unmanaged_percentage\", function () {\n                    pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n                });\n\n                pm.test(\"downtime_percentage\", function () {\n                    pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n                });\n\n                if (trouble_required) {\n                    pm.test(\"trouble_percentage\", function () {\n                        pm.expect(nr.summary_details.trouble_percentage).to.not.be.null;\n                    });\n\n                    pm.test(\"trouble_duration\", function () {\n                        pm.expect(nr.summary_details.trouble_duration).to.not.be.null;\n                    });\n\n                    pm.test(\"trouble_count\", function () {\n                        pm.expect(nr.summary_details.trouble_count).to.not.be.null;\n                    });\n                }\n\n                if (critical_required) {\n                    pm.test(\"critical_percentage\", function () {\n                        pm.expect(nr.summary_details.critical_percentage).to.not.be.null;\n                    });\n\n                    pm.test(\"critical_duration\", function () {\n                        pm.expect(nr.summary_details.critical_duration).to.not.be.null;\n                    });\n\n                    pm.test(\"critical_count\", function () {\n                        pm.expect(nr.summary_details.critical_count).to.not.be.null;\n                    });\n                }\n            } else {\n                pm.test(\"summary_details is missing\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 13){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==1);\n                    tests['resource_id'] = jsonData.data.info.resource_id;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 13){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    if(trouble_required)\n                    {\n                        tests[\"trouble_percentage\"] = (jsonData.data.summary_details.trouble_percentage !== null);\n                        tests[\"trouble_duration\"] = (jsonData.data.summary_details.trouble_duration !== null);\n                        tests[\"trouble_count\"] = (jsonData.data.summary_details.trouble_count !== null);\n                    }\n                    \n                    if(critical_required)\n                    {\n                        tests[\"critical_percentage\"] = (jsonData.data.summary_details.critical_percentage !== null);\n                        tests[\"critical_duration\"] = (jsonData.data.summary_details.critical_duration !== null);\n                        tests[\"critical_count\"] = (jsonData.data.summary_details.critical_count !== null);  \n                    }\n            }else{\n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "let response = pm.response.json();\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\nif (response.code === 0) {\n    if (response.hasOwnProperty('error') === false) {\n        pm.test(\"Status code is 200\", function () {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.test(\"code\", function () {\n            pm.expect(response.code).to.equal(0);\n        });\n        pm.test(\"message\", function () {\n            pm.expect(response.message).to.equal(\"success\");\n        });\n\n        let nr = response.data || {};\n        if (Object.keys(nr).length > 0) {\n            if (nr.info) {\n                pm.test('info ', function () {\n                    pm.expect(Object.keys(nr.info).length).to.equal(13);\n                });\n\n                pm.test('monitor_count', function () {\n                    pm.expect(nr.info.monitor_count).to.exist;\n                });\n                pm.test('resource type', function () {\n                    pm.expect(nr.info.resource_type).to.equal(1);\n                });\n                pm.test('resource_id', function () {\n                    pm.expect(nr.info.resource_id).to.exist;\n                });\n                pm.test('formatted_generated_time', function () {\n                    pm.expect(nr.info.formatted_generated_time).to.exist;\n                });\n                pm.test('period', function () {\n                    pm.expect(nr.info.period).to.exist;\n                });\n                pm.test('start_time', function () {\n                    pm.expect(nr.info.start_time).to.exist;\n                });\n                pm.test('generated_time', function () {\n                    pm.expect(nr.info.generated_time).to.exist;\n                });\n                pm.test('formatted_end_time', function () {\n                    pm.expect(nr.info.formatted_end_time).to.exist;\n                });\n                pm.test('formatted_start_time', function () {\n                    pm.expect(nr.info.formatted_start_time).to.exist;\n                });\n                pm.test('period_name', function () {\n                    pm.expect(nr.info.period_name).to.exist;\n                });\n                pm.test('resource_type_name', function () {\n                    pm.expect(nr.info.resource_type_name).to.exist;\n                });\n                pm.test('resource_name', function () {\n                    pm.expect(nr.info.resource_name).to.exist;\n                });\n                pm.test('end_time', function () {\n                    pm.expect(nr.info.end_time).to.exist;\n                });\n\n                pm.test('new attribute added to info', function () {\n                    pm.expect(Object.keys(nr.info).length).to.be.at.most(13);\n                });\n                pm.test('attribute removed from info', function () {\n                    pm.expect(Object.keys(nr.info).length).to.be.at.least(13);\n                });\n            } else {\n                pm.test('info', function () {\n                    pm.expect(nr.info).to.exist;\n                });\n            }\n\n            if (nr.summary_details) {\n                pm.test(\"summary_details \", function () {\n                    pm.expect(nr.summary_details).to.exist;\n                });\n\n                pm.test(\"down_count\", function () {\n                    pm.expect(nr.summary_details.down_count).to.not.be.null;\n                });\n                pm.test(\"downtime_duration\", function () {\n                    pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n                });\n                pm.test(\"availability_percentage\", function () {\n                    pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n                });\n                pm.test(\"mtbf\", function () {\n                    pm.expect(nr.summary_details.mtbf).to.not.be.null;\n                });\n                pm.test(\"unmanaged_duration\", function () {\n                    pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n                });\n                pm.test(\"mttr\", function () {\n                    pm.expect(nr.summary_details.mttr).to.not.be.null;\n                });\n                pm.test(\"maintenance_percentage\", function () {\n                    pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n                });\n                pm.test(\"maintenance_duration\", function () {\n                    pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n                });\n                pm.test(\"availability_duration\", function () {\n                    pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n                });\n                pm.test(\"unmanaged_percentage\", function () {\n                    pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n                });\n                pm.test(\"downtime_percentage\", function () {\n                    pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n                });\n\n                if (trouble_required) {\n                    pm.test(\"trouble_percentage\", function () {\n                        pm.expect(nr.summary_details.trouble_percentage).to.not.be.null;\n                    });\n                    pm.test(\"trouble_duration\", function () {\n                        pm.expect(nr.summary_details.trouble_duration).to.not.be.null;\n                    });\n                    pm.test(\"trouble_count\", function () {\n                        pm.expect(nr.summary_details.trouble_count).to.not.be.null;\n                    });\n                }\n\n                if (critical_required) {\n                    pm.test(\"critical_percentage\", function () {\n                        pm.expect(nr.summary_details.critical_percentage).to.not.be.null;\n                    });\n                    pm.test(\"critical_duration\", function () {\n                        pm.expect(nr.summary_details.critical_duration).to.not.be.null;\n                    });\n                    pm.test(\"critical_count\", function () {\n                        pm.expect(nr.summary_details.critical_count).to.not.be.null;\n                    });\n                }\n            } else {\n                pm.test(\"summary_details is missing\", function () {\n                    pm.expect(nr.summary_details).to.exist;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 13){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==1);\n                    tests['resource_id'] = jsonData.data.info.resource_id;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 13){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    if(trouble_required)\n                    {\n                        tests[\"trouble_percentage\"] = (jsonData.data.summary_details.trouble_percentage !== null);\n                        tests[\"trouble_duration\"] = (jsonData.data.summary_details.trouble_duration !== null);\n                        tests[\"trouble_count\"] = (jsonData.data.summary_details.trouble_count !== null);\n                    }\n                    \n                    if(critical_required)\n                    {\n                        tests[\"critical_percentage\"] = (jsonData.data.summary_details.critical_percentage !== null);\n                        tests[\"critical_duration\"] = (jsonData.data.summary_details.critical_duration !== null);\n                        tests[\"critical_count\"] = (jsonData.data.summary_details.critical_count !== null);  \n                    }\n            }else{\n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "var response = pm.response.json();\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\nif (response.code === 0) {\n    if (response.error === undefined) {\n        pm.test(\"Status code is 200\", function () {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.test(\"code\", function () {\n            pm.expect(response.code).to.equal(0);\n        });\n        pm.test(\"message\", function () {\n            pm.expect(response.message).to.equal(\"success\");\n        });\n\n        let nr = response.data || {};\n        if (Object.keys(nr).length > 0) {\n            if (nr.info) {\n                if (Object.keys(nr.info).length == 13) {\n                    pm.test(\"info \", function () {\n                        pm.expect(true).to.be.true;\n                    });\n                    pm.test(\"monitor_count\", function () {\n                        pm.expect(nr.info.monitor_count).to.exist;\n                    });\n                    pm.test(\"resource type\", function () {\n                        pm.expect(nr.info.resource_type).to.equal(1);\n                    });\n                    pm.test(\"resource_id\", function () {\n                        pm.expect(nr.info.resource_id).to.exist;\n                    });\n                    pm.test(\"formatted_generated_time\", function () {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n                    pm.test(\"period\", function () {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n                    pm.test(\"start_time\", function () {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n                    pm.test(\"generated_time\", function () {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n                    pm.test(\"formatted_end_time\", function () {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n                    pm.test(\"formatted_start_time\", function () {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n                    pm.test(\"period_name\", function () {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n                    pm.test(\"resource_type_name\", function () {\n                        pm.expect(nr.info.resource_type_name).to.exist;\n                    });\n                    pm.test(\"resource_name\", function () {\n                        pm.expect(nr.info.resource_name).to.exist;\n                    });\n                    pm.test(\"end_time\", function () {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n                } else {\n                    if (Object.keys(nr.info).length > 13) {\n                        pm.test(\"new attribute added to info\", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"attribute removed from info\", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"info\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (nr.summary_details) {\n                pm.test(\"summary_details \", function () {\n                    pm.expect(true).to.be.true;\n                });\n                pm.test(\"down_count\", function () {\n                    pm.expect(nr.summary_details.down_count).not.to.be.null;\n                });\n                pm.test(\"downtime_duration\", function () {\n                    pm.expect(nr.summary_details.downtime_duration).not.to.be.null;\n                });\n                pm.test(\"availability_percentage\", function () {\n                    pm.expect(nr.summary_details.availability_percentage).not.to.be.null;\n                });\n                pm.test(\"mtbf\", function () {\n                    pm.expect(nr.summary_details.mtbf).not.to.be.null;\n                });\n                pm.test(\"unmanaged_duration\", function () {\n                    pm.expect(nr.summary_details.unmanaged_duration).not.to.be.null;\n                });\n                pm.test(\"mttr\", function () {\n                    pm.expect(nr.summary_details.mttr).not.to.be.null;\n                });\n                pm.test(\"maintenance_percentage\", function () {\n                    pm.expect(nr.summary_details.maintenance_percentage).not.to.be.null;\n                });\n                pm.test(\"maintenance_duration\", function () {\n                    pm.expect(nr.summary_details.maintenance_duration).not.to.be.null;\n                });\n                pm.test(\"availability_duration\", function () {\n                    pm.expect(nr.summary_details.availability_duration).not.to.be.null;\n                });\n                pm.test(\"unmanaged_percentage\", function () {\n                    pm.expect(nr.summary_details.unmanaged_percentage).not.to.be.null;\n                });\n                pm.test(\"downtime_percentage\", function () {\n                    pm.expect(nr.summary_details.downtime_percentage).not.to.be.null;\n                });\n\n                if (trouble_required) {\n                    pm.test(\"trouble_percentage\", function () {\n                        pm.expect(nr.summary_details.trouble_percentage).not.to.be.null;\n                    });\n                    pm.test(\"trouble_duration\", function () {\n                        pm.expect(nr.summary_details.trouble_duration).not.to.be.null;\n                    });\n                    pm.test(\"trouble_count\", function () {\n                        pm.expect(nr.summary_details.trouble_count).not.to.be.null;\n                    });\n                }\n\n                if (critical_required) {\n                    pm.test(\"critical_percentage\", function () {\n                        pm.expect(nr.summary_details.critical_percentage).not.to.be.null;\n                    });\n                    pm.test(\"critical_duration\", function () {\n                        pm.expect(nr.summary_details.critical_duration).not.to.be.null;\n                    });\n                    pm.test(\"critical_count\", function () {\n                        pm.expect(nr.summary_details.critical_count).not.to.be.null;\n                    });\n                }\n            } else {\n                pm.test(\"summary_details is missing\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 13){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==1);\n                    tests['resource_id'] = jsonData.data.info.resource_id;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 13){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    if(trouble_required)\n                    {\n                        tests[\"trouble_percentage\"] = (jsonData.data.summary_details.trouble_percentage !== null);\n                        tests[\"trouble_duration\"] = (jsonData.data.summary_details.trouble_duration !== null);\n                        tests[\"trouble_count\"] = (jsonData.data.summary_details.trouble_count !== null);\n                    }\n                    \n                    if(critical_required)\n                    {\n                        tests[\"critical_percentage\"] = (jsonData.data.summary_details.critical_percentage !== null);\n                        tests[\"critical_duration\"] = (jsonData.data.summary_details.critical_duration !== null);\n                        tests[\"critical_count\"] = (jsonData.data.summary_details.critical_count !== null);  \n                    }\n            }else{\n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "var response = pm.response.json();\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\nif (response.code === 0) {\n    if (response.error === undefined) {\n        pm.test(\"Status code is 200\", function () {\n            pm.expect(pm.response.code).to.eql(200);\n        });\n        pm.test(\"code\", function () {\n            pm.expect(response.code).to.eql(0);\n        });\n        pm.test(\"message\", function () {\n            pm.expect(response.message).to.eql(\"success\");\n        });\n\n        let nr = response.data || {};\n\n        if (Object.keys(nr).length > 0) {\n            if (nr.info) {\n                if (Object.keys(nr.info).length === 13) {\n                    pm.test('info ', function () {\n                        pm.expect(true).to.be.true;\n                    });\n                    pm.test('monitor_count', function () {\n                        pm.expect(nr.info.monitor_count).to.exist;\n                    });\n                    pm.test('resource type', function () {\n                        pm.expect(nr.info.resource_type).to.eql(1);\n                    });\n                    pm.test('resource_id', function () {\n                        pm.expect(nr.info.resource_id).to.exist;\n                    });\n                    pm.test('formatted_generated_time', function () {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n                    pm.test('period', function () {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n                    pm.test('start_time', function () {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n                    pm.test('generated_time', function () {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n                    pm.test('formatted_end_time', function () {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n                    pm.test('formatted_start_time', function () {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n                    pm.test('period_name', function () {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n                    pm.test('resource_type_name', function () {\n                        pm.expect(nr.info.resource_type_name).to.exist;\n                    });\n                    pm.test('resource_name', function () {\n                        pm.expect(nr.info.resource_name).to.exist;\n                    });\n                    pm.test('end_time', function () {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n                } else {\n                    if (Object.keys(nr.info).length > 13) {\n                        pm.test('new attribute added to info', function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test('attribute removed from info', function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test('info', function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (nr.summary_details) {\n                pm.test(\"summary_details \", function () {\n                    pm.expect(true).to.be.true;\n                });\n                pm.test(\"down_count\", function () {\n                    pm.expect(nr.summary_details.down_count).not.to.be.null;\n                });\n                pm.test(\"downtime_duration\", function () {\n                    pm.expect(nr.summary_details.downtime_duration).not.to.be.null;\n                });\n                pm.test(\"availability_percentage\", function () {\n                    pm.expect(nr.summary_details.availability_percentage).not.to.be.null;\n                });\n                pm.test(\"mtbf\", function () {\n                    pm.expect(nr.summary_details.mtbf).not.to.be.null;\n                });\n                pm.test(\"unmanaged_duration\", function () {\n                    pm.expect(nr.summary_details.unmanaged_duration).not.to.be.null;\n                });\n                pm.test(\"mttr\", function () {\n                    pm.expect(nr.summary_details.mttr).not.to.be.null;\n                });\n                pm.test(\"maintenance_percentage\", function () {\n                    pm.expect(nr.summary_details.maintenance_percentage).not.to.be.null;\n                });\n                pm.test(\"maintenance_duration\", function () {\n                    pm.expect(nr.summary_details.maintenance_duration).not.to.be.null;\n                });\n                pm.test(\"availability_duration\", function () {\n                    pm.expect(nr.summary_details.availability_duration).not.to.be.null;\n                });\n                pm.test(\"unmanaged_percentage\", function () {\n                    pm.expect(nr.summary_details.unmanaged_percentage).not.to.be.null;\n                });\n                pm.test(\"downtime_percentage\", function () {\n                    pm.expect(nr.summary_details.downtime_percentage).not.to.be.null;\n                });\n\n                if (trouble_required) {\n                    pm.test(\"trouble_percentage\", function () {\n                        pm.expect(nr.summary_details.trouble_percentage).not.to.be.null;\n                    });\n                    pm.test(\"trouble_duration\", function () {\n                        pm.expect(nr.summary_details.trouble_duration).not.to.be.null;\n                    });\n                    pm.test(\"trouble_count\", function () {\n                        pm.expect(nr.summary_details.trouble_count).not.to.be.null;\n                    });\n                }\n\n                if (critical_required) {\n                    pm.test(\"critical_percentage\", function () {\n                        pm.expect(nr.summary_details.critical_percentage).not.to.be.null;\n                    });\n                    pm.test(\"critical_duration\", function () {\n                        pm.expect(nr.summary_details.critical_duration).not.to.be.null;\n                    });\n                    pm.test(\"critical_count\", function () {\n                        pm.expect(nr.summary_details.critical_count).not.to.be.null;\n                    });\n                }\n            } else {\n                pm.test(\"summary_details is missing\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 13){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==1);\n                    tests['resource_id'] = jsonData.data.info.resource_id;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 13){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    if(trouble_required)\n                    {\n                        tests[\"trouble_percentage\"] = (jsonData.data.summary_details.trouble_percentage !== null);\n                        tests[\"trouble_duration\"] = (jsonData.data.summary_details.trouble_duration !== null);\n                        tests[\"trouble_count\"] = (jsonData.data.summary_details.trouble_count !== null);\n                    }\n                    \n                    if(critical_required)\n                    {\n                        tests[\"critical_percentage\"] = (jsonData.data.summary_details.critical_percentage !== null);\n                        tests[\"critical_duration\"] = (jsonData.data.summary_details.critical_duration !== null);\n                        tests[\"critical_count\"] = (jsonData.data.summary_details.critical_count !== null);  \n                    }\n            }else{\n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "var response = pm.response.json();\nlet critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\n\nif (response.code === 0) {\n    if (response.error === undefined) {\n        pm.test(\"Status code is 200\", function () {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n\n        pm.test(\"code\", function () {\n            pm.expect(response.code).to.equal(0);\n        });\n\n        pm.test(\"message\", function () {\n            pm.expect(response.message).to.equal(\"success\");\n        });\n\n        let nr = response.data || {};\n        if (Object.keys(nr).length > 0) {\n            if (nr.info) {\n                if (Object.keys(nr.info).length === 13) {\n                    pm.test(\"info \", function () {\n                        pm.expect(true).to.be.true;\n                    });\n\n                    pm.test(\"monitor_count\", function () {\n                        pm.expect(nr.info.monitor_count).to.exist;\n                    });\n\n                    pm.test(\"resource type\", function () {\n                        pm.expect(nr.info.resource_type).to.equal(1);\n                    });\n\n                    pm.test(\"resource_id\", function () {\n                        pm.expect(nr.info.resource_id).to.exist;\n                    });\n\n                    pm.test(\"formatted_generated_time\", function () {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n\n                    pm.test(\"period\", function () {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n\n                    pm.test(\"start_time\", function () {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n\n                    pm.test(\"generated_time\", function () {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n\n                    pm.test(\"formatted_end_time\", function () {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n\n                    pm.test(\"formatted_start_time\", function () {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n\n                    pm.test(\"period_name\", function () {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n\n                    pm.test(\"resource_type_name\", function () {\n                        pm.expect(nr.info.resource_type_name).to.exist;\n                    });\n\n                    pm.test(\"resource_name\", function () {\n                        pm.expect(nr.info.resource_name).to.exist;\n                    });\n\n                    pm.test(\"end_time\", function () {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n                } else {\n                    if (Object.keys(nr.info).length > 13) {\n                        pm.test(\"new attribute added to info\", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"attribute removed from info\", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"info\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (nr.summary_details) {\n                pm.test(\"summary_details \", function () {\n                    pm.expect(true).to.be.true;\n                });\n\n                pm.test(\"down_count\", function () {\n                    pm.expect(nr.summary_details.down_count).to.not.be.null;\n                });\n\n                pm.test(\"downtime_duration\", function () {\n                    pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n                });\n\n                pm.test(\"availability_percentage\", function () {\n                    pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n                });\n\n                pm.test(\"mtbf\", function () {\n                    pm.expect(nr.summary_details.mtbf).to.not.be.null;\n                });\n\n                pm.test(\"unmanaged_duration\", function () {\n                    pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n                });\n\n                pm.test(\"mttr\", function () {\n                    pm.expect(nr.summary_details.mttr).to.not.be.null;\n                });\n\n                pm.test(\"maintenance_percentage\", function () {\n                    pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n                });\n\n                pm.test(\"maintenance_duration\", function () {\n                    pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n                });\n\n                pm.test(\"availability_duration\", function () {\n                    pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n                });\n\n                pm.test(\"unmanaged_percentage\", function () {\n                    pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n                });\n\n                pm.test(\"downtime_percentage\", function () {\n                    pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n                });\n\n                if (trouble_required) {\n                    pm.test(\"trouble_percentage\", function () {\n                        pm.expect(nr.summary_details.trouble_percentage).to.not.be.null;\n                    });\n\n                    pm.test(\"trouble_duration\", function () {\n                        pm.expect(nr.summary_details.trouble_duration).to.not.be.null;\n                    });\n\n                    pm.test(\"trouble_count\", function () {\n                        pm.expect(nr.summary_details.trouble_count).to.not.be.null;\n                    });\n                }\n\n                if (critical_required) {\n                    pm.test(\"critical_percentage\", function () {\n                        pm.expect(nr.summary_details.critical_percentage).to.not.be.null;\n                    });\n\n                    pm.test(\"critical_duration\", function () {\n                        pm.expect(nr.summary_details.critical_duration).to.not.be.null;\n                    });\n\n                    pm.test(\"critical_count\", function () {\n                        pm.expect(nr.summary_details.critical_count).to.not.be.null;\n                    });\n                }\n            } else {\n                pm.test(\"summary_details is missing\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 13){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==1);\n                    tests['resource_id'] = jsonData.data.info.resource_id;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 13){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    if(trouble_required)\n                    {\n                        tests[\"trouble_percentage\"] = (jsonData.data.summary_details.trouble_percentage !== null);\n                        tests[\"trouble_duration\"] = (jsonData.data.summary_details.trouble_duration !== null);\n                        tests[\"trouble_count\"] = (jsonData.data.summary_details.trouble_count !== null);\n                    }\n                    \n                    if(critical_required)\n                    {\n                        tests[\"critical_percentage\"] = (jsonData.data.summary_details.critical_percentage !== null);\n                        tests[\"critical_duration\"] = (jsonData.data.summary_details.critical_duration !== null);\n                        tests[\"critical_count\"] = (jsonData.data.summary_details.critical_count !== null);  \n                    }\n            }else{\n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "let critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\nconst response = pm.response.json();\nconst nr = response.data || {};\n\nif (response.code === 0) {\n    if (response.error === undefined) {\n        pm.test(\"Status code is 200\", function () {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n        pm.test(\"code\", function () {\n            pm.expect(response.code).to.equal(0);\n        });\n        pm.test(\"message\", function () {\n            pm.expect(response.message).to.equal(\"success\");\n        });\n\n        if (Object.keys(nr).length > 0) {\n            if (nr.info) {\n                if (Object.keys(nr.info).length === 13) {\n                    pm.test(\"info \", function () {\n                        pm.expect(true).to.be.true;\n                    });\n                    pm.test(\"monitor_count\", function () {\n                        pm.expect(nr.info.monitor_count).to.exist;\n                    });\n                    pm.test(\"resource type\", function () {\n                        pm.expect(nr.info.resource_type).to.equal(1);\n                    });\n                    pm.test(\"resource_id\", function () {\n                        pm.expect(nr.info.resource_id).to.exist;\n                    });\n                    pm.test(\"formatted_generated_time\", function () {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n                    pm.test(\"period\", function () {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n                    pm.test(\"start_time\", function () {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n                    pm.test(\"generated_time\", function () {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n                    pm.test(\"formatted_end_time\", function () {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n                    pm.test(\"formatted_start_time\", function () {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n                    pm.test(\"period_name\", function () {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n                    pm.test(\"resource_type_name\", function () {\n                        pm.expect(nr.info.resource_type_name).to.exist;\n                    });\n                    pm.test(\"resource_name\", function () {\n                        pm.expect(nr.info.resource_name).to.exist;\n                    });\n                    pm.test(\"end_time\", function () {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n                } else {\n                    if (Object.keys(nr.info).length > 13) {\n                        pm.test(\"new attribute added to info\", function () {\n                            pm.expect(false).to.be.false;\n                        });\n                    } else {\n                        pm.test(\"attribute removed from info\", function () {\n                            pm.expect(false).to.be.false;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"info\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (nr.summary_details) {\n                pm.test(\"summary_details \", function () {\n                    pm.expect(true).to.be.true;\n                });\n                pm.test(\"down_count\", function () {\n                    pm.expect(nr.summary_details.down_count).not.to.be.null;\n                });\n                pm.test(\"downtime_duration\", function () {\n                    pm.expect(nr.summary_details.downtime_duration).not.to.be.null;\n                });\n                pm.test(\"availability_percentage\", function () {\n                    pm.expect(nr.summary_details.availability_percentage).not.to.be.null;\n                });\n                pm.test(\"mtbf\", function () {\n                    pm.expect(nr.summary_details.mtbf).not.to.be.null;\n                });\n                pm.test(\"unmanaged_duration\", function () {\n                    pm.expect(nr.summary_details.unmanaged_duration).not.to.be.null;\n                });\n                pm.test(\"mttr\", function () {\n                    pm.expect(nr.summary_details.mttr).not.to.be.null;\n                });\n                pm.test(\"maintenance_percentage\", function () {\n                    pm.expect(nr.summary_details.maintenance_percentage).not.to.be.null;\n                });\n                pm.test(\"maintenance_duration\", function () {\n                    pm.expect(nr.summary_details.maintenance_duration).not.to.be.null;\n                });\n                pm.test(\"availability_duration\", function () {\n                    pm.expect(nr.summary_details.availability_duration).not.to.be.null;\n                });\n                pm.test(\"unmanaged_percentage\", function () {\n                    pm.expect(nr.summary_details.unmanaged_percentage).not.to.be.null;\n                });\n                pm.test(\"downtime_percentage\", function () {\n                    pm.expect(nr.summary_details.downtime_percentage).not.to.be.null;\n                });\n\n                if (trouble_required) {\n                    pm.test(\"trouble_percentage\", function () {\n                        pm.expect(nr.summary_details.trouble_percentage).not.to.be.null;\n                    });\n                    pm.test(\"trouble_duration\", function () {\n                        pm.expect(nr.summary_details.trouble_duration).not.to.be.null;\n                    });\n                    pm.test(\"trouble_count\", function () {\n                        pm.expect(nr.summary_details.trouble_count).not.to.be.null;\n                    });\n                }\n\n                if (critical_required) {\n                    pm.test(\"critical_percentage\", function () {\n                        pm.expect(nr.summary_details.critical_percentage).not.to.be.null;\n                    });\n                    pm.test(\"critical_duration\", function () {\n                        pm.expect(nr.summary_details.critical_duration).not.to.be.null;\n                    });\n                    pm.test(\"critical_count\", function () {\n                        pm.expect(nr.summary_details.critical_count).not.to.be.null;\n                    });\n                }\n            } else {\n                pm.test(\"summary_details is missing\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 14){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==3);\n                    tests['monitor_type'] = jsonData.data.info.monitor_type;\n                    tests['resource_id'] = jsonData.data.info.resource_id;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 14){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    if(trouble_required)\n                    {\n                        tests[\"trouble_percentage\"] = (jsonData.data.summary_details.trouble_percentage !== null);\n                        tests[\"trouble_duration\"] = (jsonData.data.summary_details.trouble_duration !== null);\n                        tests[\"trouble_count\"] = (jsonData.data.summary_details.trouble_count !== null);\n                    }\n                    \n                    if(critical_required)\n                    {\n                        tests[\"critical_percentage\"] = (jsonData.data.summary_details.critical_percentage !== null);\n                        tests[\"critical_duration\"] = (jsonData.data.summary_details.critical_duration !== null);\n                        tests[\"critical_count\"] = (jsonData.data.summary_details.critical_count !== null);  \n                    }\n            }else{\n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "let critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\nlet response = pm.response.json();\nlet nr = response.data || {};\n\nif (response.code === 0) {\n\n    if (response.error === undefined) {\n\n        pm.test(\"Status code is 200\", function() {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n\n        pm.test(\"code\", function() {\n            pm.expect(response.code).to.equal(0);\n        });\n\n        pm.test(\"message\", function() {\n            pm.expect(response.message).to.equal(\"success\");\n        });\n\n        if (Object.keys(nr).length > 0) {\n\n            if (nr.info) {\n\n                if (Object.keys(nr.info).length == 14) {\n\n                    pm.test(\"info \", function() {\n                        pm.expect(true).to.be.true;\n                    });\n\n                    pm.test(\"monitor_count\", function() {\n                        pm.expect(nr.info.monitor_count).to.exist;\n                    });\n\n                    pm.test(\"resource type\", function() {\n                        pm.expect(nr.info.resource_type).to.equal(3);\n                    });\n\n                    pm.test(\"monitor_type\", function() {\n                        pm.expect(nr.info.monitor_type).to.exist;\n                    });\n\n                    pm.test(\"resource_id\", function() {\n                        pm.expect(nr.info.resource_id).to.exist;\n                    });\n\n                    pm.test(\"formatted_generated_time\", function() {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n\n                    pm.test(\"period\", function() {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n\n                    pm.test(\"start_time\", function() {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n\n                    pm.test(\"generated_time\", function() {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n\n                    pm.test(\"formatted_end_time\", function() {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n\n                    pm.test(\"formatted_start_time\", function() {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n\n                    pm.test(\"period_name\", function() {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n\n                    pm.test(\"resource_type_name\", function() {\n                        pm.expect(nr.info.resource_type_name).to.exist;\n                    });\n\n                    pm.test(\"resource_name\", function() {\n                        pm.expect(nr.info.resource_name).to.exist;\n                    });\n\n                    pm.test(\"end_time\", function() {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n\n                } else {\n\n                    if (Object.keys(nr.info).length > 14) {\n\n                        pm.test(\"new attribute added to info\", function() {\n                            pm.expect(false).to.be.true;\n                        });\n\n                    } else {\n\n                        pm.test(\"attribute removed from info\", function() {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n\n            } else {\n\n                pm.test(\"info\", function() {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (nr.summary_details) {\n\n                pm.test(\"summary_details \", function() {\n                    pm.expect(true).to.be.true;\n                });\n\n                pm.test(\"down_count\", function() {\n                    pm.expect(nr.summary_details.down_count).to.not.be.null;\n                });\n\n                pm.test(\"downtime_duration\", function() {\n                    pm.expect(nr.summary_details.downtime_duration).to.not.be.null;\n                });\n\n                pm.test(\"availability_percentage\", function() {\n                    pm.expect(nr.summary_details.availability_percentage).to.not.be.null;\n                });\n\n                pm.test(\"mtbf\", function() {\n                    pm.expect(nr.summary_details.mtbf).to.not.be.null;\n                });\n\n                pm.test(\"unmanaged_duration\", function() {\n                    pm.expect(nr.summary_details.unmanaged_duration).to.not.be.null;\n                });\n\n                pm.test(\"mttr\", function() {\n                    pm.expect(nr.summary_details.mttr).to.not.be.null;\n                });\n\n                pm.test(\"maintenance_percentage\", function() {\n                    pm.expect(nr.summary_details.maintenance_percentage).to.not.be.null;\n                });\n\n                pm.test(\"maintenance_duration\", function() {\n                    pm.expect(nr.summary_details.maintenance_duration).to.not.be.null;\n                });\n\n                pm.test(\"availability_duration\", function() {\n                    pm.expect(nr.summary_details.availability_duration).to.not.be.null;\n                });\n\n                pm.test(\"unmanaged_percentage\", function() {\n                    pm.expect(nr.summary_details.unmanaged_percentage).to.not.be.null;\n                });\n\n                pm.test(\"downtime_percentage\", function() {\n                    pm.expect(nr.summary_details.downtime_percentage).to.not.be.null;\n                });\n\n                if (trouble_required) {\n                    pm.test(\"trouble_percentage\", function() {\n                        pm.expect(nr.summary_details.trouble_percentage).to.not.be.null;\n                    });\n\n                    pm.test(\"trouble_duration\", function() {\n                        pm.expect(nr.summary_details.trouble_duration).to.not.be.null;\n                    });\n\n                    pm.test(\"trouble_count\", function() {\n                        pm.expect(nr.summary_details.trouble_count).to.not.be.null;\n                    });\n                }\n\n                if (critical_required) {\n                    pm.test(\"critical_percentage\", function() {\n                        pm.expect(nr.summary_details.critical_percentage).to.not.be.null;\n                    });\n\n                    pm.test(\"critical_duration\", function() {\n                        pm.expect(nr.summary_details.critical_duration).to.not.be.null;\n                    });\n\n                    pm.test(\"critical_count\", function() {\n                        pm.expect(nr.summary_details.critical_count).to.not.be.null;\n                    });\n                }\n\n            } else {\n                pm.test(\"summary_details is missing\", function() {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\nlet critical_required=pm.environment.get(\"critical_required\");\nlet trouble_required=pm.environment.get(\"trouble_required\");\nif (jsonData.code===0){\n    \n   if(jsonData.error === undefined){\n       \n       \n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"code\"] = jsonData.code ===0;\n        tests[\"message\"] = jsonData.message ===\"success\";\n        if(Object.keys(jsonData.data).length>0){\n                \n            if(jsonData.data.info){\n            \n                if((Object.keys(jsonData.data.info)).length == 13){\n                        \n                    tests['info '] = true;\n                    tests['monitor_count'] = (jsonData.data.info.monitor_count);\n                    tests['resource type'] = (jsonData.data.info.resource_type==4);\n                    tests['monitor_type'] = jsonData.data.info.monitor_type;\n                    tests['formatted_generated_time'] = jsonData.data.info.formatted_generated_time;\n                    tests['period'] = jsonData.data.info.period;\n                    tests['start_time'] = jsonData.data.info.start_time;\n                    tests['generated_time'] = jsonData.data.info.generated_time;\n                    tests['formatted_end_time'] = jsonData.data.info.formatted_end_time;\n                    tests['formatted_start_time'] = jsonData.data.info.formatted_start_time;\n                    tests['period_name'] = jsonData.data.info.period_name;\n                    tests['resource_type_name'] = jsonData.data.info.resource_type_name;\n                    tests['resource_name'] = jsonData.data.info.resource_name;\n                    tests['end_time'] = jsonData.data.info.end_time;\n                \n                }else{\n\n                    if((Object.keys(jsonData.data.info)).length > 13){\n                    \n                        tests['new attribute added to info'] = false;\n                        \n                    }else{\n                        \n                        tests['attribute removed from info'] = false;\n                    }\n                }\n                \n            }else{\n                \n                tests['info'] = false;\n            }\n            \n            if(jsonData.data.summary_details){\n                    \n                    tests[\"summary_details \"] = true;\n                    tests[\"down_count\"] = (jsonData.data.summary_details.down_count !== null);\n                    tests[\"downtime_duration\"] = (jsonData.data.summary_details.downtime_duration !== null);\n                    tests[\"availability_percentage\"] = (jsonData.data.summary_details.availability_percentage !== null);\n                    tests[\"mtbf\"] = (jsonData.data.summary_details.mtbf !== null);\n                    tests[\"unmanaged_duration\"] = (jsonData.data.summary_details.unmanaged_duration !== null);\n                    tests[\"mttr\"] = (jsonData.data.summary_details.mttr !== null);\n                    tests[\"maintenance_percentage\"] = (jsonData.data.summary_details.maintenance_percentage !== null);\n                    tests[\"maintenance_duration\"] = (jsonData.data.summary_details.maintenance_duration !== null);\n                    tests[\"availability_duration\"] = (jsonData.data.summary_details.availability_duration !== null);\n                    tests[\"unmanaged_percentage\"] = (jsonData.data.summary_details.unmanaged_percentage !== null);\n                    tests[\"downtime_percentage\"] = (jsonData.data.summary_details.downtime_percentage !== null);\n                    if(trouble_required)\n                    {\n                        tests[\"trouble_percentage\"] = (jsonData.data.summary_details.trouble_percentage !== null);\n                        tests[\"trouble_duration\"] = (jsonData.data.summary_details.trouble_duration !== null);\n                        tests[\"trouble_count\"] = (jsonData.data.summary_details.trouble_count !== null);\n                    }\n                    \n                    if(critical_required)\n                    {\n                        tests[\"critical_percentage\"] = (jsonData.data.summary_details.critical_percentage !== null);\n                        tests[\"critical_duration\"] = (jsonData.data.summary_details.critical_duration !== null);\n                        tests[\"critical_count\"] = (jsonData.data.summary_details.critical_count !== null);  \n                    }\n            }else{\n                tests[\"summary_details is missing\"] = false;\n            }\n        }\n   }\n}",
    "output": "let critical_required = pm.environment.get(\"critical_required\");\nlet trouble_required = pm.environment.get(\"trouble_required\");\nlet response = pm.response.json();\nlet nr = response.data || {};\n\nif (response.code === 0) {\n    if (response.error === undefined) {\n\n        pm.test(\"Status code is 200\", function () {\n            pm.expect(pm.response.code).to.equal(200);\n        });\n\n        pm.test(\"code\", function () {\n            pm.expect(response.code).to.equal(0);\n        });\n\n        pm.test(\"message\", function () {\n            pm.expect(response.message).to.equal(\"success\");\n        });\n\n        if (Object.keys(nr).length > 0) {\n\n            if (nr.info) {\n\n                if ((Object.keys(nr.info)).length === 13) {\n\n                    pm.test('info ', function () {\n                        pm.expect(true).to.be.true;\n                    });\n\n                    pm.test('monitor_count', function () {\n                        pm.expect(nr.info.monitor_count).to.exist;\n                    });\n\n                    pm.test('resource type', function () {\n                        pm.expect(nr.info.resource_type).to.equal(4);\n                    });\n\n                    pm.test('monitor_type', function () {\n                        pm.expect(nr.info.monitor_type).to.exist;\n                    });\n\n                    pm.test('formatted_generated_time', function () {\n                        pm.expect(nr.info.formatted_generated_time).to.exist;\n                    });\n\n                    pm.test('period', function () {\n                        pm.expect(nr.info.period).to.exist;\n                    });\n\n                    pm.test('start_time', function () {\n                        pm.expect(nr.info.start_time).to.exist;\n                    });\n\n                    pm.test('generated_time', function () {\n                        pm.expect(nr.info.generated_time).to.exist;\n                    });\n\n                    pm.test('formatted_end_time', function () {\n                        pm.expect(nr.info.formatted_end_time).to.exist;\n                    });\n\n                    pm.test('formatted_start_time', function () {\n                        pm.expect(nr.info.formatted_start_time).to.exist;\n                    });\n\n                    pm.test('period_name', function () {\n                        pm.expect(nr.info.period_name).to.exist;\n                    });\n\n                    pm.test('resource_type_name', function () {\n                        pm.expect(nr.info.resource_type_name).to.exist;\n                    });\n\n                    pm.test('resource_name', function () {\n                        pm.expect(nr.info.resource_name).to.exist;\n                    });\n\n                    pm.test('end_time', function () {\n                        pm.expect(nr.info.end_time).to.exist;\n                    });\n\n                } else {\n\n                    pm.test('new attribute added to info', function () {\n                        pm.expect((Object.keys(nr.info)).length > 13).to.be.false;\n                    });\n\n                    pm.test('attribute removed from info', function () {\n                        pm.expect((Object.keys(nr.info)).length < 13).to.be.false;\n                    });\n                }\n\n            } else {\n\n                pm.test('info', function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n            if (nr.summary_details) {\n\n                pm.test(\"summary_details \", function () {\n                    pm.expect(true).to.be.true;\n                });\n\n                pm.test(\"down_count\", function () {\n                    pm.expect(nr.summary_details.down_count).not.to.be.null;\n                });\n\n                pm.test(\"downtime_duration\", function () {\n                    pm.expect(nr.summary_details.downtime_duration).not.to.be.null;\n                });\n\n                pm.test(\"availability_percentage\", function () {\n                    pm.expect(nr.summary_details.availability_percentage).not.to.be.null;\n                });\n\n                pm.test(\"mtbf\", function () {\n                    pm.expect(nr.summary_details.mtbf).not.to.be.null;\n                });\n\n                pm.test(\"unmanaged_duration\", function () {\n                    pm.expect(nr.summary_details.unmanaged_duration).not.to.be.null;\n                });\n\n                pm.test(\"mttr\", function () {\n                    pm.expect(nr.summary_details.mttr).not.to.be.null;\n                });\n\n                pm.test(\"maintenance_percentage\", function () {\n                    pm.expect(nr.summary_details.maintenance_percentage).not.to.be.null;\n                });\n\n                pm.test(\"maintenance_duration\", function () {\n                    pm.expect(nr.summary_details.maintenance_duration).not.to.be.null;\n                });\n\n                pm.test(\"availability_duration\", function () {\n                    pm.expect(nr.summary_details.availability_duration).not.to.be.null;\n                });\n\n                pm.test(\"unmanaged_percentage\", function () {\n                    pm.expect(nr.summary_details.unmanaged_percentage).not.to.be.null;\n                });\n\n                pm.test(\"downtime_percentage\", function () {\n                    pm.expect(nr.summary_details.downtime_percentage).not.to.be.null;\n                });\n\n                if (trouble_required) {\n                    pm.test(\"trouble_percentage\", function () {\n                        pm.expect(nr.summary_details.trouble_percentage).not.to.be.null;\n                    });\n\n                    pm.test(\"trouble_duration\", function () {\n                        pm.expect(nr.summary_details.trouble_duration).not.to.be.null;\n                    });\n\n                    pm.test(\"trouble_count\", function () {\n                        pm.expect(nr.summary_details.trouble_count).not.to.be.null;\n                    });\n                }\n\n                if (critical_required) {\n                    pm.test(\"critical_percentage\", function () {\n                        pm.expect(nr.summary_details.critical_percentage).not.to.be.null;\n                    });\n\n                    pm.test(\"critical_duration\", function () {\n                        pm.expect(nr.summary_details.critical_duration).not.to.be.null;\n                    });\n\n                    pm.test(\"critical_count\", function () {\n                        pm.expect(nr.summary_details.critical_count).not.to.be.null;\n                    });\n                }\n\n            } else {\n                pm.test(\"summary_details is missing\", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        }\n    }\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"code\"] = jsonData.code === 0;\ntests[\"message\"] = jsonData.message === \"success\";\n\nif (jsonData.code === 0) {\n\n    if (jsonData.error === undefined) {\n\n        if (jsonData.data.compositeslareport) {\n\n            if (jsonData.data.compositeslareport.length > 0) {\n\n                if (Object.keys(jsonData.data.compositeslareport[0]).length === 15) {\n\n                    for (var i = 0; i < jsonData.data.compositeslareport.length; i++) {\n\n                        tests[\" operatorKey \" + i] = jsonData.data.compositeslareport[i].operatorKey !== null;\n                        tests[\" achieved \" + i] = jsonData.data.compositeslareport[i].achieved !== null;\n                        tests[\" monitor_id \" + i] = jsonData.data.compositeslareport[i].monitor_id !== null;\n                        tests[\" monitor_type \" + i] = jsonData.data.compositeslareport[i].monitor_type !== null;\n                        tests[\" totaltime \" + i] = jsonData.data.compositeslareport[i].totaltime !== null;\n                        tests[\" sla_name \" + i] = jsonData.data.compositeslareport[i].sla_name !== null;\n                        tests[\" expected \" + i] = jsonData.data.compositeslareport[i].expected !== null;\n                        tests[\" totalmaintenancetime \" + i] = jsonData.data.compositeslareport[i].totalmaintenancetime !== null;\n                        tests[\" sla_id \" + i] = jsonData.data.compositeslareport[i].operatorKey !== null;\n                        tests[\" TotalDownTime \" + i] = jsonData.data.compositeslareport[i].TotalDownTime !== null;\n                        tests[\" totaldowntime \" + i] = jsonData.data.compositeslareport[i].totaldowntime !== null;\n                        tests[\" businessid \" + i] = jsonData.data.compositeslareport[i].businessid !== null;\n                        tests[\" monitor_name \" + i] = jsonData.data.compositeslareport[i].monitor_name !== null;\n                        tests[\" targetname \" + i] = jsonData.data.compositeslareport[i].targetname !== null;\n                        tests[\" colour \" + i] = jsonData.data.compositeslareport[i].colour !== null;\n                    }\n                    \n                } else {\n\n                    if (Object.keys(jsonData.data.compositeslareport[0]).length > 15) {\n\n                        tests[\"composite SLA  new attribute added ... \"] = false;\n\n\n                    } else {\n\n                        tests[\"composite SLA  attribute removed ... \"]=false;\n                    }\n\n                }\n\n            } else {\n\n                tests[\"no composite SLA  ... \"] = false;\n            }\n\n\n        } else {\n\n            tests[\"no composite SLA  ... \"] = false;\n        }\n\n    } else {\n\n        tests[\"composite SLA  error\"] = false;\n    }\n\n} else {\n\n    tests[\"composite SLA error\"] = false;\n}",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\npm.test(\"code\", function() {\n    pm.expect(response.code).to.equal(0);\n});\n\npm.test(\"message\", function() {\n    pm.expect(response.message).to.equal(\"success\");\n});\n\nif (response.code === 0) {\n\n    if (!response.hasOwnProperty('error')) {\n\n        if (nr.hasOwnProperty('compositeslareport')) {\n\n            if (Array.isArray(nr.compositeslareport) && nr.compositeslareport.length > 0) {\n\n                if (Object.keys(nr.compositeslareport[0]).length === 15) {\n\n                    for (var i = 0; i < nr.compositeslareport.length; i++) {\n\n                        pm.test(\"operatorKey \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].operatorKey).to.not.be.null;\n                        });\n                        pm.test(\"achieved \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].achieved).to.not.be.null;\n                        });\n                        pm.test(\"monitor_id \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].monitor_id).to.not.be.null;\n                        });\n                        pm.test(\"monitor_type \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].monitor_type).to.not.be.null;\n                        });\n                        pm.test(\"totaltime \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].totaltime).to.not.be.null;\n                        });\n                        pm.test(\"sla_name \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].sla_name).to.not.be.null;\n                        });\n                        pm.test(\"expected \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].expected).to.not.be.null;\n                        });\n                        pm.test(\"totalmaintenancetime \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].totalmaintenancetime).to.not.be.null;\n                        });\n                        pm.test(\"sla_id \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].operatorKey).to.not.be.null;\n                        });\n                        pm.test(\"TotalDownTime \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].TotalDownTime).to.not.be.null;\n                        });\n                        pm.test(\"totaldowntime \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].totaldowntime).to.not.be.null;\n                        });\n                        pm.test(\"businessid \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].businessid).to.not.be.null;\n                        });\n                        pm.test(\"monitor_name \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].monitor_name).to.not.be.null;\n                        });\n                        pm.test(\"targetname \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].targetname).to.not.be.null;\n                        });\n                        pm.test(\"colour \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].colour).to.not.be.null;\n                        });\n                    }\n\n                } else {\n\n                    if (Object.keys(nr.compositeslareport[0]).length > 15) {\n\n                        pm.test(\"composite SLA new attribute added ...\", function() {\n                            pm.expect(false).to.be.true;\n                        });\n\n                    } else {\n\n                        pm.test(\"composite SLA attribute removed ...\", function() {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n\n                }\n\n            } else {\n\n                pm.test(\"no composite SLA ...\", function() {\n                    pm.expect(false).to.be.true;\n                });\n            }\n\n        } else {\n\n            pm.test(\"no composite SLA ...\", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n\n    } else {\n\n        pm.test(\"composite SLA error\", function() {\n            pm.expect(false).to.be.true;\n        });\n    }\n\n} else {\n\n    pm.test(\"composite SLA error\", function() {\n        pm.expect(false).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "postman.setNextRequest(\"null\");",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\npm.test(\"code\", function() {\n    pm.expect(response.code).to.equal(0);\n});\n\npm.test(\"message\", function() {\n    pm.expect(response.message).to.equal(\"success\");\n});\n\nif (response.code === 0) {\n    if (!response.hasOwnProperty(\"error\")) {\n        if (nr.hasOwnProperty(\"compositeslareport\")) {\n            if (nr.compositeslareport.length > 0) {\n                if (Object.keys(nr.compositeslareport[0]).length === 15) {\n                    for (var i = 0; i < nr.compositeslareport.length; i++) {\n                        pm.test(\"operatorKey \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].operatorKey).not.to.be.null;\n                        });\n                        pm.test(\"achieved \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].achieved).not.to.be.null;\n                        });\n                        pm.test(\"monitor_id \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].monitor_id).not.to.be.null;\n                        });\n                        pm.test(\"monitor_type \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].monitor_type).not.to.be.null;\n                        });\n                        pm.test(\"totaltime \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].totaltime).not.to.be.null;\n                        });\n                        pm.test(\"sla_name \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].sla_name).not.to.be.null;\n                        });\n                        pm.test(\"expected \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].expected).not.to.be.null;\n                        });\n                        pm.test(\"totalmaintenancetime \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].totalmaintenancetime).not.to.be.null;\n                        });\n                        pm.test(\"sla_id \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].operatorKey).not.to.be.null;\n                        });\n                        pm.test(\"TotalDownTime \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].TotalDownTime).not.to.be.null;\n                        });\n                        pm.test(\"totaldowntime \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].totaldowntime).not.to.be.null;\n                        });\n                        pm.test(\"businessid \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].businessid).not.to.be.null;\n                        });\n                        pm.test(\"monitor_name \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].monitor_name).not.to.be.null;\n                        });\n                        pm.test(\"targetname \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].targetname).not.to.be.null;\n                        });\n                        pm.test(\"colour \" + i, function() {\n                            pm.expect(nr.compositeslareport[i].colour).not.to.be.null;\n                        });\n                    }\n                } else {\n                    if (Object.keys(nr.compositeslareport[0]).length > 15) {\n                        pm.test(\"composite SLA new attribute added ... \", function() {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"composite SLA attribute removed ... \", function() {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"no composite SLA ... \", function() {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        } else {\n            pm.test(\"no composite SLA ... \", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n    } else {\n        pm.test(\"composite SLA error\", function() {\n            pm.expect(false).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"composite SLA error\", function() {\n        pm.expect(false).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"code\"] = jsonData.code === 0;\ntests[\"message\"] = jsonData.message === \"success\";\n\nif (jsonData.code === 0) {\n\n    if (jsonData.error === undefined) {\n\n        if (jsonData.data.compositeslareport) {\n\n            if (jsonData.data.compositeslareport.length > 0) {\n\n                if (Object.keys(jsonData.data.compositeslareport[0]).length === 15) {\n\n                    for (var i = 0; i < jsonData.data.compositeslareport.length; i++) {\n\n                        tests[\" operatorKey \" + i] = jsonData.data.compositeslareport[i].operatorKey !== null;\n                        tests[\" achieved \" + i] = jsonData.data.compositeslareport[i].achieved !== null;\n                        tests[\" monitor_id \" + i] = jsonData.data.compositeslareport[i].monitor_id !== null;\n                        tests[\" monitor_type \" + i] = jsonData.data.compositeslareport[i].monitor_type !== null;\n                        tests[\" totaltime \" + i] = jsonData.data.compositeslareport[i].totaltime !== null;\n                        tests[\" sla_name \" + i] = jsonData.data.compositeslareport[i].sla_name !== null;\n                        tests[\" expected \" + i] = jsonData.data.compositeslareport[i].expected !== null;\n                        tests[\" totalmaintenancetime \" + i] = jsonData.data.compositeslareport[i].totalmaintenancetime !== null;\n                        tests[\" sla_id \" + i] = jsonData.data.compositeslareport[i].operatorKey !== null;\n                        tests[\" TotalDownTime \" + i] = jsonData.data.compositeslareport[i].TotalDownTime !== null;\n                        tests[\" totaldowntime \" + i] = jsonData.data.compositeslareport[i].totaldowntime !== null;\n                        tests[\" businessid \" + i] = jsonData.data.compositeslareport[i].businessid !== null;\n                        tests[\" monitor_name \" + i] = jsonData.data.compositeslareport[i].monitor_name !== null;\n                        tests[\" targetname \" + i] = jsonData.data.compositeslareport[i].targetname !== null;\n                        tests[\" colour \" + i] = jsonData.data.compositeslareport[i].colour !== null;\n                    }\n                    \n                } else {\n\n                    if (Object.keys(jsonData.data.compositeslareport[0]).length > 15) {\n\n                        tests[\"composite SLA  new attribute added ... \"] = false;\n\n\n                    } else {\n\n                        tests[\"composite SLA  attribute removed ... \"]=false;\n                    }\n\n                }\n\n            } else {\n\n                tests[\"no composite SLA  ... \"] = false;\n            }\n\n\n        } else {\n\n            tests[\"no composite SLA  ... \"] = false;\n        }\n\n    } else {\n\n        tests[\"composite SLA  error\"] = false;\n    }\n\n} else {\n\n    tests[\"composite SLA error\"] = false;\n}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\npm.test(\"code\", function() {\n    pm.expect(response.code).to.equal(0);\n});\n\npm.test(\"message\", function() {\n    pm.expect(response.message).to.equal(\"success\");\n});\n\nif (response.code === 0) {\n    if (response.error === undefined) {\n        var nr = response.data || {};\n        if (nr.availabilityslareport) {\n            if (nr.availabilityslareport.length > 0) {\n                if (Object.keys(nr.availabilityslareport[0]).length === 16) {\n                    for (var i = 0; i < nr.availabilityslareport.length; i++) {\n                        pm.test(\" operatorKey \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].operatorKey).not.to.be.null;\n                        });\n                        pm.test(\" achieved \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].achieved).not.to.be.null;\n                        });\n                        pm.test(\" monitor_id \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].monitor_id).not.to.be.null;\n                        });\n                        pm.test(\" monitor_type \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].monitor_type).not.to.be.null;\n                        });\n                        pm.test(\" totaltime \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].totaltime).not.to.be.null;\n                        });\n                        pm.test(\" sla_name \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].sla_name).not.to.be.null;\n                        });\n                        pm.test(\" expected \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].expected).not.to.be.null;\n                        });\n                        pm.test(\" totalmaintenancetime \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].totalmaintenancetime).not.to.be.null;\n                        });\n                        pm.test(\" sla_id \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].operatorKey).not.to.be.null;\n                        });\n                        pm.test(\" TotalDownTime \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].TotalDownTime).not.to.be.null;\n                        });\n                        pm.test(\" totaldowntime \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].totaldowntime).not.to.be.null;\n                        });\n                        pm.test(\" businessid \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].businessid).not.to.be.null;\n                        });\n                        pm.test(\" monitor_name \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].monitor_name).not.to.be.null;\n                        });\n                        pm.test(\" targetname \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].targetname).not.to.be.null;\n                        });\n                        pm.test(\" colour \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].colour).not.to.be.null;\n                        });\n                        pm.test(\" overalltargets \" + i, function() {\n                            pm.expect(nr.availabilityslareport[i].overalltargets).not.to.be.null;\n                        });\n                        if (nr.availabilityslareport[i].overalltargets !== null && nr.availabilityslareport[i].overalltargets.length > 0) {\n                            pm.test(\" overalltargets operatorkey\" + i, function() {\n                                pm.expect(nr.availabilityslareport[i].overalltargets[0].operatorkey).not.to.be.null;\n                            });\n                            pm.test(\" overalltargets operator\" + i, function() {\n                                pm.expect(nr.availabilityslareport[i].overalltargets[0].operator).not.to.be.null;\n                            });\n                            pm.test(\" overalltargets name\" + i, function() {\n                                pm.expect(nr.availabilityslareport[i].overalltargets[0].name).not.to.be.null;\n                            });\n                            pm.test(\" overalltargets target\" + i, function() {\n                                pm.expect(nr.availabilityslareport[i].overalltargets[0].target).not.to.be.null;\n                            });\n                            pm.test(\" overalltargets colour\" + i, function() {\n                                pm.expect(nr.availabilityslareport[i].overalltargets[0].colour).not.to.be.null;\n                            });\n                        }\n                    }\n                } else {\n                    if (Object.keys(nr.availabilityslareport[0]).length > 16) {\n                        pm.test(\"availability SLA  new attribute added ... \", function() {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"availability SLA  attribute removed ... \", function() {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"no availability SLA  ... \", function() {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        } else {\n            pm.test(\"no availability SLA  ... \", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n    } else {\n        pm.test(\"availability SLA error\", function() {\n            pm.expect(false).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"availability SLA error\", function() {\n        pm.expect(false).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "// var jsonData = JSON.parse(responseBody);\n\n// tests[\"Status code is 200\"] = responseCode.code === 200;\n// tests[\"code\"] = jsonData.code === 0;\n// tests[\"message\"] = jsonData.message === \"success\";\n\n// if (jsonData.code === 0) {\n\n//     if (jsonData.error === undefined) {\n\n//         if (jsonData.data.availabilityslareport) {\n\n//             if (jsonData.data.availabilityslareport.length > 0) {\n\n//                 if (Object.keys(jsonData.data.availabilityslareport[0]).length === 16) {\n\n//                     for (var i = 0; i < jsonData.data.availabilityslareport.length; i++) {\n\n//                         tests[\" operatorKey \" + i] = jsonData.data.availabilityslareport[i].operatorKey !== null;\n//                         tests[\" achieved \" + i] = jsonData.data.availabilityslareport[i].achieved !== null;\n//                         tests[\" monitor_id \" + i] = jsonData.data.availabilityslareport[i].monitor_id !== null;\n//                         tests[\" monitor_type \" + i] = jsonData.data.availabilityslareport[i].monitor_type !== null;\n//                         tests[\" totaltime \" + i] = jsonData.data.availabilityslareport[i].totaltime !== null;\n//                         tests[\" sla_name \" + i] = jsonData.data.availabilityslareport[i].sla_name !== null;\n//                         tests[\" expected \" + i] = jsonData.data.availabilityslareport[i].expected !== null;\n//                         tests[\" totalmaintenancetime \" + i] = jsonData.data.availabilityslareport[i].totalmaintenancetime !== null;\n//                         tests[\" sla_id \" + i] = jsonData.data.availabilityslareport[i].operatorKey !== null;\n//                         tests[\" TotalDownTime \" + i] = jsonData.data.availabilityslareport[i].TotalDownTime !== null;\n//                         tests[\" totaldowntime \" + i] = jsonData.data.availabilityslareport[i].totaldowntime !== null;\n//                         tests[\" businessid \" + i] = jsonData.data.availabilityslareport[i].businessid !== null;\n//                         tests[\" monitor_name \" + i] = jsonData.data.availabilityslareport[i].monitor_name !== null;\n//                         tests[\" targetname \" + i] = jsonData.data.availabilityslareport[i].targetname !== null;\n//                         tests[\" colour \" + i] = jsonData.data.availabilityslareport[i].colour !== null;\n//                         tests[\" overalltargets \" + i] = jsonData.data.availabilityslareport[i].overalltargets !== null;\n//                         if(jsonData.data.availabilityslareport[i].overalltargets !== null && jsonData.data.availabilityslareport[i].overalltargets.length>0){\n                            \n//                             tests[\" overalltargets operatorkey\" + i] = jsonData.data.availabilityslareport[i].overalltargets[0].operatorkey !== null;\n//                             tests[\" overalltargets operator\" + i] = jsonData.data.availabilityslareport[i].overalltargets[0].operator !== null;\n//                             tests[\" overalltargets name\" + i] = jsonData.data.availabilityslareport[i].overalltargets[0].name !== null;\n//                             tests[\" overalltargets target\" + i] = jsonData.data.availabilityslareport[i].overalltargets[0].target !== null;\n//                             tests[\" overalltargets colour\" + i] = jsonData.data.availabilityslareport[i].overalltargets[0].colour !== null;\n                            \n//                         }\n//                     }\n                    \n//                 } else {\n\n//                     if (Object.keys(jsonData.data.availabilityslareport[0]).length > 16) {\n\n//                         tests[\"availability SLA  new attribute added ... \"] = false;\n\n\n//                     } else {\n\n//                         tests[\"availability SLA  attribute removed ... \"]=false;\n//                     }\n\n//                 }\n\n//             } else {\n\n//                 tests[\"no availability SLA  ... \"] = false;\n//             }\n\n\n//         } else {\n\n//             tests[\"no availability SLA  ... \"] = false;\n//         }\n\n//     } else {\n\n//         tests[\"availability SLA error\"] = false;\n//     }\n\n// } else {\n\n//     tests[\"availability SLA error\"] = false;\n// }\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"code\"] = jsonData.code === 0;\ntests[\"message\"] = jsonData.message === \"success\";\n\nif (jsonData.code === 0) {\n\n    if (jsonData.error === undefined) {\n\n        if (jsonData.data.availabilityslareport) {\n\n            if (jsonData.data.availabilityslareport.length > 0) {\n\n                if (Object.keys(jsonData.data.availabilityslareport[0]).length === 16) {\n\n                    for (var i = 0; i < jsonData.data.availabilityslareport.length; i++) {\n\n                        tests[\" operatorKey \"  ] = jsonData.data.availabilityslareport[i].operatorKey !== null;\n                        tests[\" achieved \"  ] = jsonData.data.availabilityslareport[i].achieved !== null;\n                        tests[\" monitor_id \"  ] = jsonData.data.availabilityslareport[i].monitor_id !== null;\n                        tests[\" monitor_type \"  ] = jsonData.data.availabilityslareport[i].monitor_type !== null;\n                        tests[\" totaltime \"  ] = jsonData.data.availabilityslareport[i].totaltime !== null;\n                        tests[\" sla_name \"  ] = jsonData.data.availabilityslareport[i].sla_name !== null;\n                        tests[\" expected \"  ] = jsonData.data.availabilityslareport[i].expected !== null;\n                        tests[\" totalmaintenancetime \"  ] = jsonData.data.availabilityslareport[i].totalmaintenancetime !== null;\n                        tests[\" sla_id \"  ] = jsonData.data.availabilityslareport[i].operatorKey !== null;\n                        tests[\" TotalDownTime \"  ] = jsonData.data.availabilityslareport[i].TotalDownTime !== null;\n                        tests[\" totaldowntime \"  ] = jsonData.data.availabilityslareport[i].totaldowntime !== null;\n                        tests[\" businessid \"  ] = jsonData.data.availabilityslareport[i].businessid !== null;\n                        tests[\" monitor_name \"  ] = jsonData.data.availabilityslareport[i].monitor_name !== null;\n                        tests[\" targetname \"  ] = jsonData.data.availabilityslareport[i].targetname !== null;\n                        tests[\" colour \"  ] = jsonData.data.availabilityslareport[i].colour !== null;\n                        tests[\" overalltargets \"  ] = jsonData.data.availabilityslareport[i].overalltargets !== null;\n                        if(jsonData.data.availabilityslareport[i].overalltargets !== null && jsonData.data.availabilityslareport[i].overalltargets.length>0){\n                            \n                            tests[\" overalltargets operatorkey\"  ] = jsonData.data.availabilityslareport[i].overalltargets[0].operatorkey !== null;\n                            tests[\" overalltargets operator\"  ] = jsonData.data.availabilityslareport[i].overalltargets[0].operator !== null;\n                            tests[\" overalltargets name\"  ] = jsonData.data.availabilityslareport[i].overalltargets[0].name !== null;\n                            tests[\" overalltargets target\"  ] = jsonData.data.availabilityslareport[i].overalltargets[0].target !== null;\n                            tests[\" overalltargets colour\"  ] = jsonData.data.availabilityslareport[i].overalltargets[0].colour !== null;\n                            \n                        }\n                    }\n                    \n                } else {\n\n                    if (Object.keys(jsonData.data.availabilityslareport[0]).length > 16) {\n\n                        tests[\"availability SLA  new attribute added ... \"] = false;\n\n\n                    } else {\n\n                        tests[\"availability SLA  attribute removed ... \"]=false;\n                    }\n\n                }\n\n            } else {\n\n                tests[\"no availability SLA  ... \"] = false;\n            }\n\n\n        } else {\n\n            tests[\"no availability SLA  ... \"] = false;\n        }\n\n    } else {\n\n        tests[\"availability SLA error\"] = false;\n    }\n\n} else {\n\n    tests[\"availability SLA error\"] = false;\n}",
    "output": "const response = pm.response.json();\n\npm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\npm.test(\"code\", function() {\n    pm.expect(response.code).to.equal(0);\n});\n\npm.test(\"message\", function() {\n    pm.expect(response.message).to.equal(\"success\");\n});\n\nif (response.code === 0) {\n    if (!response.hasOwnProperty('error')) {\n        const nr = response.data || {};\n        if (nr.availabilityslareport) {\n            if (nr.availabilityslareport.length > 0) {\n                const firstReport = nr.availabilityslareport[0];\n                if (Object.keys(firstReport).length === 16) {\n                    for (let i = 0; i < nr.availabilityslareport.length; i++) {\n                        const report = nr.availabilityslareport[i];\n                        pm.test(\" operatorKey \", function() {\n                            pm.expect(report.operatorKey).to.not.be.null;\n                        });\n                        pm.test(\" achieved \" + i, function() {\n                            pm.expect(report.achieved).to.not.be.null;\n                        });\n                        pm.test(\" monitor_id \" + i, function() {\n                            pm.expect(report.monitor_id).to.not.be.null;\n                        });\n                        pm.test(\" monitor_type \" + i, function() {\n                            pm.expect(report.monitor_type).to.not.be.null;\n                        });\n                        pm.test(\" totaltime \" + i, function() {\n                            pm.expect(report.totaltime).to.not.be.null;\n                        });\n                        pm.test(\" sla_name \" + i, function() {\n                            pm.expect(report.sla_name).to.not.be.null;\n                        });\n                        pm.test(\" expected \" + i, function() {\n                            pm.expect(report.expected).to.not.be.null;\n                        });\n                        pm.test(\" totalmaintenancetime \" + i, function() {\n                            pm.expect(report.totalmaintenancetime).to.not.be.null;\n                        });\n                        pm.test(\" sla_id \" + i, function() {\n                            pm.expect(report.sla_id).to.not.be.null;\n                        });\n                        pm.test(\" TotalDownTime \" + i, function() {\n                            pm.expect(report.TotalDownTime).to.not.be.null;\n                        });\n                        pm.test(\" totaldowntime \" + i, function() {\n                            pm.expect(report.totaldowntime).to.not.be.null;\n                        });\n                        pm.test(\" businessid \" + i, function() {\n                            pm.expect(report.businessid).to.not.be.null;\n                        });\n                        pm.test(\" monitor_name \" + i, function() {\n                            pm.expect(report.monitor_name).to.not.be.null;\n                        });\n                        pm.test(\" targetname \" + i, function() {\n                            pm.expect(report.targetname).to.not.be.null;\n                        });\n                        pm.test(\" colour \" + i, function() {\n                            pm.expect(report.colour).to.not.be.null;\n                        });\n                        pm.test(\" overalltargets \" + i, function() {\n                            pm.expect(report.overalltargets).to.not.be.null;\n                        });\n                        if (report.overalltargets !== null && report.overalltargets.length > 0) {\n                            const target = report.overalltargets[0];\n                            pm.test(\" overalltargets operatorkey\" + i, function() {\n                                pm.expect(target.operatorkey).to.not.be.null;\n                            });\n                            pm.test(\" overalltargets operator\" + i, function() {\n                                pm.expect(target.operator).to.not.be.null;\n                            });\n                            pm.test(\" overalltargets name\" + i, function() {\n                                pm.expect(target.name).to.not.be.null;\n                            });\n                            pm.test(\" overalltargets target\" + i, function() {\n                                pm.expect(target.target).to.not.be.null;\n                            });\n                            pm.test(\" overalltargets colour\" + i, function() {\n                                pm.expect(target.colour).to.not.be.null;\n                            });\n                        }\n                    }\n                } else {\n                    if (Object.keys(firstReport).length > 16) {\n                        pm.test(\"availability SLA  new attribute added ... \", function() {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"availability SLA  attribute removed ... \", function() {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"no availability SLA  ... \", function() {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        } else {\n            pm.test(\"no availability SLA  ... \", function() {\n                pm.expect(false).to.be.true;\n            });\n        }\n    } else {\n        pm.test(\"availability SLA error\", function() {\n            pm.expect(false).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"availability SLA error\", function() {\n        pm.expect(false).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "// var jsonData = JSON.parse(responseBody);\n\n// tests[\"Status code is 200\"] = responseCode.code === 200;\n// tests[\"code\"] = jsonData.code === 0;\n// tests[\"message\"] = jsonData.message === \"success\";\n\n// if (jsonData.code === 0) {\n\n//     if (jsonData.error === undefined) {\n\n//         if (jsonData.data.availabilityslareport) {\n\n//             if (jsonData.data.availabilityslareport.length > 0) {\n\n//                 if (Object.keys(jsonData.data.availabilityslareport[0]).length === 16) {\n\n//                     for (var i = 0; i < jsonData.data.availabilityslareport.length; i++) {\n\n//                         tests[\" operatorKey \"] = jsonData.data.availabilityslareport[i].operatorKey !== null;\n//                         tests[\" achieved \" + i] = jsonData.data.availabilityslareport[i].achieved !== null;\n//                         tests[\" monitor_id \" + i] = jsonData.data.availabilityslareport[i].monitor_id !== null;\n//                         tests[\" monitor_type \" + i] = jsonData.data.availabilityslareport[i].monitor_type !== null;\n//                         tests[\" totaltime \" + i] = jsonData.data.availabilityslareport[i].totaltime !== null;\n//                         tests[\" sla_name \" + i] = jsonData.data.availabilityslareport[i].sla_name !== null;\n//                         tests[\" expected \" + i] = jsonData.data.availabilityslareport[i].expected !== null;\n//                         tests[\" totalmaintenancetime \" + i] = jsonData.data.availabilityslareport[i].totalmaintenancetime !== null;\n//                         tests[\" sla_id \" + i] = jsonData.data.availabilityslareport[i].operatorKey !== null;\n//                         tests[\" TotalDownTime \" + i] = jsonData.data.availabilityslareport[i].TotalDownTime !== null;\n//                         tests[\" totaldowntime \" + i] = jsonData.data.availabilityslareport[i].totaldowntime !== null;\n//                         tests[\" businessid \" + i] = jsonData.data.availabilityslareport[i].businessid !== null;\n//                         tests[\" monitor_name \" + i] = jsonData.data.availabilityslareport[i].monitor_name !== null;\n//                         tests[\" targetname \" + i] = jsonData.data.availabilityslareport[i].targetname !== null;\n//                         tests[\" colour \" + i] = jsonData.data.availabilityslareport[i].colour !== null;\n//                         tests[\" overalltargets \" + i] = jsonData.data.availabilityslareport[i].overalltargets !== null;\n//                         if(jsonData.data.availabilityslareport[i].overalltargets !== null && jsonData.data.availabilityslareport[i].overalltargets.length>0){\n                            \n//                             tests[\" overalltargets operatorkey\" + i] = jsonData.data.availabilityslareport[i].overalltargets[0].operatorkey !== null;\n//                             tests[\" overalltargets operator\" + i] = jsonData.data.availabilityslareport[i].overalltargets[0].operator !== null;\n//                             tests[\" overalltargets name\" + i] = jsonData.data.availabilityslareport[i].overalltargets[0].name !== null;\n//                             tests[\" overalltargets target\" + i] = jsonData.data.availabilityslareport[i].overalltargets[0].target !== null;\n//                             tests[\" overalltargets colour\" + i] = jsonData.data.availabilityslareport[i].overalltargets[0].colour !== null;\n                            \n//                         }\n//                     }\n                    \n//                 } else {\n\n//                     if (Object.keys(jsonData.data.availabilityslareport[0]).length > 16) {\n\n//                         tests[\"availability SLA  new attribute added ... \"] = false;\n\n\n//                     } else {\n\n//                         tests[\"availability SLA  attribute removed ... \"]=false;\n//                     }\n\n//                 }\n\n//             } else {\n\n//                 tests[\"no availability SLA  ... \"] = false;\n//             }\n\n\n//         } else {\n\n//             tests[\"no availability SLA  ... \"] = false;\n//         }\n\n//     } else {\n\n//         tests[\"availability SLA error\"] = false;\n//     }\n\n// } else {\n\n//     tests[\"availability SLA error\"] = false;\n// }\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"code\"] = jsonData.code === 0;\ntests[\"message\"] = jsonData.message === \"success\";\n\nif (jsonData.code === 0) {\n\n    if (jsonData.error === undefined) {\n\n        if (jsonData.data.availabilityslareport) {\n\n            if (jsonData.data.availabilityslareport.length > 0) {\n\n                if (Object.keys(jsonData.data.availabilityslareport[0]).length === 16) {\n\n                    for (var i = 0; i < jsonData.data.availabilityslareport.length; i++) {\n\n                        tests[\" operatorKey \"] = jsonData.data.availabilityslareport[i].operatorKey !== null;\n                        tests[\" achieved \" ] = jsonData.data.availabilityslareport[i].achieved !== null;\n                        tests[\" monitor_id \"  ] = jsonData.data.availabilityslareport[i].monitor_id !== null;\n                        tests[\" monitor_type \"  ] = jsonData.data.availabilityslareport[i].monitor_type !== null;\n                        tests[\" totaltime \"  ] = jsonData.data.availabilityslareport[i].totaltime !== null;\n                        tests[\" sla_name \"  ] = jsonData.data.availabilityslareport[i].sla_name !== null;\n                        tests[\" expected \"  ] = jsonData.data.availabilityslareport[i].expected !== null;\n                        tests[\" totalmaintenancetime \"  ] = jsonData.data.availabilityslareport[i].totalmaintenancetime !== null;\n                        tests[\" sla_id \"  ] = jsonData.data.availabilityslareport[i].operatorKey !== null;\n                        tests[\" TotalDownTime \"  ] = jsonData.data.availabilityslareport[i].TotalDownTime !== null;\n                        tests[\" totaldowntime \"  ] = jsonData.data.availabilityslareport[i].totaldowntime !== null;\n                        tests[\" businessid \"  ] = jsonData.data.availabilityslareport[i].businessid !== null;\n                        tests[\" monitor_name \"  ] = jsonData.data.availabilityslareport[i].monitor_name !== null;\n                        tests[\" targetname \"  ] = jsonData.data.availabilityslareport[i].targetname !== null;\n                        tests[\" colour \"  ] = jsonData.data.availabilityslareport[i].colour !== null;\n                        tests[\" overalltargets \"  ] = jsonData.data.availabilityslareport[i].overalltargets !== null;\n                        if(jsonData.data.availabilityslareport[i].overalltargets !== null && jsonData.data.availabilityslareport[i].overalltargets.length>0){\n                            \n                            tests[\" overalltargets operatorkey\"  ] = jsonData.data.availabilityslareport[i].overalltargets[0].operatorkey !== null;\n                            tests[\" overalltargets operator\"  ] = jsonData.data.availabilityslareport[i].overalltargets[0].operator !== null;\n                            tests[\" overalltargets name\"  ] = jsonData.data.availabilityslareport[i].overalltargets[0].name !== null;\n                            tests[\" overalltargets target\"  ] = jsonData.data.availabilityslareport[i].overalltargets[0].target !== null;\n                            tests[\" overalltargets colour\"  ] = jsonData.data.availabilityslareport[i].overalltargets[0].colour !== null;\n                            \n                        }\n                    }\n                    \n                } else {\n\n                    if (Object.keys(jsonData.data.availabilityslareport[0]).length > 16) {\n\n                        tests[\"availability SLA  new attribute added ... \"] = false;\n\n\n                    } else {\n\n                        tests[\"availability SLA  attribute removed ... \"]=false;\n                    }\n\n                }\n\n            } else {\n\n                tests[\"no availability SLA  ... \"] = false;\n            }\n\n\n        } else {\n\n            tests[\"no availability SLA  ... \"] = false;\n        }\n\n    } else {\n\n        tests[\"availability SLA error\"] = false;\n    }\n\n} else {\n\n    tests[\"availability SLA error\"] = false;\n}",
    "output": "var response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\npm.test(\"code\", function () {\n    pm.expect(response.code).to.eql(0);\n});\n\npm.test(\"message\", function () {\n    pm.expect(response.message).to.eql(\"success\");\n});\n\nif (response.code === 0) {\n    if (!response.hasOwnProperty('error')) {\n        if (nr.responsetimeslareport) {\n            if (nr.responsetimeslareport.length > 0) {\n                if (Object.keys(nr.responsetimeslareport[0]).length === 7) {\n                    for (var i = 0; i < nr.responsetimeslareport.length; i++) {\n                        pm.test(\"operatorKey \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].operatorKey).not.to.be.null;\n                        });\n                        pm.test(\"achieved \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].achieved).not.to.be.null;\n                        });\n                        pm.test(\"monitor_id \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].monitor_id).not.to.be.null;\n                        });\n                        pm.test(\"monitor_type \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].monitor_type).not.to.be.null;\n                        });\n                        pm.test(\"totaltime \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].totaltime).not.to.be.null;\n                        });\n                        pm.test(\"sla_name \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].sla_name).not.to.be.null;\n                        });\n                        pm.test(\"expected \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].expected).not.to.be.null;\n                        });\n                        pm.test(\"totalmaintenancetime \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].totalmaintenancetime).not.to.be.null;\n                        });\n                        pm.test(\"sla_id \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].operatorKey).not.to.be.null;\n                        });\n                        pm.test(\"TotalDownTime \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].TotalDownTime).not.to.be.null;\n                        });\n                        pm.test(\"totaldowntime \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].totaldowntime).not.to.be.null;\n                        });\n                        pm.test(\"businessid \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].businessid).not.to.be.null;\n                        });\n                        pm.test(\"monitor_name \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].monitor_name).not.to.be.null;\n                        });\n                        pm.test(\"targetname \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].targetname).not.to.be.null;\n                        });\n                        pm.test(\"colour \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].colour).not.to.be.null;\n                        });\n                        pm.test(\"overalltargets \" + i, function () {\n                            pm.expect(nr.responsetimeslareport[i].overalltargets).not.to.be.null;\n                        });\n                        if (nr.responsetimeslareport[i].overalltargets !== null && nr.responsetimeslareport[i].overalltargets.length > 0) {\n                            pm.test(\"overalltargets operatorkey \" + i, function () {\n                                pm.expect(nr.responsetimeslareport[i].overalltargets[0].operatorkey).not.to.be.null;\n                            });\n                            pm.test(\"overalltargets operator \" + i, function () {\n                                pm.expect(nr.responsetimeslareport[i].overalltargets[0].operator).not.to.be.null;\n                            });\n                            pm.test(\"overalltargets name \" + i, function () {\n                                pm.expect(nr.responsetimeslareport[i].overalltargets[0].name).not.to.be.null;\n                            });\n                            pm.test(\"overalltargets target \" + i, function () {\n                                pm.expect(nr.responsetimeslareport[i].overalltargets[0].target).not.to.be.null;\n                            });\n                            pm.test(\"overalltargets colour \" + i, function () {\n                                pm.expect(nr.responsetimeslareport[i].overalltargets[0].colour).not.to.be.null;\n                            });\n                            pm.test(\"overalltargets t0 \" + i, function () {\n                                pm.expect(nr.responsetimeslareport[i].overalltargets[0].t0).not.to.be.null;\n                            });\n                            pm.test(\"overalltargets achieved \" + i, function () {\n                                pm.expect(nr.responsetimeslareport[i].overalltargets[0].achieved).not.to.be.null;\n                            });\n                        }\n                    }\n                } else {\n                    if (Object.keys(nr.availabilityslareport[0]).length > 7) {\n                        pm.test(\"response SLA new attribute added ... \", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"response SLA attribute removed ... \", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"no response SLA ... \", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        } else {\n            pm.test(\"no response SLA ... \", function () {\n                pm.expect(false).to.be.true;\n            });\n        }\n    } else {\n        pm.test(\"response SLA error\", function () {\n            pm.expect(false).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"response SLA error\", function () {\n        pm.expect(false).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"code\"] = jsonData.code === 0;\ntests[\"message\"] = jsonData.message === \"success\";\n\nif (jsonData.code === 0) {\n\n    if (jsonData.error === undefined) {\n\n        if (jsonData.data.responsetimeslareport) {\n\n            if (jsonData.data.responsetimeslareport.length > 0) {\n\n                if (Object.keys(jsonData.data.responsetimeslareport[0]).length === 7) {\n\n                    for (var i = 0; i < jsonData.data.responsetimeslareport.length; i++) {\n\n                        tests[\" operatorKey \" + i] = jsonData.data.responsetimeslareport[i].operatorKey !== null;\n                        tests[\" achieved \" + i] = jsonData.data.responsetimeslareport[i].achieved !== null;\n                        tests[\" monitor_id \" + i] = jsonData.data.responsetimeslareport[i].monitor_id !== null;\n                        tests[\" monitor_type \" + i] = jsonData.data.responsetimeslareport[i].monitor_type !== null;\n                        tests[\" totaltime \" + i] = jsonData.data.responsetimeslareport[i].totaltime !== null;\n                        tests[\" sla_name \" + i] = jsonData.data.responsetimeslareport[i].sla_name !== null;\n                        tests[\" expected \" + i] = jsonData.data.responsetimeslareport[i].expected !== null;\n                        tests[\" totalmaintenancetime \" + i] = jsonData.data.responsetimeslareport[i].totalmaintenancetime !== null;\n                        tests[\" sla_id \" + i] = jsonData.data.responsetimeslareport[i].operatorKey !== null;\n                        tests[\" TotalDownTime \" + i] = jsonData.data.responsetimeslareport[i].TotalDownTime !== null;\n                        tests[\" totaldowntime \" + i] = jsonData.data.responsetimeslareport[i].totaldowntime !== null;\n                        tests[\" businessid \" + i] = jsonData.data.responsetimeslareport[i].businessid !== null;\n                        tests[\" monitor_name \" + i] = jsonData.data.responsetimeslareport[i].monitor_name !== null;\n                        tests[\" targetname \" + i] = jsonData.data.responsetimeslareport[i].targetname !== null;\n                        tests[\" colour \" + i] = jsonData.data.responsetimeslareport[i].colour !== null;\n                        tests[\" overalltargets \" + i] = jsonData.data.responsetimeslareport[i].overalltargets !== null;\n                        if(jsonData.data.responsetimeslareport[i].overalltargets !== null && jsonData.data.responsetimeslareport[i].overalltargets.length>0){\n                            \n                            tests[\" overalltargets operatorkey\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].operatorkey !== null;\n                            tests[\" overalltargets operator\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].operator !== null;\n                            tests[\" overalltargets name\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].name !== null;\n                            tests[\" overalltargets target\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].target !== null;\n                            tests[\" overalltargets colour\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].colour !== null;\n                            tests[\" overalltargets t0\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].t0 !== null;\n                            tests[\" overalltargets achieved\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].achieved !== null;\n                            \n                        }\n                    }\n                    \n                } else {\n\n                    if (Object.keys(jsonData.data.availabilityslareport[0]).length > 7) {\n\n                        tests[\"response SLA new attribute added ... \"] = false;\n\n\n                    } else {\n\n                        tests[\" response SLA attribute removed ... \"]=false;\n                    }\n\n                }\n\n            } else {\n\n                tests[\"no response SLA ... \"] = false;\n            }\n\n\n        } else {\n\n            tests[\"no response SLA ... \"] = false;\n        }\n\n    } else {\n\n        tests[\"response SLA error\"] = false;\n    }\n\n} else {\n\n    tests[\"response SLA error\"] = false;\n}",
    "output": "var response = pm.response.json();\n\npm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\npm.test(\"code\", function () {\n    pm.expect(response.code).to.equal(0);\n});\n\npm.test(\"message\", function () {\n    pm.expect(response.message).to.equal(\"success\");\n});\n\nif (response.code === 0) {\n    if (response.error === undefined) {\n        if (response.data.responsetimeslareport) {\n            if (response.data.responsetimeslareport.length > 0) {\n                if (Object.keys(response.data.responsetimeslareport[0]).length === 7) {\n                    for (var i = 0; i < response.data.responsetimeslareport.length; i++) {\n                        pm.test(\"operatorKey \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].operatorKey).to.not.be.null;\n                        });\n                        pm.test(\"achieved \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].achieved).to.not.be.null;\n                        });\n                        pm.test(\"monitor_id \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].monitor_id).to.not.be.null;\n                        });\n                        pm.test(\"monitor_type \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].monitor_type).to.not.be.null;\n                        });\n                        pm.test(\"totaltime \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].totaltime).to.not.be.null;\n                        });\n                        pm.test(\"sla_name \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].sla_name).to.not.be.null;\n                        });\n                        pm.test(\"expected \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].expected).to.not.be.null;\n                        });\n                        pm.test(\"totalmaintenancetime \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].totalmaintenancetime).to.not.be.null;\n                        });\n                        pm.test(\"sla_id \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].operatorKey).to.not.be.null;\n                        });\n                        pm.test(\"TotalDownTime \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].TotalDownTime).to.not.be.null;\n                        });\n                        pm.test(\"totaldowntime \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].totaldowntime).to.not.be.null;\n                        });\n                        pm.test(\"businessid \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].businessid).to.not.be.null;\n                        });\n                        pm.test(\"monitor_name \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].monitor_name).to.not.be.null;\n                        });\n                        pm.test(\"targetname \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].targetname).to.not.be.null;\n                        });\n                        pm.test(\"colour \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].colour).to.not.be.null;\n                        });\n                        pm.test(\"overalltargets \" + i, function () {\n                            pm.expect(response.data.responsetimeslareport[i].overalltargets).to.not.be.null;\n                        });\n                        if (response.data.responsetimeslareport[i].overalltargets !== null && response.data.responsetimeslareport[i].overalltargets.length > 0) {\n                            pm.test(\"overalltargets operatorkey \" + i, function () {\n                                pm.expect(response.data.responsetimeslareport[i].overalltargets[0].operatorkey).to.not.be.null;\n                            });\n                            pm.test(\"overalltargets operator \" + i, function () {\n                                pm.expect(response.data.responsetimeslareport[i].overalltargets[0].operator).to.not.be.null;\n                            });\n                            pm.test(\"overalltargets name \" + i, function () {\n                                pm.expect(response.data.responsetimeslareport[i].overalltargets[0].name).to.not.be.null;\n                            });\n                            pm.test(\"overalltargets target \" + i, function () {\n                                pm.expect(response.data.responsetimeslareport[i].overalltargets[0].target).to.not.be.null;\n                            });\n                            pm.test(\"overalltargets colour \" + i, function () {\n                                pm.expect(response.data.responsetimeslareport[i].overalltargets[0].colour).to.not.be.null;\n                            });\n                            pm.test(\"overalltargets t0 \" + i, function () {\n                                pm.expect(response.data.responsetimeslareport[i].overalltargets[0].t0).to.not.be.null;\n                            });\n                            pm.test(\"overalltargets achieved \" + i, function () {\n                                pm.expect(response.data.responsetimeslareport[i].overalltargets[0].achieved).to.not.be.null;\n                            });\n                        }\n                    }\n                } else {\n                    if (Object.keys(response.data.availabilityslareport[0]).length > 7) {\n                        pm.test(\"response SLA new attribute added ... \", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    } else {\n                        pm.test(\"response SLA attribute removed ... \", function () {\n                            pm.expect(false).to.be.true;\n                        });\n                    }\n                }\n            } else {\n                pm.test(\"no response SLA ... \", function () {\n                    pm.expect(false).to.be.true;\n                });\n            }\n        } else {\n            pm.test(\"no response SLA ... \", function () {\n                pm.expect(false).to.be.true;\n            });\n        }\n    } else {\n        pm.test(\"response SLA error\", function () {\n            pm.expect(false).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"response SLA error\", function () {\n        pm.expect(false).to.be.true;\n    });\n}\n\npm.environment.set(\"nextRequest\", \"null\");"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "var jsonData = JSON.parse(responseBody);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"code\"] = jsonData.code === 0;\ntests[\"message\"] = jsonData.message === \"success\";\n\nif (jsonData.code === 0) {\n\n    if (jsonData.error === undefined) {\n\n        if (jsonData.data.responsetimeslareport) {\n\n            if (jsonData.data.responsetimeslareport.length > 0) {\n\n                if (Object.keys(jsonData.data.responsetimeslareport[0]).length === 7) {\n\n                    for (var i = 0; i < jsonData.data.responsetimeslareport.length; i++) {\n\n                        tests[\" operatorKey \" + i] = jsonData.data.responsetimeslareport[i].operatorKey !== null;\n                        tests[\" achieved \" + i] = jsonData.data.responsetimeslareport[i].achieved !== null;\n                        tests[\" monitor_id \" + i] = jsonData.data.responsetimeslareport[i].monitor_id !== null;\n                        tests[\" monitor_type \" + i] = jsonData.data.responsetimeslareport[i].monitor_type !== null;\n                        tests[\" totaltime \" + i] = jsonData.data.responsetimeslareport[i].totaltime !== null;\n                        tests[\" sla_name \" + i] = jsonData.data.responsetimeslareport[i].sla_name !== null;\n                        tests[\" expected \" + i] = jsonData.data.responsetimeslareport[i].expected !== null;\n                        tests[\" totalmaintenancetime \" + i] = jsonData.data.responsetimeslareport[i].totalmaintenancetime !== null;\n                        tests[\" sla_id \" + i] = jsonData.data.responsetimeslareport[i].operatorKey !== null;\n                        tests[\" TotalDownTime \" + i] = jsonData.data.responsetimeslareport[i].TotalDownTime !== null;\n                        tests[\" totaldowntime \" + i] = jsonData.data.responsetimeslareport[i].totaldowntime !== null;\n                        tests[\" businessid \" + i] = jsonData.data.responsetimeslareport[i].businessid !== null;\n                        tests[\" monitor_name \" + i] = jsonData.data.responsetimeslareport[i].monitor_name !== null;\n                        tests[\" targetname \" + i] = jsonData.data.responsetimeslareport[i].targetname !== null;\n                        tests[\" colour \" + i] = jsonData.data.responsetimeslareport[i].colour !== null;\n                        tests[\" overalltargets \" + i] = jsonData.data.responsetimeslareport[i].overalltargets !== null;\n                        if(jsonData.data.responsetimeslareport[i].overalltargets !== null && jsonData.data.responsetimeslareport[i].overalltargets.length>0){\n                            \n                            tests[\" overalltargets operatorkey\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].operatorkey !== null;\n                            tests[\" overalltargets operator\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].operator !== null;\n                            tests[\" overalltargets name\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].name !== null;\n                            tests[\" overalltargets target\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].target !== null;\n                            tests[\" overalltargets colour\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].colour !== null;\n                            tests[\" overalltargets t0\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].t0 !== null;\n                            tests[\" overalltargets achieved\" + i] = jsonData.data.responsetimeslareport[i].overalltargets[0].achieved !== null;\n                            \n                        }\n                    }\n                    \n                } else {\n\n                    if (Object.keys(jsonData.data.availabilityslareport[0]).length > 7) {\n\n                        tests[\"response SLA new attribute added ... \"] = false;\n\n\n                    } else {\n\n                        tests[\" response SLA attribute removed ... \"]=false;\n                    }\n\n                }\n\n            } else {\n\n                tests[\"no response SLA ... \"] = false;\n            }\n\n\n        } else {\n\n            tests[\"no response SLA ... \"] = false;\n        }\n\n    } else {\n\n        tests[\"response SLA error\"] = false;\n    }\n\n} else {\n\n    tests[\"response SLA error\"] = false;\n}\n\npostman.setNextRequest(\"null\");",
    "output": "pm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\n// Check report and tags\npm.test(\"report\", function () {\n    pm.expect(nr.hasOwnProperty(\"report\") && nr.report !== null).to.be.true;\n});\n\npm.test(\"tags\", function () {\n    pm.expect(nr.report[0].tags !== null).to.be.true;\n});\n\n// Info data validation\nif (nr.hasOwnProperty(\"info\")) {\n    const info = nr.info;\n\n    pm.test(\"end_time\", function () {\n        pm.expect(info.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n\n    pm.test(\"report_name\", function () {\n        pm.expect(info.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n\n    pm.test(\"limit\", function () {\n        pm.expect(info.hasOwnProperty(\"limit\")).to.be.true;\n    });\n\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(info.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n\n    pm.test(\"period_name\", function () {\n        pm.expect(info.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(info.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n\n    pm.test(\"generated_time\", function () {\n        pm.expect(info.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n\n    pm.test(\"start_time\", function () {\n        pm.expect(info.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n\n    pm.test(\"report_type\", function () {\n        pm.expect(info.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n\n    pm.test(\"monitor_type\", function () {\n        pm.expect(info.hasOwnProperty(\"monitor_type\")).to.be.true;\n    });\n\n    pm.test(\"period\", function () {\n        pm.expect(info.hasOwnProperty(\"period\")).to.be.true;\n    });\n\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(info.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n\n    pm.test(\"timezone\", function () {\n        pm.expect(info.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n\n    // Value assertions\n    pm.test(\"Report Type is 15\", function () {\n        pm.expect(Number(info.report_type)).to.equal(15);\n    });\n\n    pm.test(\"Report Name\", function () {\n        pm.expect(info.report_name).to.equal(\"Top N Report\");  // <-- matches actual response value\n    });\n\n    pm.test(\"Top 10\", function () {\n        pm.expect(Number(info.limit)).to.equal(10);\n    });\n\n    pm.test(\"Monitor Type is HOMEPAGE\", function () {\n        pm.expect(info.monitor_type).to.equal(\"HOMEPAGE\");\n    });\n\n    pm.test(\"units\", function () {\n        pm.expect(info.hasOwnProperty(\"units\") && info.units !== null).to.be.true;\n    });\n\n} else {\n    pm.test(\"info node is missing\", function () {\n        pm.expect(nr.hasOwnProperty(\"info\")).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar response = JSON.parse(responseBody);\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags !== null\n\n//Info node validation\nif(responseBody.has(\"info\"))\n{\n//tests[\"resource_name\"] = responseBody.has(\"resource_name\");\ntests[\"end_time\"] = responseBody.has(\"end_time\");\ntests[\"report_name\"] = responseBody.has(\"report_name\");\ntests[\"limit\"] = responseBody.has(\"limit\");\ntests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\ntests[\"period_name\"] = responseBody.has(\"period_name\");\ntests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\ntests[\"generated_time\"] = responseBody.has(\"generated_time\");\ntests[\"start_time\"] = responseBody.has(\"start_time\");\ntests[\"report_type\"] = responseBody.has(\"report_type\");\ntests[\"monitor_type\"] = responseBody.has(\"monitor_type\");\ntests[\"period\"] = responseBody.has(\"period\");\ntests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\ntests[\"timezone\"] = responseBody.has(\"timezone\");\ntests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\ntests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\ntests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n\ntests[\"Monitor Type is HOMEPAGE\"] = response.data.info.monitor_type===\"HOMEPAGE\";\ntests[\"units\"] = responseBody.has(\"units\") && responseBody.units !== null;\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") && (responseBody.info !== null);}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response).to.have.property(\"report\") && pm.expect(response.report).to.not.be.null;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags).to.not.be.null;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response).to.have.property(\"end_time\");\n    });\n\n    pm.test(\"report_name\", function() {\n        pm.expect(response).to.have.property(\"report_name\");\n    });\n\n    pm.test(\"limit\", function() {\n        pm.expect(response).to.have.property(\"limit\");\n    });\n\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response).to.have.property(\"formatted_start_time\");\n    });\n\n    pm.test(\"period_name\", function() {\n        pm.expect(response).to.have.property(\"period_name\");\n    });\n\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response).to.have.property(\"formatted_end_time\");\n    });\n\n    pm.test(\"generated_time\", function() {\n        pm.expect(response).to.have.property(\"generated_time\");\n    });\n\n    pm.test(\"start_time\", function() {\n        pm.expect(response).to.have.property(\"start_time\");\n    });\n\n    pm.test(\"report_type\", function() {\n        pm.expect(response).to.have.property(\"report_type\");\n    });\n\n    pm.test(\"monitor_type\", function() {\n        pm.expect(response).to.have.property(\"monitor_type\");\n    });\n\n    pm.test(\"period\", function() {\n        pm.expect(response).to.have.property(\"period\");\n    });\n\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response).to.have.property(\"formatted_generated_time\");\n    });\n\n    pm.test(\"timezone\", function() {\n        pm.expect(response).to.have.property(\"timezone\");\n    });\n\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Reports\");\n    });\n\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n\n    pm.test(\"Monitor Type is URL\", function() {\n        pm.expect(nr.info.monitor_type).to.equal(\"URL\");\n    });\n\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n\n    if (response.hasOwnProperty(\"units\")) {\n        pm.test(\"responsetime Name\", function() {\n            pm.expect(nr.info.units.responsetime).to.equal(\"ms\");\n        });\n\n        pm.test(\"firstbyte_time Name\", function() {\n            pm.expect(nr.info.units.firstbyte_time).to.equal(\"ms\");\n        });\n\n        pm.test(\"throughput Name\", function() {\n            pm.expect(nr.info.units.throughput).to.equal(\"KB/sec\");\n        });\n    }\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response).to.have.property(\"info\");\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags !== null\n\n//Info node validation\nif(responseBody.has(\"info\"))\n{\n//tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n\ntests[\"end_time\"] = responseBody.has(\"end_time\");\ntests[\"report_name\"] = responseBody.has(\"report_name\");\ntests[\"limit\"] = responseBody.has(\"limit\");\ntests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\ntests[\"period_name\"] = responseBody.has(\"period_name\");\ntests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\ntests[\"generated_time\"] = responseBody.has(\"generated_time\");\ntests[\"start_time\"] = responseBody.has(\"start_time\");\ntests[\"report_type\"] = responseBody.has(\"report_type\");\ntests[\"monitor_type\"] = responseBody.has(\"monitor_type\");\ntests[\"period\"] = responseBody.has(\"period\");\ntests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\ntests[\"timezone\"] = responseBody.has(\"timezone\");\ntests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\ntests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\ntests[\"Top 10\"] = Number(response.data.info.limit) === 10;\ntests[\"Monitor Type is URL\"] = response.data.info.monitor_type===\"URL\";\ntests[\"Period is 0\"] = Number(response.data.info.period) === 0;\ntests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\nif(responseBody.has(\"units\"))\n{\ntests[\"responsetime Name\"] = response.data.info.units.responsetime === \"ms\";\ntests[\"firstbyte_time Name\"] = response.data.info.units.firstbyte_time === \"ms\";\ntests[\"throughput Name\"] = response.data.info.units.throughput === \"KB/sec\";\n}\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}",
    "output": "pm.test(\"Status code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response.hasOwnProperty(\"report\") && response.report !== null).to.be.true;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report && nr.report[0].tags !== null).to.be.true;\n});\n\n// Info node validation\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n\n    pm.test(\"report_name\", function() {\n        pm.expect(response.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n\n    pm.test(\"limit\", function() {\n        pm.expect(response.hasOwnProperty(\"limit\")).to.be.true;\n    });\n\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n\n    pm.test(\"period_name\", function() {\n        pm.expect(response.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n\n    pm.test(\"report_type\", function() {\n        pm.expect(response.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n\n    pm.test(\"monitor_type\", function() {\n        pm.expect(response.hasOwnProperty(\"monitor_type\")).to.be.true;\n    });\n\n    pm.test(\"period\", function() {\n        pm.expect(response.hasOwnProperty(\"period\")).to.be.true;\n    });\n\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n\n    pm.test(\"timezone\", function() {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Reports\");\n    });\n\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n\n    pm.test(\"Monitor Type is URL\", function() {\n        pm.expect(nr.info.monitor_type).to.equal(\"FILEUPLOAD\");\n    });\n\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n\n    if (response.hasOwnProperty(\"units\")) {\n        pm.test(\"responsetime Name\", function() {\n            pm.expect(nr.info.units.responsetime).to.equal(\"ms\");\n        });\n\n        pm.test(\"firstbyte_time Name\", function() {\n            pm.expect(nr.info.units.firstbyte_time).to.equal(\"ms\");\n        });\n\n        pm.test(\"throughput Name\", function() {\n            pm.expect(nr.info.units.throughput).to.equal(\"KB/sec\");\n        });\n    }\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags !== null\n\n//Info node validation\nif(responseBody.has(\"info\"))\n{\n//tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n\ntests[\"end_time\"] = responseBody.has(\"end_time\");\ntests[\"report_name\"] = responseBody.has(\"report_name\");\ntests[\"limit\"] = responseBody.has(\"limit\");\ntests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\ntests[\"period_name\"] = responseBody.has(\"period_name\");\ntests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\ntests[\"generated_time\"] = responseBody.has(\"generated_time\");\ntests[\"start_time\"] = responseBody.has(\"start_time\");\ntests[\"report_type\"] = responseBody.has(\"report_type\");\ntests[\"monitor_type\"] = responseBody.has(\"monitor_type\");\ntests[\"period\"] = responseBody.has(\"period\");\ntests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\ntests[\"timezone\"] = responseBody.has(\"timezone\");\ntests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\ntests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\ntests[\"Top 10\"] = Number(response.data.info.limit) === 10;\ntests[\"Monitor Type is URL\"] = response.data.info.monitor_type===\"FILEUPLOAD\";\n\ntests[\"Period is 0\"] = Number(response.data.info.period) === 0;\ntests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\nif(responseBody.has(\"units\"))\n{\ntests[\"responsetime Name\"] = response.data.info.units.responsetime === \"ms\";\ntests[\"firstbyte_time Name\"] = response.data.info.units.firstbyte_time === \"ms\";\ntests[\"throughput Name\"] = response.data.info.units.throughput === \"KB/sec\";\n}\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response.hasOwnProperty(\"report\") && response.report !== null).to.be.true;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags).to.not.be.null;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"report_name\", function() {\n        pm.expect(response.hasOwnProperty(\"report_name\")).to.be.true;\n    });\n    pm.test(\"limit\", function() {\n        pm.expect(response.hasOwnProperty(\"limit\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"period_name\", function() {\n        pm.expect(response.hasOwnProperty(\"period_name\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"report_type\", function() {\n        pm.expect(response.hasOwnProperty(\"report_type\")).to.be.true;\n    });\n    pm.test(\"monitor_type\", function() {\n        pm.expect(response.hasOwnProperty(\"monitor_type\")).to.be.true;\n    });\n    pm.test(\"period\", function() {\n        pm.expect(response.hasOwnProperty(\"period\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"timezone\", function() {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Reports\");\n    });\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n    pm.test(\"Monitor Type is DNS\", function() {\n        pm.expect(nr.info.monitor_type).to.equal(\"DNS\");\n    });\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n    pm.test(\"Attribute Name\", function() {\n        pm.expect(nr.info.attribute_name).to.equal(\"response_time\");\n    });\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function() {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function() {\n    pm.expect(diff).to.equal(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function() {\n    pm.expect(generatedHour).to.equal(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags !== null\n\n\nif (responseBody.has(\"info\")) {\n    //tests[\"resource_name\"] = responseBody.has(\"resource_name\");\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"report_name\"] = responseBody.has(\"report_name\");\n    tests[\"limit\"] = responseBody.has(\"limit\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"period_name\"] = responseBody.has(\"period_name\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"report_type\"] = responseBody.has(\"report_type\");\n    tests[\"monitor_type\"] = responseBody.has(\"monitor_type\");\n    tests[\"period\"] = responseBody.has(\"period\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is DNS\"] = response.data.info.monitor_type === \"DNS\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    tests[\"Attribute Name\"] = response.data.info.attribute_name === \"response_time\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\n\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response.hasOwnProperty(\"report\") && response.report !== null).to.be.true;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags !== null).to.be.true;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"timezone\", function() {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.eql(15);\n    });\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.eql(\"Top N Reports\");\n    });\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.eql(10);\n    });\n    pm.test(\"Monitor Type is PORT\", function() {\n        pm.expect(nr.info.monitor_type).to.eql(\"PORT\");\n    });\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.eql(0);\n    });\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.eql(\"Last Hour\");\n    });\n    pm.test(\"Attribute Name\", function() {\n        pm.expect(nr.info.attribute_name).to.eql(\"response_time\");\n    });\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.false;\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function() {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function() {\n    pm.expect(diff).to.eql(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function() {\n    pm.expect(generatedHour).to.eql(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags !== null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is PORT\"] = response.data.info.monitor_type === \"PORT\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    tests[\"Attribute Name\"] = response.data.info.attribute_name === \"response_time\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\n\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response.hasOwnProperty(\"report\") && response.report !== null).to.be.true;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags !== null).to.be.true;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n\n    pm.test(\"timezone\", function() {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Report\");\n    });\n\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n\n    pm.test(\"Monitor Type is UDP\", function() {\n        pm.expect(nr.info.monitor_type).to.equal(\"UDP\");\n    });\n\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n\n    pm.test(\"Attribute Name\", function() {\n        pm.expect(nr.info.attribute_name).to.equal(\"response_time\");\n    });\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function() {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function() {\n    pm.expect(diff).to.equal(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function() {\n    pm.expect(generatedHour).to.equal(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags !== null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Report\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is UDP\"] = response.data.info.monitor_type === \"UDP\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    tests[\"Attribute Name\"] = response.data.info.attribute_name === \"response_time\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\n\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response).to.haveOwnProperty(\"report\");\n    pm.expect(response.report).to.not.be.null;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags).to.not.be.null;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response).to.haveOwnProperty(\"end_time\");\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response).to.haveOwnProperty(\"formatted_start_time\");\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response).to.haveOwnProperty(\"formatted_end_time\");\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(response).to.haveOwnProperty(\"generated_time\");\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(response).to.haveOwnProperty(\"start_time\");\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response).to.haveOwnProperty(\"formatted_generated_time\");\n    });\n    pm.test(\"timezone\", function() {\n        pm.expect(response).to.haveOwnProperty(\"timezone\");\n    });\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Report\");\n    });\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n    pm.test(\"Monitor Type is UDP\", function() {\n        pm.expect(nr.info.monitor_type).to.equal(\"GRPC\");\n    });\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n    pm.test(\"Attribute Name\", function() {\n        pm.expect(nr.info.attribute_name).to.equal(\"response_time\");\n    });\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response).to.haveOwnProperty(\"info\");\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function() {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function() {\n    pm.expect(diff).to.equal(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function() {\n    pm.expect(generatedHour).to.equal(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags !== null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Report\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is UDP\"] = response.data.info.monitor_type === \"GRPC\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    tests[\"Attribute Name\"] = response.data.info.attribute_name === \"response_time\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\n\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response.hasOwnProperty(\"report\") && response.report !== null).to.be.true;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags).to.not.be.null;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n\n    pm.test(\"timezone\", function() {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Reports\");\n    });\n\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n\n    pm.test(\"Monitor Type is PING\", function() {\n        pm.expect(nr.info.monitor_type).to.equal(\"PING\");\n    });\n\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n\n    pm.test(\"Attribute Name\", function() {\n        pm.expect(nr.info.attribute_name).to.equal(\"response_time\");\n    });\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\") && response.info !== null).to.be.true;\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function() {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function() {\n    pm.expect(diff).to.equal(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function() {\n    pm.expect(generatedHour).to.equal(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags !== null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is PING\"] = response.data.info.monitor_type === \"PING\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    tests[\"Attribute Name\"] = response.data.info.attribute_name === \"response_time\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") && (responseBody.info !== null);}\n\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response.hasOwnProperty(\"report\") && (response.report !== null)).to.be.true;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags).to.not.be.null;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"timezone\", function() {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.eql(15);\n    });\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.eql(\"Top N Reports\");\n    });\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.eql(10);\n    });\n    pm.test(\"Monitor Type is SOAP\", function() {\n        pm.expect(nr.info.monitor_type).to.eql(\"SOAP\");\n    });\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.eql(0);\n    });\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.eql(\"Last Hour\");\n    });\n    if (response.hasOwnProperty(\"units\")) {\n        pm.test(\"responsetime Name\", function() {\n            pm.expect(nr.info.units.responsetime).to.eql(\"ms\");\n        });\n        pm.test(\"firstbyte_time Name\", function() {\n            pm.expect(nr.info.units.firstbyte_time).to.eql(\"ms\");\n        });\n        pm.test(\"throughput Name\", function() {\n            pm.expect(nr.info.units.throughput).to.eql(\"KB/sec\");\n        });\n    }\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function() {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function() {\n    pm.expect(diff).to.eql(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function() {\n    pm.expect(generatedHour).to.eql(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags!==null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is SOAP\"] = response.data.info.monitor_type === \"SOAP\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    if (responseBody.has(\"units\")) {\n        tests[\"responsetime Name\"] = response.data.info.units.responsetime === \"ms\";\n        tests[\"firstbyte_time Name\"] = response.data.info.units.firstbyte_time === \"ms\";\n        tests[\"throughput Name\"] = response.data.info.units.throughput === \"KB/sec\";\n    }\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function () {\n    pm.expect(response.hasOwnProperty(\"report\") && response.report !== null).to.be.true;\n});\n\npm.test(\"tags\", function () {\n    pm.expect(nr.report[0].tags !== null).to.be.true;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function () {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n\n    pm.test(\"generated_time\", function () {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n\n    pm.test(\"start_time\", function () {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n\n    pm.test(\"timezone\", function () {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n\n    pm.test(\"Report Type is 15\", function () {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n\n    pm.test(\"Report Name\", function () {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Reports\");\n    });\n\n    pm.test(\"Top 10\", function () {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n\n    pm.test(\"Monitor Type is RESTAPI\", function () {\n        pm.expect(nr.info.monitor_type).to.equal(\"RESTAPI\");\n    });\n\n    pm.test(\"Period is 0\", function () {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n\n    pm.test(\"Period Name\", function () {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n\n    pm.test(\"Attribute Name\", function () {\n        pm.expect(nr.info.attribute_name).to.equal(\"response_time\");\n    });\n} else {\n    pm.test(\"info node is missing\", function () {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function () {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function () {\n    pm.expect(diff).to.equal(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function () {\n    pm.expect(generatedHour).to.equal(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags!==null\n\nif(responseBody.has(\"info\"))\n{\ntests[\"end_time\"] = responseBody.has(\"end_time\");\ntests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\ntests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\ntests[\"generated_time\"] = responseBody.has(\"generated_time\");\ntests[\"start_time\"] = responseBody.has(\"start_time\");\ntests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\ntests[\"timezone\"] = responseBody.has(\"timezone\");\ntests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\ntests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\ntests[\"Top 10\"] = Number(response.data.info.limit) === 10;\ntests[\"Monitor Type is RESTAPI\"] = response.data.info.monitor_type===\"RESTAPI\";\ntests[\"Period is 0\"] = Number(response.data.info.period) === 0;\ntests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\ntests[\"Attribute Name\"] = response.data.info.attribute_name == \"response_time\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response.hasOwnProperty(\"report\")).to.be.true;\n    pm.expect(response.report).to.not.be.null;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags).to.not.be.null;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"timezone\", function() {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Reports\");\n    });\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n    pm.test(\"Monitor Type is PORT_FTP\", function() {\n        pm.expect(nr.info.monitor_type).to.equal(\"PORT_FTP\");\n    });\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n    pm.test(\"Attribute Name\", function() {\n        pm.expect(nr.info.attribute_name).to.equal(\"response_time\");\n    });\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function() {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function() {\n    pm.expect(diff).to.equal(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function() {\n    pm.expect(generatedHour).to.equal(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags!==null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is PORT_FTP\"] = response.data.info.monitor_type === \"PORT_FTP\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    tests[\"Attribute Name\"] = response.data.info.attribute_name === \"response_time\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\n\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function () {\n    pm.expect(response.hasOwnProperty(\"report\") && response.report !== null).to.be.true;\n});\n\npm.test(\"tags\", function () {\n    pm.expect(nr.report[0].tags !== null).to.be.true;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function () {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    \n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    \n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    \n    pm.test(\"generated_time\", function () {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    \n    pm.test(\"start_time\", function () {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    \n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    \n    pm.test(\"timezone\", function () {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n    \n    pm.test(\"Report Type is 15\", function () {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n    \n    pm.test(\"Report Name\", function () {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Reports\");\n    });\n    \n    pm.test(\"Top 10\", function () {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n    \n    pm.test(\"Monitor Type is FTP\", function () {\n        pm.expect(nr.info.monitor_type).to.equal(\"FTP\");\n    });\n    \n    pm.test(\"Period is 0\", function () {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n    \n    pm.test(\"Period Name\", function () {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n    \n    pm.test(\"Attribute Name\", function () {\n        pm.expect(nr.info.attribute_name).to.equal(\"response_time\");\n    });\n} else {\n    pm.test(\"info node is missing\", function () {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function () {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function () {\n    pm.expect(diff).to.equal(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function () {\n    pm.expect(generatedHour).to.equal(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags !== null\n\nif(responseBody.has(\"info\"))\n{\ntests[\"end_time\"] = responseBody.has(\"end_time\");\ntests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\ntests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\ntests[\"generated_time\"] = responseBody.has(\"generated_time\");\ntests[\"start_time\"] = responseBody.has(\"start_time\");\ntests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\ntests[\"timezone\"] = responseBody.has(\"timezone\");\ntests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\ntests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\ntests[\"Top 10\"] = Number(response.data.info.limit) === 10;\ntests[\"Monitor Type is FTP\"] = response.data.info.monitor_type===\"FTP\";\ntests[\"Period is 0\"] = Number(response.data.info.period) === 0;\ntests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\ntests[\"Attribute Name\"] = response.data.info.attribute_name === \"response_time\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response).to.have.property(\"report\");\n    pm.expect(response.report).not.to.be.null;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags).not.to.be.null;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response.info).to.have.property(\"end_time\");\n    });\n\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.info).to.have.property(\"formatted_start_time\");\n    });\n\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.info).to.have.property(\"formatted_end_time\");\n    });\n\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.info).to.have.property(\"generated_time\");\n    });\n\n    pm.test(\"start_time\", function() {\n        pm.expect(response.info).to.have.property(\"start_time\");\n    });\n\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.info).to.have.property(\"formatted_generated_time\");\n    });\n\n    pm.test(\"timezone\", function() {\n        pm.expect(response.info).to.have.property(\"timezone\");\n    });\n\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.eql(15);\n    });\n\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.eql(\"Top N Reports\");\n    });\n\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.eql(10);\n    });\n\n    pm.test(\"Monitor Type is PORT-SMTP\", function() {\n        pm.expect(nr.info.monitor_type).to.eql(\"PORT-SMTP\");\n    });\n\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.eql(0);\n    });\n\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.eql(\"Last Hour\");\n    });\n\n    pm.test(\"Attribute Name\", function() {\n        pm.expect(nr.info.attribute_name).to.eql(\"response_time\");\n    });\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response).to.have.property(\"info\");\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function() {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function() {\n    pm.expect(diff).to.eql(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function() {\n    pm.expect(generatedHour).to.eql(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags !== null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is PORT-SMTP\"] = response.data.info.monitor_type === \"PORT-SMTP\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    tests[\"Attribute Name\"] = response.data.info.attribute_name === \"response_time\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response.hasOwnProperty(\"report\") && response.report !== null).to.be.true;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags !== null).to.be.true;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n    pm.test(\"timezone\", function() {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.eql(15);\n    });\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.eql(\"Top N Reports\");\n    });\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.eql(10);\n    });\n    pm.test(\"Monitor Type is REALBROWSER\", function() {\n        pm.expect(nr.info.monitor_type).to.eql(\"REALBROWSER\");\n    });\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.eql(0);\n    });\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.eql(\"Last Hour\");\n    });\n    pm.test(\"Attribute Name\", function() {\n        pm.expect(nr.info.attribute_name).to.eql(\"transaction_time\");\n    });\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function() {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function() {\n    pm.expect(diff).to.eql(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function() {\n    pm.expect(generatedHour).to.eql(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags !== null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is REALBROWSER\"] = response.data.info.monitor_type === \"REALBROWSER\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    tests[\"Attribute Name\"] = response.data.info.attribute_name === \"transaction_time\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function () {\n    pm.expect(response.hasOwnProperty(\"report\") && response.report !== null).to.be.true;\n});\n\nif (nr.report && Array.isArray(nr.report)) {\n    pm.test(\"tags\", function () {\n        pm.expect(nr.report[0].tags).not.to.be.null;\n    });\n\n    var success = true;\n    for (var i = 0; i < nr.report.length - 1; i++) {\n        if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n            success = false;\n            break;\n        }\n    }\n\n    pm.test(\"Sorted Based on Response Time\", function () {\n        pm.expect(success).to.be.true;\n    });\n}\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function () {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n\n    pm.test(\"generated_time\", function () {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n\n    pm.test(\"start_time\", function () {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n\n    pm.test(\"timezone\", function () {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n\n    pm.test(\"Report Type is 15\", function () {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n\n    pm.test(\"Report Name\", function () {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Reports\");\n    });\n\n    pm.test(\"Top 10\", function () {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n\n    pm.test(\"Monitor Type is URL-SEQ\", function () {\n        pm.expect(nr.info.monitor_type).to.equal(\"URL-SEQ\");\n    });\n\n    pm.test(\"Period is 0\", function () {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n\n    pm.test(\"Period Name\", function () {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n} else {\n    pm.test(\"info node is missing\", function () {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\nif (nr.info && nr.info.start_time && nr.info.end_time) {\n    var startTime = Date.parse(nr.info.start_time);\n    var endTime = Date.parse(nr.info.end_time);\n    var diff = endTime - startTime;\n\n    pm.test(\"One Hour Data\", function () {\n        pm.expect(diff).to.equal(3600000);\n    });\n\n    var generatedHour = new Date(nr.info.generated_time).getHours();\n    var endHour = new Date(nr.info.end_time).getHours();\n\n    pm.test(\"Last Hour Data\", function () {\n        pm.expect(generatedHour).to.equal(endHour);\n    });\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null)\ntests[\"tags\"] = response.data.report[0].tags!==null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is URL-SEQ\"] = response.data.info.monitor_type === \"URL-SEQ\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n}\n\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response.hasOwnProperty(\"report\") && response.report !== null).to.be.true;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags).to.not.be.null;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n\n    pm.test(\"timezone\", function() {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Reports\");\n    });\n\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n\n    pm.test(\"Monitor Type is PORT-SMTP\", function() {\n        pm.expect(nr.info.monitor_type).to.equal(\"SMTP\");\n    });\n\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n\n    pm.test(\"response_time Name\", function() {\n        pm.expect(nr.info.units.response_time).to.equal(\"ms\");\n    });\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function() {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function() {\n    pm.expect(diff).to.equal(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function() {\n    pm.expect(generatedHour).to.equal(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null);\ntests[\"tags\"] = response.data.report[0].tags !== null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is PORT-SMTP\"] = response.data.info.monitor_type === \"SMTP\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    tests[\"response_time Name\"] = response.data.info.units.response_time === \"ms\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function () {\n    pm.expect(response).to.have.property(\"report\");\n    pm.expect(response.report).to.not.be.null;\n});\n\npm.test(\"tags\", function () {\n    pm.expect(nr.report[0].tags).to.not.be.null;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function () {\n        pm.expect(response).to.have.property(\"end_time\");\n    });\n    pm.test(\"formatted_start_time\", function () {\n        pm.expect(response).to.have.property(\"formatted_start_time\");\n    });\n    pm.test(\"formatted_end_time\", function () {\n        pm.expect(response).to.have.property(\"formatted_end_time\");\n    });\n    pm.test(\"generated_time\", function () {\n        pm.expect(response).to.have.property(\"generated_time\");\n    });\n    pm.test(\"start_time\", function () {\n        pm.expect(response).to.have.property(\"start_time\");\n    });\n    pm.test(\"formatted_generated_time\", function () {\n        pm.expect(response).to.have.property(\"formatted_generated_time\");\n    });\n    pm.test(\"timezone\", function () {\n        pm.expect(response).to.have.property(\"timezone\");\n    });\n    pm.test(\"Report Type is 15\", function () {\n        pm.expect(Number(nr.info.report_type)).to.eql(15);\n    });\n    pm.test(\"Report Name\", function () {\n        pm.expect(nr.info.report_name).to.eql(\"Top N Reports\");\n    });\n    pm.test(\"Top 10\", function () {\n        pm.expect(Number(nr.info.limit)).to.eql(10);\n    });\n    pm.test(\"Monitor Type is PING\", function () {\n        pm.expect(nr.info.monitor_type).to.eql(\"PORT-POP\");\n    });\n    pm.test(\"Period is 0\", function () {\n        pm.expect(Number(nr.info.period)).to.eql(0);\n    });\n    pm.test(\"Period Name\", function () {\n        pm.expect(nr.info.period_name).to.eql(\"Last Hour\");\n    });\n    pm.test(\"Attribute Name\", function () {\n        pm.expect(nr.info.units.response_time).to.eql(\"ms\");\n    });\n} else {\n    pm.test(\"info node is missing\", function () {\n        pm.expect(response).to.have.property(\"info\");\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function () {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function () {\n    pm.expect(diff).to.eql(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function () {\n    pm.expect(generatedHour).to.eql(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null);\ntests[\"tags\"] = response.data.report[0].tags !== null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is PING\"] = response.data.info.monitor_type === \"PORT-POP\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    tests[\"Attribute Name\"] = response.data.info.units.response_time === \"ms\";\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\n\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "pm.test(\"Response code is 200\", function() {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\nvar response = pm.response.json();\nvar nr = response.data || {};\n\npm.test(\"report\", function() {\n    pm.expect(response.hasOwnProperty(\"report\") && response.report !== null).to.be.true;\n});\n\npm.test(\"tags\", function() {\n    pm.expect(nr.report[0].tags).to.not.be.null;\n});\n\nif (response.hasOwnProperty(\"info\")) {\n    pm.test(\"end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"end_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_end_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_end_time\")).to.be.true;\n    });\n\n    pm.test(\"generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"generated_time\")).to.be.true;\n    });\n\n    pm.test(\"start_time\", function() {\n        pm.expect(response.hasOwnProperty(\"start_time\")).to.be.true;\n    });\n\n    pm.test(\"formatted_generated_time\", function() {\n        pm.expect(response.hasOwnProperty(\"formatted_generated_time\")).to.be.true;\n    });\n\n    pm.test(\"timezone\", function() {\n        pm.expect(response.hasOwnProperty(\"timezone\")).to.be.true;\n    });\n\n    pm.test(\"Report Type is 15\", function() {\n        pm.expect(Number(nr.info.report_type)).to.equal(15);\n    });\n\n    pm.test(\"Report Name\", function() {\n        pm.expect(nr.info.report_name).to.equal(\"Top N Reports\");\n    });\n\n    pm.test(\"Top 10\", function() {\n        pm.expect(Number(nr.info.limit)).to.equal(10);\n    });\n\n    pm.test(\"Monitor Type is RESTAPISEQ\", function() {\n        pm.expect(nr.info.monitor_type).to.equal(\"RESTAPISEQ\");\n    });\n\n    pm.test(\"Period is 0\", function() {\n        pm.expect(Number(nr.info.period)).to.equal(0);\n    });\n\n    pm.test(\"Period Name\", function() {\n        pm.expect(nr.info.period_name).to.equal(\"Last Hour\");\n    });\n\n    if (response.hasOwnProperty(\"units\")) {\n        pm.test(\"Attribute response_time Name\", function() {\n            pm.expect(nr.info.units.response_time).to.equal(\"ms\");\n        });\n        //pm.test(\"Attribute transactiontime Name\", function() {\n        //    pm.expect(nr.info.units.transactiontime).to.equal(\"ms\");\n        //});\n    } else {\n        pm.test(\"No monitors in list\", function() {\n            pm.expect(response.hasOwnProperty(\"units\")).to.be.true;\n        });\n    }\n} else {\n    pm.test(\"info node is missing\", function() {\n        pm.expect(response.hasOwnProperty(\"info\")).to.be.true;\n    });\n}\n\nvar success = true;\nfor (var i = 0; i < nr.report.length - 1; i++) {\n    if (Number(nr.report[i].average) < Number(nr.report[i + 1].average)) {\n        success = false;\n        break;\n    }\n}\n\npm.test(\"Sorted Based on Response Time\", function() {\n    pm.expect(success).to.be.true;\n});\n\nvar startTime = Date.parse(nr.info.start_time);\nvar endTime = Date.parse(nr.info.end_time);\nvar diff = endTime - startTime;\n\npm.test(\"One Hour Data\", function() {\n    pm.expect(diff).to.equal(3600000);\n});\n\nvar generatedHour = new Date(nr.info.generated_time).getHours();\nvar endHour = new Date(nr.info.end_time).getHours();\n\npm.test(\"Last Hour Data\", function() {\n    pm.expect(generatedHour).to.equal(endHour);\n});"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "tests[\"Response code is 200\"] = responseCode.code === 200;\nvar response = JSON.parse(responseBody);\n\ntests[\"report\"] = responseBody.has(\"report\") && (responseBody.report !== null);\ntests[\"tags\"] = response.data.report[0].tags !== null\n\nif (responseBody.has(\"info\")) {\n    tests[\"end_time\"] = responseBody.has(\"end_time\");\n    tests[\"formatted_start_time\"] = responseBody.has(\"formatted_start_time\");\n    tests[\"formatted_end_time\"] = responseBody.has(\"formatted_end_time\");\n    tests[\"generated_time\"] = responseBody.has(\"generated_time\");\n    tests[\"start_time\"] = responseBody.has(\"start_time\");\n    tests[\"formatted_generated_time\"] = responseBody.has(\"formatted_generated_time\");\n    tests[\"timezone\"] = responseBody.has(\"timezone\");\n    tests[\"Report Type is 15\"] = Number(response.data.info.report_type) === 15;\n    tests[\"Report Name\"] = response.data.info.report_name === \"Top N Reports\";\n    tests[\"Top 10\"] = Number(response.data.info.limit) === 10;\n    tests[\"Monitor Type is RESTAPISEQ\"] = response.data.info.monitor_type === \"RESTAPISEQ\";\n    tests[\"Period is 0\"] = Number(response.data.info.period) === 0;\n    tests[\"Period Name\"] = response.data.info.period_name === \"Last Hour\";\n    if (responseBody.has(\"units\")) {\n        tests[\"Attribute response_time Name\"] = response.data.info.units.response_time === \"ms\";\n        //tests[\"Attribute transactiontime Name\"] = response.data.info.units.transactiontime === \"ms\";\n    }\n    else { tests[\"No monitors in list\"] = responseBody.has(\"units\"); }\n}\nelse\n{tests[\"info node is missing\"] = responseBody.has(\"info\") ;}\n\nvar success = true;\nfor(var i=0; i<response.data.report.length-1 ;i++){\n    if(Number(response.data.report[i].average) < Number(response.data.report[i+1].average)){\n        success = false;\n        break;\n    }\n}\n\ntests[\"Sorted Based on Response Time\"]=success;\n\nvar startTime = Date.parse(response.data.info.start_time);\nvar endTime = Date.parse(response.data.info.end_time);\nvar diff = endTime - startTime;\n\ntests[\"One Hour Data\"]=diff === 3600000;\n\nvar generatedHour = new Date(response.data.info.generated_time).getHours();\nvar endHour = new Date(response.data.info.end_time).getHours();\n\ntests[\"Last Hour Data\"] = generatedHour === endHour;",
    "output": "let response = pm.response.json();\nlet nr = response.data || {};\n\nif (nr.monitors && nr.monitors.length > 0) {\n    let diskId = nr.monitors[0].child_id;\n    let monitorId = nr.monitors[0].monitor_id;\n    pm.environment.set(\"disk_id\", diskId);\n    pm.environment.set(\"server_id\", monitorId);\n    console.log(\"disk_id ID set in environment:\", diskId);\n} else {\n    console.error(\"Monitors array is missing or empty in the response.\");\n}"
  },
  {
    "instruction": "Convert the following Postman script from the older v2.1 format to the newer v2.2.0 format.",
    "input": "let responseData = pm.response.json();\nif (responseData.data && responseData.data.monitors && responseData.data.monitors.length > 0) {\n    let diskId = responseData.data.monitors[0].child_id;\n    let monitorId = responseData.data.monitors[0].monitor_id;\n    pm.environment.set(\"disk_id\", diskId);\n    pm.environment.set(\"server_id\", monitorId);\n    console.log(\"disk_id ID set in environment:\", diskId);\n} else {\n    console.error(\"Monitors array is missing or empty in the response.\");\n}",
    "output": "let response = pm.response.json();\nlet nr = response.data || {};\n\npm.test(\"Response should have root structure with 'code', 'message', and 'data'\", function() {\n    pm.expect(response).to.have.property(\"code\").that.is.a(\"number\");\n    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\n    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");\n});\n\npm.test(\"'data' object should contain required fields\", function() {\n    pm.expect(nr).to.have.property(\"outage_details\").that.is.an(\"array\");\n    pm.expect(nr).to.have.property(\"critical_duration\").that.is.a(\"string\");\n    pm.expect(nr).to.have.property(\"trouble_duration\").that.is.a(\"string\");\n    pm.expect(nr).to.have.property(\"critical_count\").that.is.a(\"number\");\n    pm.expect(nr).to.have.property(\"trouble_count\").that.is.a(\"number\");\n    pm.expect(nr).to.have.property(\"period_name\").that.is.a(\"string\");\n    pm.expect(nr).to.have.property(\"down_count\").that.is.a(\"number\");\n    pm.expect(nr).to.have.property(\"down_duration\").that.is.a(\"string\");\n    pm.expect(nr).to.have.property(\"info\").that.is.an(\"object\");\n});\n\npm.test(\"'info' object should contain required fields\", function() {\n    let info = nr.info;\n    pm.expect(info).to.have.property(\"start_time\").that.is.a(\"string\");\n    pm.expect(info).to.have.property(\"period\").that.is.a(\"number\");\n    pm.expect(info).to.have.property(\"timezone\").that.is.a(\"string\");\n    pm.expect(info).to.have.property(\"end_time\").that.is.a(\"string\");\n    pm.expect(info).to.have.property(\"period_name\").that.is.a(\"string\");\n    pm.expect(info).to.have.property(\"formatted_start_time\").that.is.a(\"string\");\n    pm.expect(info).to.have.property(\"formatted_end_time\").that.is.a(\"string\");\n    pm.expect(info).to.have.property(\"formatted_generated_time\").that.is.a(\"string\");\n    pm.expect(info).to.have.property(\"generated_time\").that.is.a(\"string\");\n});\n\nif (nr.outage_details.length > 0) {\n    pm.test(\"'outage_details' array should contain correct structure if non-empty\", function() {\n        nr.outage_details.forEach(detail => {\n            pm.expect(detail).to.have.property(\"duration\").that.is.a(\"string\");\n            pm.expect(detail).to.have.property(\"endtime\").that.is.a(\"string\");\n            pm.expect(detail).to.have.property(\"starttime\").that.is.a(\"string\");\n            pm.expect(detail).to.have.property(\"status\").that.is.a(\"number\");\n        });\n    });\n} else {\n    pm.test(\"'outage_details' should be an empty array\", function() {\n        pm.expect(nr.outage_details).to.be.an(\"array\").that.is.empty;\n    });\n}"
  }
]